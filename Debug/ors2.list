
ors2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800868c  0800868c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008694  08008694  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008694  08008694  00018694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008698  08008698  00018698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800869c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000828  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008bc  200008bc  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a512  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003aa3  00000000  00000000  0003a5d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  0003e080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb0  00000000  00000000  0003f190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a55  00000000  00000000  00040140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001719a  00000000  00000000  00063b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb6e0  00000000  00000000  0007ad2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014640f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048a0  00000000  00000000  00146464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008658 	.word	0x08008658

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	08008658 	.word	0x08008658

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
   int8_t x_zero=0;
   int8_t y_zero=0;

SPI_HandleTypeDef hspi1;
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b096      	sub	sp, #88	; 0x58
 80004c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fea9 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 fa2d 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 fb29 	bl	8000b24 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 fa93 	bl	80009fc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 fabf 	bl	8000a58 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 faed 	bl	8000ab8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004de:	f007 fca9 	bl	8007e34 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  __HAL_RCC_SPI1_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
 80004e6:	4baf      	ldr	r3, [pc, #700]	; (80007a4 <main+0x2e4>)
 80004e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ea:	4aae      	ldr	r2, [pc, #696]	; (80007a4 <main+0x2e4>)
 80004ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004f0:	6453      	str	r3, [r2, #68]	; 0x44
 80004f2:	4bac      	ldr	r3, [pc, #688]	; (80007a4 <main+0x2e4>)
 80004f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	693b      	ldr	r3, [r7, #16]

    hspi1.Instance = SPI1;
 80004fe:	4baa      	ldr	r3, [pc, #680]	; (80007a8 <main+0x2e8>)
 8000500:	4aaa      	ldr	r2, [pc, #680]	; (80007ac <main+0x2ec>)
 8000502:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000504:	4ba8      	ldr	r3, [pc, #672]	; (80007a8 <main+0x2e8>)
 8000506:	f44f 7282 	mov.w	r2, #260	; 0x104
 800050a:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800050c:	4ba6      	ldr	r3, [pc, #664]	; (80007a8 <main+0x2e8>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000512:	4ba5      	ldr	r3, [pc, #660]	; (80007a8 <main+0x2e8>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000518:	4ba3      	ldr	r3, [pc, #652]	; (80007a8 <main+0x2e8>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800051e:	4ba2      	ldr	r3, [pc, #648]	; (80007a8 <main+0x2e8>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000524:	4ba0      	ldr	r3, [pc, #640]	; (80007a8 <main+0x2e8>)
 8000526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800052a:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800052c:	4b9e      	ldr	r3, [pc, #632]	; (80007a8 <main+0x2e8>)
 800052e:	2238      	movs	r2, #56	; 0x38
 8000530:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000532:	4b9d      	ldr	r3, [pc, #628]	; (80007a8 <main+0x2e8>)
 8000534:	2200      	movs	r2, #0
 8000536:	621a      	str	r2, [r3, #32]
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000538:	4b9b      	ldr	r3, [pc, #620]	; (80007a8 <main+0x2e8>)
 800053a:	2200      	movs	r2, #0
 800053c:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_SPI_Init(&hspi1);
 800053e:	489a      	ldr	r0, [pc, #616]	; (80007a8 <main+0x2e8>)
 8000540:	f004 fad6 	bl	8004af0 <HAL_SPI_Init>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	4b96      	ldr	r3, [pc, #600]	; (80007a4 <main+0x2e4>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	4a95      	ldr	r2, [pc, #596]	; (80007a4 <main+0x2e4>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6313      	str	r3, [r2, #48]	; 0x30
 8000554:	4b93      	ldr	r3, [pc, #588]	; (80007a4 <main+0x2e4>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]

      GPIO_InitTypeDef init_structure;
      init_structure.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8000560:	23e0      	movs	r3, #224	; 0xe0
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
      init_structure.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	647b      	str	r3, [r7, #68]	; 0x44
      init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	64bb      	str	r3, [r7, #72]	; 0x48
      init_structure.Mode = GPIO_MODE_AF_PP;
 800056c:	2302      	movs	r3, #2
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
      init_structure.Alternate = GPIO_AF5_SPI1;
 8000570:	2305      	movs	r3, #5
 8000572:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOA, &init_structure);
 8000574:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000578:	4619      	mov	r1, r3
 800057a:	488d      	ldr	r0, [pc, #564]	; (80007b0 <main+0x2f0>)
 800057c:	f000 fff6 	bl	800156c <HAL_GPIO_Init>


  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b87      	ldr	r3, [pc, #540]	; (80007a4 <main+0x2e4>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	4a86      	ldr	r2, [pc, #536]	; (80007a4 <main+0x2e4>)
 800058a:	f043 0310 	orr.w	r3, r3, #16
 800058e:	6313      	str	r3, [r2, #48]	; 0x30
 8000590:	4b84      	ldr	r3, [pc, #528]	; (80007a4 <main+0x2e4>)
 8000592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000594:	f003 0310 	and.w	r3, r3, #16
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
	init_structure.Pin = GPIO_PIN_3;
 800059c:	2308      	movs	r3, #8
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
	init_structure.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	647b      	str	r3, [r7, #68]	; 0x44
	init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 80005a4:	2300      	movs	r3, #0
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
	init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80005a8:	2301      	movs	r3, #1
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOE, &init_structure);
 80005ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005b0:	4619      	mov	r1, r3
 80005b2:	4880      	ldr	r0, [pc, #512]	; (80007b4 <main+0x2f4>)
 80005b4:	f000 ffda 	bl	800156c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2108      	movs	r1, #8
 80005bc:	487d      	ldr	r0, [pc, #500]	; (80007b4 <main+0x2f4>)
 80005be:	f001 f989 	bl	80018d4 <HAL_GPIO_WritePin>



  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4b77      	ldr	r3, [pc, #476]	; (80007a4 <main+0x2e4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a76      	ldr	r2, [pc, #472]	; (80007a4 <main+0x2e4>)
 80005cc:	f043 0308 	orr.w	r3, r3, #8
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b74      	ldr	r3, [pc, #464]	; (80007a4 <main+0x2e4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0308 	and.w	r3, r3, #8
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  	  //init led
    GPIO_InitTypeDef leds;
    leds.Pin =  GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80005de:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
    leds.Mode = GPIO_MODE_OUTPUT_PP;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    leds.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
    leds.Speed = GPIO_SPEED_FREQ_LOW;
 80005ec:	2300      	movs	r3, #0
 80005ee:	637b      	str	r3, [r7, #52]	; 0x34


    //init button
    HAL_GPIO_Init(GPIOD,&leds);
 80005f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005f4:	4619      	mov	r1, r3
 80005f6:	4870      	ldr	r0, [pc, #448]	; (80007b8 <main+0x2f8>)
 80005f8:	f000 ffb8 	bl	800156c <HAL_GPIO_Init>
     __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	4b68      	ldr	r3, [pc, #416]	; (80007a4 <main+0x2e4>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	4a67      	ldr	r2, [pc, #412]	; (80007a4 <main+0x2e4>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6313      	str	r3, [r2, #48]	; 0x30
 800060c:	4b65      	ldr	r3, [pc, #404]	; (80007a4 <main+0x2e4>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

     GPIO_InitTypeDef button;
     button.Pin =  GPIO_PIN_0;
 8000618:	2301      	movs	r3, #1
 800061a:	617b      	str	r3, [r7, #20]
     button.Mode = GPIO_MODE_IT_RISING_FALLING;
 800061c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000620:	61bb      	str	r3, [r7, #24]
     button.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]

     HAL_GPIO_Init(GPIOA,&button);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	4860      	ldr	r0, [pc, #384]	; (80007b0 <main+0x2f0>)
 800062e:	f000 ff9d 	bl	800156c <HAL_GPIO_Init>


     HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 2);
 8000632:	2202      	movs	r2, #2
 8000634:	2101      	movs	r1, #1
 8000636:	2006      	movs	r0, #6
 8000638:	f000 ff61 	bl	80014fe <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800063c:	2006      	movs	r0, #6
 800063e:	f000 ff7a 	bl	8001536 <HAL_NVIC_EnableIRQ>




     // slave deselect
     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	485b      	ldr	r0, [pc, #364]	; (80007b4 <main+0x2f4>)
 8000648:	f001 f944 	bl	80018d4 <HAL_GPIO_WritePin>
     out = 0x8F;
 800064c:	4b5b      	ldr	r3, [pc, #364]	; (80007bc <main+0x2fc>)
 800064e:	228f      	movs	r2, #143	; 0x8f
 8000650:	701a      	strb	r2, [r3, #0]
     HAL_SPI_TransmitReceive(&hspi1, &out, &in, 1, HAL_MAX_DELAY);
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2301      	movs	r3, #1
 800065a:	4a59      	ldr	r2, [pc, #356]	; (80007c0 <main+0x300>)
 800065c:	4957      	ldr	r1, [pc, #348]	; (80007bc <main+0x2fc>)
 800065e:	4852      	ldr	r0, [pc, #328]	; (80007a8 <main+0x2e8>)
 8000660:	f004 facf 	bl	8004c02 <HAL_SPI_TransmitReceive>
     HAL_SPI_TransmitReceive(&hspi1, &out, &in, 1, HAL_MAX_DELAY);
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2301      	movs	r3, #1
 800066c:	4a54      	ldr	r2, [pc, #336]	; (80007c0 <main+0x300>)
 800066e:	4953      	ldr	r1, [pc, #332]	; (80007bc <main+0x2fc>)
 8000670:	484d      	ldr	r0, [pc, #308]	; (80007a8 <main+0x2e8>)
 8000672:	f004 fac6 	bl	8004c02 <HAL_SPI_TransmitReceive>
     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000676:	2201      	movs	r2, #1
 8000678:	2108      	movs	r1, #8
 800067a:	484e      	ldr	r0, [pc, #312]	; (80007b4 <main+0x2f4>)
 800067c:	f001 f92a 	bl	80018d4 <HAL_GPIO_WritePin>

     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2108      	movs	r1, #8
 8000684:	484b      	ldr	r0, [pc, #300]	; (80007b4 <main+0x2f4>)
 8000686:	f001 f925 	bl	80018d4 <HAL_GPIO_WritePin>
     out = 0x20;
 800068a:	4b4c      	ldr	r3, [pc, #304]	; (80007bc <main+0x2fc>)
 800068c:	2220      	movs	r2, #32
 800068e:	701a      	strb	r2, [r3, #0]
     HAL_SPI_TransmitReceive(&hspi1, &out, &in, 1, HAL_MAX_DELAY);
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2301      	movs	r3, #1
 8000698:	4a49      	ldr	r2, [pc, #292]	; (80007c0 <main+0x300>)
 800069a:	4948      	ldr	r1, [pc, #288]	; (80007bc <main+0x2fc>)
 800069c:	4842      	ldr	r0, [pc, #264]	; (80007a8 <main+0x2e8>)
 800069e:	f004 fab0 	bl	8004c02 <HAL_SPI_TransmitReceive>
     out = 0x47;
 80006a2:	4b46      	ldr	r3, [pc, #280]	; (80007bc <main+0x2fc>)
 80006a4:	2247      	movs	r2, #71	; 0x47
 80006a6:	701a      	strb	r2, [r3, #0]
     HAL_SPI_TransmitReceive(&hspi1, &out, &in, 1, HAL_MAX_DELAY);
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2301      	movs	r3, #1
 80006b0:	4a43      	ldr	r2, [pc, #268]	; (80007c0 <main+0x300>)
 80006b2:	4942      	ldr	r1, [pc, #264]	; (80007bc <main+0x2fc>)
 80006b4:	483c      	ldr	r0, [pc, #240]	; (80007a8 <main+0x2e8>)
 80006b6:	f004 faa4 	bl	8004c02 <HAL_SPI_TransmitReceive>
     HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2108      	movs	r1, #8
 80006be:	483d      	ldr	r0, [pc, #244]	; (80007b4 <main+0x2f4>)
 80006c0:	f001 f908 	bl	80018d4 <HAL_GPIO_WritePin>

     HAL_Delay(500);
 80006c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c8:	f000 fe1a 	bl	8001300 <HAL_Delay>

  while (1)
  {
    /* USER CODE END WHILE */
	  // beri naklon po x osi -> Naslov 0x29
	 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2108      	movs	r1, #8
 80006d0:	4838      	ldr	r0, [pc, #224]	; (80007b4 <main+0x2f4>)
 80006d2:	f001 f8ff 	bl	80018d4 <HAL_GPIO_WritePin>
	 	 out = 0x29 | 0x80; // 0xa9
 80006d6:	4b39      	ldr	r3, [pc, #228]	; (80007bc <main+0x2fc>)
 80006d8:	22a9      	movs	r2, #169	; 0xa9
 80006da:	701a      	strb	r2, [r3, #0]
	 	 HAL_SPI_TransmitReceive(&hspi1, &out, &in, 1, HAL_MAX_DELAY);
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2301      	movs	r3, #1
 80006e4:	4a36      	ldr	r2, [pc, #216]	; (80007c0 <main+0x300>)
 80006e6:	4935      	ldr	r1, [pc, #212]	; (80007bc <main+0x2fc>)
 80006e8:	482f      	ldr	r0, [pc, #188]	; (80007a8 <main+0x2e8>)
 80006ea:	f004 fa8a 	bl	8004c02 <HAL_SPI_TransmitReceive>
	 	 HAL_SPI_TransmitReceive(&hspi1, &out, &in, 1, HAL_MAX_DELAY);
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2301      	movs	r3, #1
 80006f6:	4a32      	ldr	r2, [pc, #200]	; (80007c0 <main+0x300>)
 80006f8:	4930      	ldr	r1, [pc, #192]	; (80007bc <main+0x2fc>)
 80006fa:	482b      	ldr	r0, [pc, #172]	; (80007a8 <main+0x2e8>)
 80006fc:	f004 fa81 	bl	8004c02 <HAL_SPI_TransmitReceive>
	 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2108      	movs	r1, #8
 8000704:	482b      	ldr	r0, [pc, #172]	; (80007b4 <main+0x2f4>)
 8000706:	f001 f8e5 	bl	80018d4 <HAL_GPIO_WritePin>

	 	 x_acc = in;
 800070a:	4b2d      	ldr	r3, [pc, #180]	; (80007c0 <main+0x300>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b25a      	sxtb	r2, r3
 8000710:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <main+0x304>)
 8000712:	701a      	strb	r2, [r3, #0]

	 	 // beri naklon po y osi -> Naslov 0x2B
	 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2108      	movs	r1, #8
 8000718:	4826      	ldr	r0, [pc, #152]	; (80007b4 <main+0x2f4>)
 800071a:	f001 f8db 	bl	80018d4 <HAL_GPIO_WritePin>
	 	 out = 0x2B | 0x80; // 0xaB
 800071e:	4b27      	ldr	r3, [pc, #156]	; (80007bc <main+0x2fc>)
 8000720:	22ab      	movs	r2, #171	; 0xab
 8000722:	701a      	strb	r2, [r3, #0]
	 	 HAL_SPI_TransmitReceive(&hspi1, &out, &in, 1, HAL_MAX_DELAY);
 8000724:	f04f 33ff 	mov.w	r3, #4294967295
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2301      	movs	r3, #1
 800072c:	4a24      	ldr	r2, [pc, #144]	; (80007c0 <main+0x300>)
 800072e:	4923      	ldr	r1, [pc, #140]	; (80007bc <main+0x2fc>)
 8000730:	481d      	ldr	r0, [pc, #116]	; (80007a8 <main+0x2e8>)
 8000732:	f004 fa66 	bl	8004c02 <HAL_SPI_TransmitReceive>
	 	 HAL_SPI_TransmitReceive(&hspi1, &out, &in, 1, HAL_MAX_DELAY);
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2301      	movs	r3, #1
 800073e:	4a20      	ldr	r2, [pc, #128]	; (80007c0 <main+0x300>)
 8000740:	491e      	ldr	r1, [pc, #120]	; (80007bc <main+0x2fc>)
 8000742:	4819      	ldr	r0, [pc, #100]	; (80007a8 <main+0x2e8>)
 8000744:	f004 fa5d 	bl	8004c02 <HAL_SPI_TransmitReceive>
	 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2108      	movs	r1, #8
 800074c:	4819      	ldr	r0, [pc, #100]	; (80007b4 <main+0x2f4>)
 800074e:	f001 f8c1 	bl	80018d4 <HAL_GPIO_WritePin>

	 	 y_acc = in;
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <main+0x300>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b25a      	sxtb	r2, r3
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <main+0x308>)
 800075a:	701a      	strb	r2, [r3, #0]

	 	 if(x_acc  - x_zero < - 10 && ((mode==0) | (mode == 2))){
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <main+0x304>)
 800075e:	f993 3000 	ldrsb.w	r3, [r3]
 8000762:	461a      	mov	r2, r3
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <main+0x30c>)
 8000766:	f993 3000 	ldrsb.w	r3, [r3]
 800076a:	1ad3      	subs	r3, r2, r3
 800076c:	f113 0f0a 	cmn.w	r3, #10
 8000770:	da37      	bge.n	80007e2 <main+0x322>
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <main+0x310>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	bf0c      	ite	eq
 800077a:	2301      	moveq	r3, #1
 800077c:	2300      	movne	r3, #0
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <main+0x310>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b02      	cmp	r3, #2
 8000786:	bf0c      	ite	eq
 8000788:	2301      	moveq	r3, #1
 800078a:	2300      	movne	r3, #0
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4313      	orrs	r3, r2
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d025      	beq.n	80007e2 <main+0x322>
	 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079c:	4806      	ldr	r0, [pc, #24]	; (80007b8 <main+0x2f8>)
 800079e:	f001 f899 	bl	80018d4 <HAL_GPIO_WritePin>
 80007a2:	e017      	b.n	80007d4 <main+0x314>
 80007a4:	40023800 	.word	0x40023800
 80007a8:	20000128 	.word	0x20000128
 80007ac:	40013000 	.word	0x40013000
 80007b0:	40020000 	.word	0x40020000
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40020c00 	.word	0x40020c00
 80007bc:	20000124 	.word	0x20000124
 80007c0:	200000cc 	.word	0x200000cc
 80007c4:	20000125 	.word	0x20000125
 80007c8:	20000180 	.word	0x20000180
 80007cc:	200000b1 	.word	0x200000b1
 80007d0:	200000b0 	.word	0x200000b0
	 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007da:	484d      	ldr	r0, [pc, #308]	; (8000910 <main+0x450>)
 80007dc:	f001 f87a 	bl	80018d4 <HAL_GPIO_WritePin>
 80007e0:	e034      	b.n	800084c <main+0x38c>
	 	 }
	 	 else if (x_acc  - x_zero > 10 && ((mode==0) | (mode == 2))){
 80007e2:	4b4c      	ldr	r3, [pc, #304]	; (8000914 <main+0x454>)
 80007e4:	f993 3000 	ldrsb.w	r3, [r3]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b4b      	ldr	r3, [pc, #300]	; (8000918 <main+0x458>)
 80007ec:	f993 3000 	ldrsb.w	r3, [r3]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	2b0a      	cmp	r3, #10
 80007f4:	dd1e      	ble.n	8000834 <main+0x374>
 80007f6:	4b49      	ldr	r3, [pc, #292]	; (800091c <main+0x45c>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	bf0c      	ite	eq
 80007fe:	2301      	moveq	r3, #1
 8000800:	2300      	movne	r3, #0
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b45      	ldr	r3, [pc, #276]	; (800091c <main+0x45c>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b02      	cmp	r3, #2
 800080a:	bf0c      	ite	eq
 800080c:	2301      	moveq	r3, #1
 800080e:	2300      	movne	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d00c      	beq.n	8000834 <main+0x374>
	 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 800081a:	2201      	movs	r2, #1
 800081c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000820:	483b      	ldr	r0, [pc, #236]	; (8000910 <main+0x450>)
 8000822:	f001 f857 	bl	80018d4 <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800082c:	4838      	ldr	r0, [pc, #224]	; (8000910 <main+0x450>)
 800082e:	f001 f851 	bl	80018d4 <HAL_GPIO_WritePin>
 8000832:	e00b      	b.n	800084c <main+0x38c>
	 	 }
	 	 else {
	 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800083a:	4835      	ldr	r0, [pc, #212]	; (8000910 <main+0x450>)
 800083c:	f001 f84a 	bl	80018d4 <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000846:	4832      	ldr	r0, [pc, #200]	; (8000910 <main+0x450>)
 8000848:	f001 f844 	bl	80018d4 <HAL_GPIO_WritePin>
	 	 }

	 	 if(y_acc  - y_zero < - 10 &&( (mode==1) | (mode == 2))){
 800084c:	4b34      	ldr	r3, [pc, #208]	; (8000920 <main+0x460>)
 800084e:	f993 3000 	ldrsb.w	r3, [r3]
 8000852:	461a      	mov	r2, r3
 8000854:	4b33      	ldr	r3, [pc, #204]	; (8000924 <main+0x464>)
 8000856:	f993 3000 	ldrsb.w	r3, [r3]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	f113 0f0a 	cmn.w	r3, #10
 8000860:	da1e      	bge.n	80008a0 <main+0x3e0>
 8000862:	4b2e      	ldr	r3, [pc, #184]	; (800091c <main+0x45c>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	bf0c      	ite	eq
 800086a:	2301      	moveq	r3, #1
 800086c:	2300      	movne	r3, #0
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b2a      	ldr	r3, [pc, #168]	; (800091c <main+0x45c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b02      	cmp	r3, #2
 8000876:	bf0c      	ite	eq
 8000878:	2301      	moveq	r3, #1
 800087a:	2300      	movne	r3, #0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d00c      	beq.n	80008a0 <main+0x3e0>
	 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088c:	4820      	ldr	r0, [pc, #128]	; (8000910 <main+0x450>)
 800088e:	f001 f821 	bl	80018d4 <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000898:	481d      	ldr	r0, [pc, #116]	; (8000910 <main+0x450>)
 800089a:	f001 f81b 	bl	80018d4 <HAL_GPIO_WritePin>
 800089e:	e034      	b.n	800090a <main+0x44a>
	 	 }
	 	 else if (y_acc - y_zero > 10 &&( (mode==1) | (mode == 2))){
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <main+0x460>)
 80008a2:	f993 3000 	ldrsb.w	r3, [r3]
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <main+0x464>)
 80008aa:	f993 3000 	ldrsb.w	r3, [r3]
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	2b0a      	cmp	r3, #10
 80008b2:	dd1e      	ble.n	80008f2 <main+0x432>
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <main+0x45c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	bf0c      	ite	eq
 80008bc:	2301      	moveq	r3, #1
 80008be:	2300      	movne	r3, #0
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <main+0x45c>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	bf0c      	ite	eq
 80008ca:	2301      	moveq	r3, #1
 80008cc:	2300      	movne	r3, #0
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d00c      	beq.n	80008f2 <main+0x432>
	 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008de:	480c      	ldr	r0, [pc, #48]	; (8000910 <main+0x450>)
 80008e0:	f000 fff8 	bl	80018d4 <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ea:	4809      	ldr	r0, [pc, #36]	; (8000910 <main+0x450>)
 80008ec:	f000 fff2 	bl	80018d4 <HAL_GPIO_WritePin>
 80008f0:	e00b      	b.n	800090a <main+0x44a>
	 	 }
	 	 else {
	 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <main+0x450>)
 80008fa:	f000 ffeb 	bl	80018d4 <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <main+0x450>)
 8000906:	f000 ffe5 	bl	80018d4 <HAL_GPIO_WritePin>
	 	 }

    MX_USB_HOST_Process();
 800090a:	f007 fab9 	bl	8007e80 <MX_USB_HOST_Process>
	 	 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800090e:	e6dd      	b.n	80006cc <main+0x20c>
 8000910:	40020c00 	.word	0x40020c00
 8000914:	20000125 	.word	0x20000125
 8000918:	200000b1 	.word	0x200000b1
 800091c:	200000b0 	.word	0x200000b0
 8000920:	20000180 	.word	0x20000180
 8000924:	200000b2 	.word	0x200000b2

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	; 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2230      	movs	r2, #48	; 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f007 fdbe 	bl	80084b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <SystemClock_Config+0xcc>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a27      	ldr	r2, [pc, #156]	; (80009f4 <SystemClock_Config+0xcc>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <SystemClock_Config+0xcc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <SystemClock_Config+0xd0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <SystemClock_Config+0xd0>)
 8000972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <SystemClock_Config+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000998:	2308      	movs	r3, #8
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800099c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009a6:	2307      	movs	r3, #7
 80009a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	4618      	mov	r0, r3
 80009b0:	f003 fafe 	bl	8003fb0 <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009ba:	f000 f9b1 	bl	8000d20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	230f      	movs	r3, #15
 80009c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c2:	2302      	movs	r3, #2
 80009c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	2105      	movs	r1, #5
 80009dc:	4618      	mov	r0, r3
 80009de:	f003 fd5f 	bl	80044a0 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009e8:	f000 f99a 	bl	8000d20 <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3750      	adds	r7, #80	; 0x50
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40007000 	.word	0x40007000

080009fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a02:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <MX_I2C1_Init+0x54>)
 8000a04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a08:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <MX_I2C1_Init+0x58>)
 8000a0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_I2C1_Init+0x50>)
 8000a3a:	f002 fcd5 	bl	80033e8 <HAL_I2C_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a44:	f000 f96c 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200000d0 	.word	0x200000d0
 8000a50:	40005400 	.word	0x40005400
 8000a54:	000186a0 	.word	0x000186a0

08000a58 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a5e:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <MX_I2S3_Init+0x58>)
 8000a60:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a68:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a7c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a80:	4a0c      	ldr	r2, [pc, #48]	; (8000ab4 <MX_I2S3_Init+0x5c>)
 8000a82:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_I2S3_Init+0x54>)
 8000a98:	f002 fdea 	bl	8003670 <HAL_I2S_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000aa2:	f000 f93d 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000184 	.word	0x20000184
 8000ab0:	40003c00 	.word	0x40003c00
 8000ab4:	00017700 	.word	0x00017700

08000ab8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000abe:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <MX_SPI1_Init+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000ac4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000b04:	220a      	movs	r2, #10
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_SPI1_Init+0x64>)
 8000b0a:	f003 fff1 	bl	8004af0 <HAL_SPI_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b14:	f000 f904 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000128 	.word	0x20000128
 8000b20:	40013000 	.word	0x40013000

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08c      	sub	sp, #48	; 0x30
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
 8000b3e:	4b72      	ldr	r3, [pc, #456]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a71      	ldr	r2, [pc, #452]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000b44:	f043 0310 	orr.w	r3, r3, #16
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b6f      	ldr	r3, [pc, #444]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0310 	and.w	r3, r3, #16
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	4b6b      	ldr	r3, [pc, #428]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a6a      	ldr	r2, [pc, #424]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b68      	ldr	r3, [pc, #416]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b64      	ldr	r3, [pc, #400]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a63      	ldr	r2, [pc, #396]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b61      	ldr	r3, [pc, #388]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b5d      	ldr	r3, [pc, #372]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a5c      	ldr	r2, [pc, #368]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b5a      	ldr	r3, [pc, #360]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b56      	ldr	r3, [pc, #344]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a55      	ldr	r2, [pc, #340]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b53      	ldr	r3, [pc, #332]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b4f      	ldr	r3, [pc, #316]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a4e      	ldr	r2, [pc, #312]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b4c      	ldr	r3, [pc, #304]	; (8000d08 <MX_GPIO_Init+0x1e4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2108      	movs	r1, #8
 8000be6:	4849      	ldr	r0, [pc, #292]	; (8000d0c <MX_GPIO_Init+0x1e8>)
 8000be8:	f000 fe74 	bl	80018d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4847      	ldr	r0, [pc, #284]	; (8000d10 <MX_GPIO_Init+0x1ec>)
 8000bf2:	f000 fe6f 	bl	80018d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000bfc:	4845      	ldr	r0, [pc, #276]	; (8000d14 <MX_GPIO_Init+0x1f0>)
 8000bfe:	f000 fe69 	bl	80018d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c02:	2308      	movs	r3, #8
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	483c      	ldr	r0, [pc, #240]	; (8000d0c <MX_GPIO_Init+0x1e8>)
 8000c1a:	f000 fca7 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4836      	ldr	r0, [pc, #216]	; (8000d10 <MX_GPIO_Init+0x1ec>)
 8000c36:	f000 fc99 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c3a:	2308      	movs	r3, #8
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	482e      	ldr	r0, [pc, #184]	; (8000d10 <MX_GPIO_Init+0x1ec>)
 8000c56:	f000 fc89 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c5e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	482a      	ldr	r0, [pc, #168]	; (8000d18 <MX_GPIO_Init+0x1f4>)
 8000c70:	f000 fc7c 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c74:	2304      	movs	r3, #4
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	4825      	ldr	r0, [pc, #148]	; (8000d1c <MX_GPIO_Init+0x1f8>)
 8000c88:	f000 fc70 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c9e:	2305      	movs	r3, #5
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	481c      	ldr	r0, [pc, #112]	; (8000d1c <MX_GPIO_Init+0x1f8>)
 8000caa:	f000 fc5f 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000cae:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000cb2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4813      	ldr	r0, [pc, #76]	; (8000d14 <MX_GPIO_Init+0x1f0>)
 8000cc8:	f000 fc50 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ccc:	2320      	movs	r3, #32
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <MX_GPIO_Init+0x1f0>)
 8000ce0:	f000 fc44 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ce8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <MX_GPIO_Init+0x1e8>)
 8000cfa:	f000 fc37 	bl	800156c <HAL_GPIO_Init>

}
 8000cfe:	bf00      	nop
 8000d00:	3730      	adds	r7, #48	; 0x30
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40020800 	.word	0x40020800
 8000d14:	40020c00 	.word	0x40020c00
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40020400 	.word	0x40020400

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <Error_Handler+0x8>
	...

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d6a:	2007      	movs	r0, #7
 8000d6c:	f000 fbbc 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800

08000d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a19      	ldr	r2, [pc, #100]	; (8000e00 <HAL_I2C_MspInit+0x84>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d12c      	bne.n	8000df8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dba:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc0:	2312      	movs	r3, #18
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480c      	ldr	r0, [pc, #48]	; (8000e08 <HAL_I2C_MspInit+0x8c>)
 8000dd8:	f000 fbc8 	bl	800156c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000de6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dea:	6413      	str	r3, [r2, #64]	; 0x40
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <HAL_I2C_MspInit+0x88>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	; 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40005400 	.word	0x40005400
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020400 	.word	0x40020400

08000e0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08e      	sub	sp, #56	; 0x38
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a31      	ldr	r2, [pc, #196]	; (8000efc <HAL_I2S_MspInit+0xf0>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d15a      	bne.n	8000ef2 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e40:	23c0      	movs	r3, #192	; 0xc0
 8000e42:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f003 fd0f 	bl	8004870 <HAL_RCCEx_PeriphCLKConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e58:	f7ff ff62 	bl	8000d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <HAL_I2S_MspInit+0xf4>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	4a26      	ldr	r2, [pc, #152]	; (8000f00 <HAL_I2S_MspInit+0xf4>)
 8000e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6c:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <HAL_I2S_MspInit+0xf4>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <HAL_I2S_MspInit+0xf4>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	4a1f      	ldr	r2, [pc, #124]	; (8000f00 <HAL_I2S_MspInit+0xf4>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6313      	str	r3, [r2, #48]	; 0x30
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_I2S_MspInit+0xf4>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_I2S_MspInit+0xf4>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <HAL_I2S_MspInit+0xf4>)
 8000e9e:	f043 0304 	orr.w	r3, r3, #4
 8000ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_I2S_MspInit+0xf4>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000eb0:	2310      	movs	r3, #16
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ec0:	2306      	movs	r3, #6
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480e      	ldr	r0, [pc, #56]	; (8000f04 <HAL_I2S_MspInit+0xf8>)
 8000ecc:	f000 fb4e 	bl	800156c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ed0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ee2:	2306      	movs	r3, #6
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	4619      	mov	r1, r3
 8000eec:	4806      	ldr	r0, [pc, #24]	; (8000f08 <HAL_I2S_MspInit+0xfc>)
 8000eee:	f000 fb3d 	bl	800156c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3738      	adds	r7, #56	; 0x38
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40003c00 	.word	0x40003c00
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000
 8000f08:	40020800 	.word	0x40020800

08000f0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_SPI_MspInit+0x84>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12b      	bne.n	8000f86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_SPI_MspInit+0x88>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_SPI_MspInit+0x88>)
 8000f38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_SPI_MspInit+0x88>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_SPI_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <HAL_SPI_MspInit+0x88>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_SPI_MspInit+0x88>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f66:	23e0      	movs	r3, #224	; 0xe0
 8000f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f76:	2305      	movs	r3, #5
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <HAL_SPI_MspInit+0x8c>)
 8000f82:	f000 faf3 	bl	800156c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40013000 	.word	0x40013000
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <MemManage_Handler+0x4>

08000fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 f96a 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  delay--;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <SysTick_Handler+0x30>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <SysTick_Handler+0x30>)
 8000ff8:	701a      	strb	r2, [r3, #0]
   if(delay<0) delay = 0;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <SysTick_Handler+0x30>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]

   delay2--;
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SysTick_Handler+0x34>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	b29b      	uxth	r3, r3
 8001004:	3b01      	subs	r3, #1
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <SysTick_Handler+0x34>)
 800100a:	801a      	strh	r2, [r3, #0]
     if(delay2<0) delay2 = 0;
 800100c:	4b02      	ldr	r3, [pc, #8]	; (8001018 <SysTick_Handler+0x34>)
 800100e:	881b      	ldrh	r3, [r3, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000000 	.word	0x20000000
 8001018:	20000002 	.word	0x20000002

0800101c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <OTG_FS_IRQHandler+0x10>)
 8001022:	f000 fedb 	bl	8001ddc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200005a8 	.word	0x200005a8

08001030 <EXTI0_IRQHandler>:

/* USER CODE BEGIN 1 */

void EXTI0_IRQHandler(){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
	extern uint8_t mode;




	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != 0 && delay == 0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET){
 8001036:	4b35      	ldr	r3, [pc, #212]	; (800110c <EXTI0_IRQHandler+0xdc>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	2b00      	cmp	r3, #0
 8001040:	d01b      	beq.n	800107a <EXTI0_IRQHandler+0x4a>
 8001042:	4b33      	ldr	r3, [pc, #204]	; (8001110 <EXTI0_IRQHandler+0xe0>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d116      	bne.n	800107a <EXTI0_IRQHandler+0x4a>
 800104c:	2101      	movs	r1, #1
 800104e:	4831      	ldr	r0, [pc, #196]	; (8001114 <EXTI0_IRQHandler+0xe4>)
 8001050:	f000 fc28 	bl	80018a4 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d10f      	bne.n	800107a <EXTI0_IRQHandler+0x4a>
	// Telo PSP
	delay = 200;
 800105a:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <EXTI0_IRQHandler+0xe0>)
 800105c:	22c8      	movs	r2, #200	; 0xc8
 800105e:	701a      	strb	r2, [r3, #0]

	    now = HAL_GetTick();
 8001060:	f000 f942 	bl	80012e8 <HAL_GetTick>
 8001064:	4603      	mov	r3, r0
 8001066:	4a2c      	ldr	r2, [pc, #176]	; (8001118 <EXTI0_IRQHandler+0xe8>)
 8001068:	6013      	str	r3, [r2, #0]
	    if(single==0){
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <EXTI0_IRQHandler+0xec>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d103      	bne.n	800107a <EXTI0_IRQHandler+0x4a>
	    	single=now;
 8001072:	4b29      	ldr	r3, [pc, #164]	; (8001118 <EXTI0_IRQHandler+0xe8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a29      	ldr	r2, [pc, #164]	; (800111c <EXTI0_IRQHandler+0xec>)
 8001078:	6013      	str	r3, [r2, #0]



	//__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
	}
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != 0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_RESET){
 800107a:	4b24      	ldr	r3, [pc, #144]	; (800110c <EXTI0_IRQHandler+0xdc>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d03e      	beq.n	8001104 <EXTI0_IRQHandler+0xd4>
 8001086:	2101      	movs	r1, #1
 8001088:	4822      	ldr	r0, [pc, #136]	; (8001114 <EXTI0_IRQHandler+0xe4>)
 800108a:	f000 fc0b 	bl	80018a4 <HAL_GPIO_ReadPin>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d137      	bne.n	8001104 <EXTI0_IRQHandler+0xd4>

			if(single!=0){
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <EXTI0_IRQHandler+0xec>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d030      	beq.n	80010fe <EXTI0_IRQHandler+0xce>
				now = HAL_GetTick();
 800109c:	f000 f924 	bl	80012e8 <HAL_GetTick>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <EXTI0_IRQHandler+0xe8>)
 80010a4:	6013      	str	r3, [r2, #0]

							uint32_t diff = now-single;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <EXTI0_IRQHandler+0xe8>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <EXTI0_IRQHandler+0xec>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	607b      	str	r3, [r7, #4]

							if(diff>=1200){
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80010b8:	d30a      	bcc.n	80010d0 <EXTI0_IRQHandler+0xa0>

										 extern int8_t x_acc;
													 extern   int8_t y_acc;
													 extern   int8_t x_zero;
													 extern  int8_t y_zero;
													x_zero=x_acc;
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <EXTI0_IRQHandler+0xf0>)
 80010bc:	f993 2000 	ldrsb.w	r2, [r3]
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <EXTI0_IRQHandler+0xf4>)
 80010c2:	701a      	strb	r2, [r3, #0]
													y_zero=y_acc;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <EXTI0_IRQHandler+0xf8>)
 80010c6:	f993 2000 	ldrsb.w	r2, [r3]
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <EXTI0_IRQHandler+0xfc>)
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e013      	b.n	80010f8 <EXTI0_IRQHandler+0xc8>
									}else{
										count++;
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <EXTI0_IRQHandler+0x100>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	3301      	adds	r3, #1
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <EXTI0_IRQHandler+0x100>)
 80010dc:	701a      	strb	r2, [r3, #0]
											if(count>2){count=0;}
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <EXTI0_IRQHandler+0x100>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d902      	bls.n	80010ee <EXTI0_IRQHandler+0xbe>
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <EXTI0_IRQHandler+0x100>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]

											mode = count;
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <EXTI0_IRQHandler+0x100>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <EXTI0_IRQHandler+0x104>)
 80010f6:	701a      	strb	r2, [r3, #0]

									}


							single=0;
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <EXTI0_IRQHandler+0xec>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]

			}



				__HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_PIN_0);
 80010fe:	4b03      	ldr	r3, [pc, #12]	; (800110c <EXTI0_IRQHandler+0xdc>)
 8001100:	2201      	movs	r2, #1
 8001102:	615a      	str	r2, [r3, #20]
		}



}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40013c00 	.word	0x40013c00
 8001110:	20000000 	.word	0x20000000
 8001114:	40020000 	.word	0x40020000
 8001118:	200000b8 	.word	0x200000b8
 800111c:	200000b4 	.word	0x200000b4
 8001120:	20000125 	.word	0x20000125
 8001124:	200000b1 	.word	0x200000b1
 8001128:	20000180 	.word	0x20000180
 800112c:	200000b2 	.word	0x200000b2
 8001130:	200000b3 	.word	0x200000b3
 8001134:	200000b0 	.word	0x200000b0

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f007 f96c 	bl	8008444 <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <_sbrk+0x64>)
 8001188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20020000 	.word	0x20020000
 8001198:	00000400 	.word	0x00000400
 800119c:	200000bc 	.word	0x200000bc
 80011a0:	200008c0 	.word	0x200008c0

080011a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <SystemInit+0x20>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <SystemInit+0x20>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e4:	4c0b      	ldr	r4, [pc, #44]	; (8001214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011f2:	f7ff ffd7 	bl	80011a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f007 f92b 	bl	8008450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff f961 	bl	80004c0 <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800120c:	0800869c 	.word	0x0800869c
  ldr r2, =_sbss
 8001210:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001214:	200008bc 	.word	0x200008bc

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f94f 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fd6c 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f967 	bl	8001552 <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f92f 	bl	80014fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000004 	.word	0x20000004
 80012b8:	2000000c 	.word	0x2000000c
 80012bc:	20000008 	.word	0x20000008

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	2000000c 	.word	0x2000000c
 80012e4:	200001cc 	.word	0x200001cc

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200001cc 	.word	0x200001cc

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000000c 	.word	0x2000000c

08001348 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001364:	4013      	ands	r3, r2
 8001366:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001370:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <__NVIC_SetPriorityGrouping+0x44>)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	60d3      	str	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	0a1b      	lsrs	r3, r3, #8
 800139a:	f003 0307 	and.w	r3, r3, #7
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	db0b      	blt.n	80013d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 021f 	and.w	r2, r3, #31
 80013c4:	4907      	ldr	r1, [pc, #28]	; (80013e4 <__NVIC_EnableIRQ+0x38>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	2001      	movs	r0, #1
 80013ce:	fa00 f202 	lsl.w	r2, r0, r2
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	; (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	; (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f7ff ff8e 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff29 	bl	8001348 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff3e 	bl	8001390 <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff8e 	bl	800143c <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5d 	bl	80013e8 <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff31 	bl	80013ac <__NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffa2 	bl	80014a4 <SysTick_Config>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	e16b      	b.n	8001860 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001588:	2201      	movs	r2, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	f040 815a 	bne.w	800185a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d005      	beq.n	80015be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d130      	bne.n	8001620 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	2203      	movs	r2, #3
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f4:	2201      	movs	r2, #1
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f003 0201 	and.w	r2, r3, #1
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b03      	cmp	r3, #3
 800162a:	d017      	beq.n	800165c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d123      	bne.n	80016b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	08da      	lsrs	r2, r3, #3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3208      	adds	r2, #8
 8001670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	220f      	movs	r2, #15
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	08da      	lsrs	r2, r3, #3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3208      	adds	r2, #8
 80016aa:	69b9      	ldr	r1, [r7, #24]
 80016ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0203 	and.w	r2, r3, #3
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80b4 	beq.w	800185a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b60      	ldr	r3, [pc, #384]	; (8001878 <HAL_GPIO_Init+0x30c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a5f      	ldr	r2, [pc, #380]	; (8001878 <HAL_GPIO_Init+0x30c>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b5d      	ldr	r3, [pc, #372]	; (8001878 <HAL_GPIO_Init+0x30c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800170e:	4a5b      	ldr	r2, [pc, #364]	; (800187c <HAL_GPIO_Init+0x310>)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	089b      	lsrs	r3, r3, #2
 8001714:	3302      	adds	r3, #2
 8001716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	220f      	movs	r2, #15
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a52      	ldr	r2, [pc, #328]	; (8001880 <HAL_GPIO_Init+0x314>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d02b      	beq.n	8001792 <HAL_GPIO_Init+0x226>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a51      	ldr	r2, [pc, #324]	; (8001884 <HAL_GPIO_Init+0x318>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d025      	beq.n	800178e <HAL_GPIO_Init+0x222>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a50      	ldr	r2, [pc, #320]	; (8001888 <HAL_GPIO_Init+0x31c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d01f      	beq.n	800178a <HAL_GPIO_Init+0x21e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4f      	ldr	r2, [pc, #316]	; (800188c <HAL_GPIO_Init+0x320>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d019      	beq.n	8001786 <HAL_GPIO_Init+0x21a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4e      	ldr	r2, [pc, #312]	; (8001890 <HAL_GPIO_Init+0x324>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_GPIO_Init+0x216>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4d      	ldr	r2, [pc, #308]	; (8001894 <HAL_GPIO_Init+0x328>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00d      	beq.n	800177e <HAL_GPIO_Init+0x212>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4c      	ldr	r2, [pc, #304]	; (8001898 <HAL_GPIO_Init+0x32c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d007      	beq.n	800177a <HAL_GPIO_Init+0x20e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4b      	ldr	r2, [pc, #300]	; (800189c <HAL_GPIO_Init+0x330>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_GPIO_Init+0x20a>
 8001772:	2307      	movs	r3, #7
 8001774:	e00e      	b.n	8001794 <HAL_GPIO_Init+0x228>
 8001776:	2308      	movs	r3, #8
 8001778:	e00c      	b.n	8001794 <HAL_GPIO_Init+0x228>
 800177a:	2306      	movs	r3, #6
 800177c:	e00a      	b.n	8001794 <HAL_GPIO_Init+0x228>
 800177e:	2305      	movs	r3, #5
 8001780:	e008      	b.n	8001794 <HAL_GPIO_Init+0x228>
 8001782:	2304      	movs	r3, #4
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x228>
 8001786:	2303      	movs	r3, #3
 8001788:	e004      	b.n	8001794 <HAL_GPIO_Init+0x228>
 800178a:	2302      	movs	r3, #2
 800178c:	e002      	b.n	8001794 <HAL_GPIO_Init+0x228>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_GPIO_Init+0x228>
 8001792:	2300      	movs	r3, #0
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	f002 0203 	and.w	r2, r2, #3
 800179a:	0092      	lsls	r2, r2, #2
 800179c:	4093      	lsls	r3, r2
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a4:	4935      	ldr	r1, [pc, #212]	; (800187c <HAL_GPIO_Init+0x310>)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	3302      	adds	r3, #2
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b2:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <HAL_GPIO_Init+0x334>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d6:	4a32      	ldr	r2, [pc, #200]	; (80018a0 <HAL_GPIO_Init+0x334>)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017dc:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <HAL_GPIO_Init+0x334>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001800:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <HAL_GPIO_Init+0x334>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <HAL_GPIO_Init+0x334>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800182a:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <HAL_GPIO_Init+0x334>)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_GPIO_Init+0x334>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001854:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <HAL_GPIO_Init+0x334>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3301      	adds	r3, #1
 800185e:	61fb      	str	r3, [r7, #28]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	2b0f      	cmp	r3, #15
 8001864:	f67f ae90 	bls.w	8001588 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40013800 	.word	0x40013800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020400 	.word	0x40020400
 8001888:	40020800 	.word	0x40020800
 800188c:	40020c00 	.word	0x40020c00
 8001890:	40021000 	.word	0x40021000
 8001894:	40021400 	.word	0x40021400
 8001898:	40021800 	.word	0x40021800
 800189c:	40021c00 	.word	0x40021c00
 80018a0:	40013c00 	.word	0x40013c00

080018a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	e001      	b.n	80018c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
 80018e0:	4613      	mov	r3, r2
 80018e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e4:	787b      	ldrb	r3, [r7, #1]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018f0:	e003      	b.n	80018fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018f2:	887b      	ldrh	r3, [r7, #2]
 80018f4:	041a      	lsls	r2, r3, #16
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	619a      	str	r2, [r3, #24]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001906:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001908:	b08f      	sub	sp, #60	; 0x3c
 800190a:	af0a      	add	r7, sp, #40	; 0x28
 800190c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e054      	b.n	80019c2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d106      	bne.n	8001938 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f006 fadc 	bl	8007ef0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2203      	movs	r2, #3
 800193c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f003 fc32 	bl	80051c0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	687e      	ldr	r6, [r7, #4]
 8001964:	466d      	mov	r5, sp
 8001966:	f106 0410 	add.w	r4, r6, #16
 800196a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001972:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001976:	e885 0003 	stmia.w	r5, {r0, r1}
 800197a:	1d33      	adds	r3, r6, #4
 800197c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800197e:	6838      	ldr	r0, [r7, #0]
 8001980:	f003 fbac 	bl	80050dc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2101      	movs	r1, #1
 800198a:	4618      	mov	r0, r3
 800198c:	f003 fc29 	bl	80051e2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	687e      	ldr	r6, [r7, #4]
 8001998:	466d      	mov	r5, sp
 800199a:	f106 0410 	add.w	r4, r6, #16
 800199e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80019ae:	1d33      	adds	r3, r6, #4
 80019b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019b2:	6838      	ldr	r0, [r7, #0]
 80019b4:	f003 fd90 	bl	80054d8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019ca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80019ca:	b590      	push	{r4, r7, lr}
 80019cc:	b089      	sub	sp, #36	; 0x24
 80019ce:	af04      	add	r7, sp, #16
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	4608      	mov	r0, r1
 80019d4:	4611      	mov	r1, r2
 80019d6:	461a      	mov	r2, r3
 80019d8:	4603      	mov	r3, r0
 80019da:	70fb      	strb	r3, [r7, #3]
 80019dc:	460b      	mov	r3, r1
 80019de:	70bb      	strb	r3, [r7, #2]
 80019e0:	4613      	mov	r3, r2
 80019e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_HCD_HC_Init+0x28>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e076      	b.n	8001ae0 <HAL_HCD_HC_Init+0x116>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	212c      	movs	r1, #44	; 0x2c
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	333d      	adds	r3, #61	; 0x3d
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	212c      	movs	r1, #44	; 0x2c
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	3338      	adds	r3, #56	; 0x38
 8001a1a:	787a      	ldrb	r2, [r7, #1]
 8001a1c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	212c      	movs	r1, #44	; 0x2c
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	3340      	adds	r3, #64	; 0x40
 8001a2c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a2e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	212c      	movs	r1, #44	; 0x2c
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3339      	adds	r3, #57	; 0x39
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	212c      	movs	r1, #44	; 0x2c
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	333f      	adds	r3, #63	; 0x3f
 8001a50:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	78ba      	ldrb	r2, [r7, #2]
 8001a5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a5e:	b2d0      	uxtb	r0, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	212c      	movs	r1, #44	; 0x2c
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	333a      	adds	r3, #58	; 0x3a
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	da09      	bge.n	8001a8c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	212c      	movs	r1, #44	; 0x2c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	333b      	adds	r3, #59	; 0x3b
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
 8001a8a:	e008      	b.n	8001a9e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	212c      	movs	r1, #44	; 0x2c
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	333b      	adds	r3, #59	; 0x3b
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	212c      	movs	r1, #44	; 0x2c
 8001aa4:	fb01 f303 	mul.w	r3, r1, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	333c      	adds	r3, #60	; 0x3c
 8001aac:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ab0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	787c      	ldrb	r4, [r7, #1]
 8001ab8:	78ba      	ldrb	r2, [r7, #2]
 8001aba:	78f9      	ldrb	r1, [r7, #3]
 8001abc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	4623      	mov	r3, r4
 8001ace:	f003 fe7d 	bl	80057cc <USB_HC_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}

08001ae8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_HCD_HC_Halt+0x1e>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e00f      	b.n	8001b26 <HAL_HCD_HC_Halt+0x3e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	78fa      	ldrb	r2, [r7, #3]
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f004 f8b9 	bl	8005c8e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	4608      	mov	r0, r1
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4603      	mov	r3, r0
 8001b40:	70fb      	strb	r3, [r7, #3]
 8001b42:	460b      	mov	r3, r1
 8001b44:	70bb      	strb	r3, [r7, #2]
 8001b46:	4613      	mov	r3, r2
 8001b48:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	212c      	movs	r1, #44	; 0x2c
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	333b      	adds	r3, #59	; 0x3b
 8001b58:	78ba      	ldrb	r2, [r7, #2]
 8001b5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	212c      	movs	r1, #44	; 0x2c
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	333f      	adds	r3, #63	; 0x3f
 8001b6a:	787a      	ldrb	r2, [r7, #1]
 8001b6c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b6e:	7c3b      	ldrb	r3, [r7, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d112      	bne.n	8001b9a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	212c      	movs	r1, #44	; 0x2c
 8001b7a:	fb01 f303 	mul.w	r3, r1, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	3342      	adds	r3, #66	; 0x42
 8001b82:	2203      	movs	r2, #3
 8001b84:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	212c      	movs	r1, #44	; 0x2c
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	333d      	adds	r3, #61	; 0x3d
 8001b94:	7f3a      	ldrb	r2, [r7, #28]
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	e008      	b.n	8001bac <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	212c      	movs	r1, #44	; 0x2c
 8001ba0:	fb01 f303 	mul.w	r3, r1, r3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3342      	adds	r3, #66	; 0x42
 8001ba8:	2202      	movs	r2, #2
 8001baa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	f200 80c6 	bhi.w	8001d40 <HAL_HCD_HC_SubmitRequest+0x210>
 8001bb4:	a201      	add	r2, pc, #4	; (adr r2, 8001bbc <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bba:	bf00      	nop
 8001bbc:	08001bcd 	.word	0x08001bcd
 8001bc0:	08001d2d 	.word	0x08001d2d
 8001bc4:	08001c31 	.word	0x08001c31
 8001bc8:	08001caf 	.word	0x08001caf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001bcc:	7c3b      	ldrb	r3, [r7, #16]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	f040 80b8 	bne.w	8001d44 <HAL_HCD_HC_SubmitRequest+0x214>
 8001bd4:	78bb      	ldrb	r3, [r7, #2]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 80b4 	bne.w	8001d44 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001bdc:	8b3b      	ldrh	r3, [r7, #24]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d108      	bne.n	8001bf4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	212c      	movs	r1, #44	; 0x2c
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	3355      	adds	r3, #85	; 0x55
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	212c      	movs	r1, #44	; 0x2c
 8001bfa:	fb01 f303 	mul.w	r3, r1, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	3355      	adds	r3, #85	; 0x55
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d109      	bne.n	8001c1c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	212c      	movs	r1, #44	; 0x2c
 8001c0e:	fb01 f303 	mul.w	r3, r1, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	3342      	adds	r3, #66	; 0x42
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c1a:	e093      	b.n	8001d44 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	212c      	movs	r1, #44	; 0x2c
 8001c22:	fb01 f303 	mul.w	r3, r1, r3
 8001c26:	4413      	add	r3, r2
 8001c28:	3342      	adds	r3, #66	; 0x42
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	701a      	strb	r2, [r3, #0]
      break;
 8001c2e:	e089      	b.n	8001d44 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c30:	78bb      	ldrb	r3, [r7, #2]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d11d      	bne.n	8001c72 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	212c      	movs	r1, #44	; 0x2c
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	3355      	adds	r3, #85	; 0x55
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d109      	bne.n	8001c5e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	212c      	movs	r1, #44	; 0x2c
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	3342      	adds	r3, #66	; 0x42
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c5c:	e073      	b.n	8001d46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	212c      	movs	r1, #44	; 0x2c
 8001c64:	fb01 f303 	mul.w	r3, r1, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	3342      	adds	r3, #66	; 0x42
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	701a      	strb	r2, [r3, #0]
      break;
 8001c70:	e069      	b.n	8001d46 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	212c      	movs	r1, #44	; 0x2c
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3354      	adds	r3, #84	; 0x54
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	212c      	movs	r1, #44	; 0x2c
 8001c8c:	fb01 f303 	mul.w	r3, r1, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	3342      	adds	r3, #66	; 0x42
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
      break;
 8001c98:	e055      	b.n	8001d46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	212c      	movs	r1, #44	; 0x2c
 8001ca0:	fb01 f303 	mul.w	r3, r1, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3342      	adds	r3, #66	; 0x42
 8001ca8:	2202      	movs	r2, #2
 8001caa:	701a      	strb	r2, [r3, #0]
      break;
 8001cac:	e04b      	b.n	8001d46 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001cae:	78bb      	ldrb	r3, [r7, #2]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d11d      	bne.n	8001cf0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3355      	adds	r3, #85	; 0x55
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d109      	bne.n	8001cdc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	212c      	movs	r1, #44	; 0x2c
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3342      	adds	r3, #66	; 0x42
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cda:	e034      	b.n	8001d46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	212c      	movs	r1, #44	; 0x2c
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3342      	adds	r3, #66	; 0x42
 8001cea:	2202      	movs	r2, #2
 8001cec:	701a      	strb	r2, [r3, #0]
      break;
 8001cee:	e02a      	b.n	8001d46 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	212c      	movs	r1, #44	; 0x2c
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3354      	adds	r3, #84	; 0x54
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d109      	bne.n	8001d18 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	212c      	movs	r1, #44	; 0x2c
 8001d0a:	fb01 f303 	mul.w	r3, r1, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	3342      	adds	r3, #66	; 0x42
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
      break;
 8001d16:	e016      	b.n	8001d46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	212c      	movs	r1, #44	; 0x2c
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	3342      	adds	r3, #66	; 0x42
 8001d26:	2202      	movs	r2, #2
 8001d28:	701a      	strb	r2, [r3, #0]
      break;
 8001d2a:	e00c      	b.n	8001d46 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	212c      	movs	r1, #44	; 0x2c
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	3342      	adds	r3, #66	; 0x42
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
      break;
 8001d3e:	e002      	b.n	8001d46 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001d40:	bf00      	nop
 8001d42:	e000      	b.n	8001d46 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001d44:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	212c      	movs	r1, #44	; 0x2c
 8001d4c:	fb01 f303 	mul.w	r3, r1, r3
 8001d50:	4413      	add	r3, r2
 8001d52:	3344      	adds	r3, #68	; 0x44
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	8b3a      	ldrh	r2, [r7, #24]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	202c      	movs	r0, #44	; 0x2c
 8001d60:	fb00 f303 	mul.w	r3, r0, r3
 8001d64:	440b      	add	r3, r1
 8001d66:	334c      	adds	r3, #76	; 0x4c
 8001d68:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	212c      	movs	r1, #44	; 0x2c
 8001d70:	fb01 f303 	mul.w	r3, r1, r3
 8001d74:	4413      	add	r3, r2
 8001d76:	3360      	adds	r3, #96	; 0x60
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	212c      	movs	r1, #44	; 0x2c
 8001d82:	fb01 f303 	mul.w	r3, r1, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	3350      	adds	r3, #80	; 0x50
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	212c      	movs	r1, #44	; 0x2c
 8001d94:	fb01 f303 	mul.w	r3, r1, r3
 8001d98:	4413      	add	r3, r2
 8001d9a:	3339      	adds	r3, #57	; 0x39
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	212c      	movs	r1, #44	; 0x2c
 8001da6:	fb01 f303 	mul.w	r3, r1, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	3361      	adds	r3, #97	; 0x61
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	222c      	movs	r2, #44	; 0x2c
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	3338      	adds	r3, #56	; 0x38
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	18d1      	adds	r1, r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f003 fe0c 	bl	80059e8 <USB_HC_StartXfer>
 8001dd0:	4603      	mov	r3, r0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop

08001ddc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 fb2f 	bl	8005456 <USB_GetMode>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	f040 80f6 	bne.w	8001fec <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 fb13 	bl	8005430 <USB_ReadInterrupts>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80ec 	beq.w	8001fea <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 fb0a 	bl	8005430 <USB_ReadInterrupts>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e26:	d104      	bne.n	8001e32 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f003 fafa 	bl	8005430 <USB_ReadInterrupts>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e46:	d104      	bne.n	8001e52 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 faea 	bl	8005430 <USB_ReadInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e66:	d104      	bne.n	8001e72 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 fada 	bl	8005430 <USB_ReadInterrupts>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d103      	bne.n	8001e8e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 facc 	bl	8005430 <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ea2:	d11c      	bne.n	8001ede <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001eac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10f      	bne.n	8001ede <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ebe:	2110      	movs	r1, #16
 8001ec0:	6938      	ldr	r0, [r7, #16]
 8001ec2:	f003 f9db 	bl	800527c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ec6:	6938      	ldr	r0, [r7, #16]
 8001ec8:	f003 f9fc 	bl	80052c4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 fbb4 	bl	8005640 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f006 f887 	bl	8007fec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 faa4 	bl	8005430 <USB_ReadInterrupts>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef2:	d102      	bne.n	8001efa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f001 fa03 	bl	8003300 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fa96 	bl	8005430 <USB_ReadInterrupts>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d106      	bne.n	8001f1c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f006 f850 	bl	8007fb4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2208      	movs	r2, #8
 8001f1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 fa85 	bl	8005430 <USB_ReadInterrupts>
 8001f26:	4603      	mov	r3, r0
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b10      	cmp	r3, #16
 8001f2e:	d101      	bne.n	8001f34 <HAL_HCD_IRQHandler+0x158>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <HAL_HCD_IRQHandler+0x15a>
 8001f34:	2300      	movs	r3, #0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d012      	beq.n	8001f60 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699a      	ldr	r2, [r3, #24]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0210 	bic.w	r2, r2, #16
 8001f48:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f001 f906 	bl	800315c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0210 	orr.w	r2, r2, #16
 8001f5e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f003 fa63 	bl	8005430 <USB_ReadInterrupts>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f74:	d13a      	bne.n	8001fec <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 fe76 	bl	8005c6c <USB_HC_ReadInterrupt>
 8001f80:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e025      	b.n	8001fd4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d018      	beq.n	8001fce <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb2:	d106      	bne.n	8001fc2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	4619      	mov	r1, r3
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f8ab 	bl	8002116 <HCD_HC_IN_IRQHandler>
 8001fc0:	e005      	b.n	8001fce <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fcc6 	bl	800295a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d3d4      	bcc.n	8001f88 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fe6:	615a      	str	r2, [r3, #20]
 8001fe8:	e000      	b.n	8001fec <HAL_HCD_IRQHandler+0x210>
      return;
 8001fea:	bf00      	nop
    }
  }
}
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_HCD_Start+0x16>
 8002004:	2302      	movs	r3, #2
 8002006:	e013      	b.n	8002030 <HAL_HCD_Start+0x3e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f003 fb76 	bl	8005708 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f003 f8bc 	bl	800519e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_HCD_Stop+0x16>
 800204a:	2302      	movs	r3, #2
 800204c:	e00d      	b.n	800206a <HAL_HCD_Stop+0x32>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f003 ff70 	bl	8005f40 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f003 fb18 	bl	80056b4 <USB_ResetPort>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	460b      	mov	r3, r1
 8002098:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	212c      	movs	r1, #44	; 0x2c
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	3360      	adds	r3, #96	; 0x60
 80020a8:	781b      	ldrb	r3, [r3, #0]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	212c      	movs	r1, #44	; 0x2c
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	3350      	adds	r3, #80	; 0x50
 80020d0:	681b      	ldr	r3, [r3, #0]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fb5c 	bl	80057a8 <USB_GetCurrentFrame>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f003 fb37 	bl	800577a <USB_GetHostSpeed>
 800210c:	4603      	mov	r3, r0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4413      	add	r3, r2
 8002138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b04      	cmp	r3, #4
 8002144:	d119      	bne.n	800217a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4413      	add	r3, r2
 800214e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002152:	461a      	mov	r2, r3
 8002154:	2304      	movs	r3, #4
 8002156:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	0151      	lsls	r1, r2, #5
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	440a      	add	r2, r1
 800216e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002172:	f043 0302 	orr.w	r3, r3, #2
 8002176:	60d3      	str	r3, [r2, #12]
 8002178:	e101      	b.n	800237e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002190:	d12b      	bne.n	80021ea <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219e:	461a      	mov	r2, r3
 80021a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	3361      	adds	r3, #97	; 0x61
 80021b4:	2207      	movs	r2, #7
 80021b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	0151      	lsls	r1, r2, #5
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	440a      	add	r2, r1
 80021ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021d2:	f043 0302 	orr.w	r3, r3, #2
 80021d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 fd53 	bl	8005c8e <USB_HC_Halt>
 80021e8:	e0c9      	b.n	800237e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b20      	cmp	r3, #32
 80021fe:	d109      	bne.n	8002214 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4413      	add	r3, r2
 8002208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220c:	461a      	mov	r2, r3
 800220e:	2320      	movs	r3, #32
 8002210:	6093      	str	r3, [r2, #8]
 8002212:	e0b4      	b.n	800237e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4413      	add	r3, r2
 800221c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b08      	cmp	r3, #8
 8002228:	d133      	bne.n	8002292 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	0151      	lsls	r1, r2, #5
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	440a      	add	r2, r1
 8002240:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	212c      	movs	r1, #44	; 0x2c
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	4413      	add	r3, r2
 8002256:	3361      	adds	r3, #97	; 0x61
 8002258:	2205      	movs	r2, #5
 800225a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002268:	461a      	mov	r2, r3
 800226a:	2310      	movs	r3, #16
 800226c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227a:	461a      	mov	r2, r3
 800227c:	2308      	movs	r3, #8
 800227e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f003 fcff 	bl	8005c8e <USB_HC_Halt>
 8002290:	e075      	b.n	800237e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4413      	add	r3, r2
 800229a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a8:	d134      	bne.n	8002314 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	0151      	lsls	r1, r2, #5
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	440a      	add	r2, r1
 80022c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	212c      	movs	r1, #44	; 0x2c
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	3361      	adds	r3, #97	; 0x61
 80022d8:	2208      	movs	r2, #8
 80022da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e8:	461a      	mov	r2, r3
 80022ea:	2310      	movs	r3, #16
 80022ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	461a      	mov	r2, r3
 80022fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002300:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f003 fcbe 	bl	8005c8e <USB_HC_Halt>
 8002312:	e034      	b.n	800237e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4413      	add	r3, r2
 800231c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002326:	2b80      	cmp	r3, #128	; 0x80
 8002328:	d129      	bne.n	800237e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	0151      	lsls	r1, r2, #5
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	440a      	add	r2, r1
 8002340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3361      	adds	r3, #97	; 0x61
 8002358:	2206      	movs	r2, #6
 800235a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f003 fc91 	bl	8005c8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4413      	add	r3, r2
 8002374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002378:	461a      	mov	r2, r3
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4413      	add	r3, r2
 8002386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002394:	d122      	bne.n	80023dc <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4413      	add	r3, r2
 800239e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	0151      	lsls	r1, r2, #5
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	440a      	add	r2, r1
 80023ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f003 fc64 	bl	8005c8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	461a      	mov	r2, r3
 80023d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80023da:	e2ba      	b.n	8002952 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	f040 811b 	bne.w	800262a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d019      	beq.n	8002430 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	3348      	adds	r3, #72	; 0x48
 800240a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	0159      	lsls	r1, r3, #5
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	440b      	add	r3, r1
 8002414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800241e:	1ad2      	subs	r2, r2, r3
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	202c      	movs	r0, #44	; 0x2c
 8002426:	fb00 f303 	mul.w	r3, r0, r3
 800242a:	440b      	add	r3, r1
 800242c:	3350      	adds	r3, #80	; 0x50
 800242e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	3361      	adds	r3, #97	; 0x61
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	212c      	movs	r1, #44	; 0x2c
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	335c      	adds	r3, #92	; 0x5c
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002460:	461a      	mov	r2, r3
 8002462:	2301      	movs	r3, #1
 8002464:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	212c      	movs	r1, #44	; 0x2c
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	4413      	add	r3, r2
 8002472:	333f      	adds	r3, #63	; 0x3f
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	333f      	adds	r3, #63	; 0x3f
 8002488:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800248a:	2b02      	cmp	r3, #2
 800248c:	d121      	bne.n	80024d2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4413      	add	r3, r2
 8002496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	0151      	lsls	r1, r2, #5
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	440a      	add	r2, r1
 80024a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 fbe8 	bl	8005c8e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	461a      	mov	r2, r3
 80024cc:	2310      	movs	r3, #16
 80024ce:	6093      	str	r3, [r2, #8]
 80024d0:	e066      	b.n	80025a0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	333f      	adds	r3, #63	; 0x3f
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d127      	bne.n	8002536 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	0151      	lsls	r1, r2, #5
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	440a      	add	r2, r1
 80024fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002500:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002504:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	3360      	adds	r3, #96	; 0x60
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	b2d9      	uxtb	r1, r3
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	202c      	movs	r0, #44	; 0x2c
 8002522:	fb00 f303 	mul.w	r3, r0, r3
 8002526:	4413      	add	r3, r2
 8002528:	3360      	adds	r3, #96	; 0x60
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f005 fd6a 	bl	8008008 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002534:	e034      	b.n	80025a0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	212c      	movs	r1, #44	; 0x2c
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	4413      	add	r3, r2
 8002542:	333f      	adds	r3, #63	; 0x3f
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d12a      	bne.n	80025a0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	3360      	adds	r3, #96	; 0x60
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	3354      	adds	r3, #84	; 0x54
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	f083 0301 	eor.w	r3, r3, #1
 8002570:	b2d8      	uxtb	r0, r3
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	3354      	adds	r3, #84	; 0x54
 8002580:	4602      	mov	r2, r0
 8002582:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	b2d9      	uxtb	r1, r3
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	202c      	movs	r0, #44	; 0x2c
 800258e:	fb00 f303 	mul.w	r3, r0, r3
 8002592:	4413      	add	r3, r2
 8002594:	3360      	adds	r3, #96	; 0x60
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f005 fd34 	bl	8008008 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d12b      	bne.n	8002600 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3348      	adds	r3, #72	; 0x48
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	202c      	movs	r0, #44	; 0x2c
 80025be:	fb00 f202 	mul.w	r2, r0, r2
 80025c2:	440a      	add	r2, r1
 80025c4:	3240      	adds	r2, #64	; 0x40
 80025c6:	8812      	ldrh	r2, [r2, #0]
 80025c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 81be 	beq.w	8002952 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	3354      	adds	r3, #84	; 0x54
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	f083 0301 	eor.w	r3, r3, #1
 80025ea:	b2d8      	uxtb	r0, r3
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	212c      	movs	r1, #44	; 0x2c
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	3354      	adds	r3, #84	; 0x54
 80025fa:	4602      	mov	r2, r0
 80025fc:	701a      	strb	r2, [r3, #0]
}
 80025fe:	e1a8      	b.n	8002952 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	212c      	movs	r1, #44	; 0x2c
 8002606:	fb01 f303 	mul.w	r3, r1, r3
 800260a:	4413      	add	r3, r2
 800260c:	3354      	adds	r3, #84	; 0x54
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	f083 0301 	eor.w	r3, r3, #1
 8002614:	b2d8      	uxtb	r0, r3
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3354      	adds	r3, #84	; 0x54
 8002624:	4602      	mov	r2, r0
 8002626:	701a      	strb	r2, [r3, #0]
}
 8002628:	e193      	b.n	8002952 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b02      	cmp	r3, #2
 800263e:	f040 8106 	bne.w	800284e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	0151      	lsls	r1, r2, #5
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	440a      	add	r2, r1
 8002658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800265c:	f023 0302 	bic.w	r3, r3, #2
 8002660:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	212c      	movs	r1, #44	; 0x2c
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	4413      	add	r3, r2
 800266e:	3361      	adds	r3, #97	; 0x61
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d109      	bne.n	800268a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	3360      	adds	r3, #96	; 0x60
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e0c9      	b.n	800281e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	3361      	adds	r3, #97	; 0x61
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b05      	cmp	r3, #5
 800269c:	d109      	bne.n	80026b2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	3360      	adds	r3, #96	; 0x60
 80026ac:	2205      	movs	r2, #5
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	e0b5      	b.n	800281e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	3361      	adds	r3, #97	; 0x61
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	d009      	beq.n	80026da <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	3361      	adds	r3, #97	; 0x61
 80026d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d150      	bne.n	800277c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	335c      	adds	r3, #92	; 0x5c
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	202c      	movs	r0, #44	; 0x2c
 80026f2:	fb00 f303 	mul.w	r3, r0, r3
 80026f6:	440b      	add	r3, r1
 80026f8:	335c      	adds	r3, #92	; 0x5c
 80026fa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	4413      	add	r3, r2
 8002708:	335c      	adds	r3, #92	; 0x5c
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d912      	bls.n	8002736 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	335c      	adds	r3, #92	; 0x5c
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	3360      	adds	r3, #96	; 0x60
 8002730:	2204      	movs	r2, #4
 8002732:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002734:	e073      	b.n	800281e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	3360      	adds	r3, #96	; 0x60
 8002744:	2202      	movs	r2, #2
 8002746:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800275e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002766:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	461a      	mov	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800277a:	e050      	b.n	800281e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	212c      	movs	r1, #44	; 0x2c
 8002782:	fb01 f303 	mul.w	r3, r1, r3
 8002786:	4413      	add	r3, r2
 8002788:	3361      	adds	r3, #97	; 0x61
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d122      	bne.n	80027d6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	212c      	movs	r1, #44	; 0x2c
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	4413      	add	r3, r2
 800279c:	3360      	adds	r3, #96	; 0x60
 800279e:	2202      	movs	r2, #2
 80027a0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027b8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027c0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ce:	461a      	mov	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	e023      	b.n	800281e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	3361      	adds	r3, #97	; 0x61
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b07      	cmp	r3, #7
 80027e8:	d119      	bne.n	800281e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	212c      	movs	r1, #44	; 0x2c
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	335c      	adds	r3, #92	; 0x5c
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	202c      	movs	r0, #44	; 0x2c
 8002802:	fb00 f303 	mul.w	r3, r0, r3
 8002806:	440b      	add	r3, r1
 8002808:	335c      	adds	r3, #92	; 0x5c
 800280a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	212c      	movs	r1, #44	; 0x2c
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	3360      	adds	r3, #96	; 0x60
 800281a:	2204      	movs	r2, #4
 800281c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4413      	add	r3, r2
 8002826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282a:	461a      	mov	r2, r3
 800282c:	2302      	movs	r3, #2
 800282e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	b2d9      	uxtb	r1, r3
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	202c      	movs	r0, #44	; 0x2c
 800283a:	fb00 f303 	mul.w	r3, r0, r3
 800283e:	4413      	add	r3, r2
 8002840:	3360      	adds	r3, #96	; 0x60
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f005 fbde 	bl	8008008 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800284c:	e081      	b.n	8002952 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b10      	cmp	r3, #16
 8002862:	d176      	bne.n	8002952 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	333f      	adds	r3, #63	; 0x3f
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b03      	cmp	r3, #3
 8002876:	d121      	bne.n	80028bc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	335c      	adds	r3, #92	; 0x5c
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	0151      	lsls	r1, r2, #5
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	440a      	add	r2, r1
 80028a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 f9ea 	bl	8005c8e <USB_HC_Halt>
 80028ba:	e041      	b.n	8002940 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	333f      	adds	r3, #63	; 0x3f
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	333f      	adds	r3, #63	; 0x3f
 80028de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d12d      	bne.n	8002940 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	212c      	movs	r1, #44	; 0x2c
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	335c      	adds	r3, #92	; 0x5c
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d120      	bne.n	8002940 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	3361      	adds	r3, #97	; 0x61
 800290c:	2203      	movs	r2, #3
 800290e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	0151      	lsls	r1, r2, #5
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	440a      	add	r2, r1
 8002926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800292a:	f043 0302 	orr.w	r3, r3, #2
 800292e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f003 f9a7 	bl	8005c8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4413      	add	r3, r2
 8002948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294c:	461a      	mov	r2, r3
 800294e:	2310      	movs	r3, #16
 8002950:	6093      	str	r3, [r2, #8]
}
 8002952:	bf00      	nop
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b088      	sub	sp, #32
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b04      	cmp	r3, #4
 8002988:	d119      	bne.n	80029be <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	461a      	mov	r2, r3
 8002998:	2304      	movs	r3, #4
 800299a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	0151      	lsls	r1, r2, #5
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	440a      	add	r2, r1
 80029b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b6:	f043 0302 	orr.w	r3, r3, #2
 80029ba:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80029bc:	e3ca      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	015a      	lsls	r2, r3, #5
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d13e      	bne.n	8002a52 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e0:	461a      	mov	r2, r3
 80029e2:	2320      	movs	r3, #32
 80029e4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	333d      	adds	r3, #61	; 0x3d
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	f040 83ac 	bne.w	8003154 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	333d      	adds	r3, #61	; 0x3d
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3360      	adds	r3, #96	; 0x60
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	0151      	lsls	r1, r2, #5
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	440a      	add	r2, r1
 8002a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a3a:	f043 0302 	orr.w	r3, r3, #2
 8002a3e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f003 f91f 	bl	8005c8e <USB_HC_Halt>
}
 8002a50:	e380      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a68:	d122      	bne.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	0151      	lsls	r1, r2, #5
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	440a      	add	r2, r1
 8002a80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 f8fa 	bl	8005c8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aac:	6093      	str	r3, [r2, #8]
}
 8002aae:	e351      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d150      	bne.n	8002b68 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	335c      	adds	r3, #92	; 0x5c
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d111      	bne.n	8002b12 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	333d      	adds	r3, #61	; 0x3d
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2340      	movs	r3, #64	; 0x40
 8002b10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	0151      	lsls	r1, r2, #5
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	440a      	add	r2, r1
 8002b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f003 f8a6 	bl	8005c8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2301      	movs	r3, #1
 8002b52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3361      	adds	r3, #97	; 0x61
 8002b62:	2201      	movs	r2, #1
 8002b64:	701a      	strb	r2, [r3, #0]
}
 8002b66:	e2f5      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	d13c      	bne.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	3361      	adds	r3, #97	; 0x61
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	333d      	adds	r3, #61	; 0x3d
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	335c      	adds	r3, #92	; 0x5c
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	0151      	lsls	r1, r2, #5
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	440a      	add	r2, r1
 8002bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bce:	f043 0302 	orr.w	r3, r3, #2
 8002bd2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f003 f855 	bl	8005c8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2340      	movs	r3, #64	; 0x40
 8002bf4:	6093      	str	r3, [r2, #8]
}
 8002bf6:	e2ad      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d12a      	bne.n	8002c64 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	0151      	lsls	r1, r2, #5
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	440a      	add	r2, r1
 8002c36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c3a:	f043 0302 	orr.w	r3, r3, #2
 8002c3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 f81f 	bl	8005c8e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3361      	adds	r3, #97	; 0x61
 8002c5e:	2205      	movs	r2, #5
 8002c60:	701a      	strb	r2, [r3, #0]
}
 8002c62:	e277      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	2b10      	cmp	r3, #16
 8002c78:	d150      	bne.n	8002d1c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	212c      	movs	r1, #44	; 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	335c      	adds	r3, #92	; 0x5c
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3361      	adds	r3, #97	; 0x61
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	333d      	adds	r3, #61	; 0x3d
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d112      	bne.n	8002cd8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	333c      	adds	r3, #60	; 0x3c
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	333d      	adds	r3, #61	; 0x3d
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	0151      	lsls	r1, r2, #5
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	440a      	add	r2, r1
 8002cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cf2:	f043 0302 	orr.w	r3, r3, #2
 8002cf6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f002 ffc3 	bl	8005c8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	461a      	mov	r2, r3
 8002d16:	2310      	movs	r3, #16
 8002d18:	6093      	str	r3, [r2, #8]
}
 8002d1a:	e21b      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	2b80      	cmp	r3, #128	; 0x80
 8002d30:	d174      	bne.n	8002e1c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d121      	bne.n	8002d7e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3361      	adds	r3, #97	; 0x61
 8002d48:	2206      	movs	r2, #6
 8002d4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	0151      	lsls	r1, r2, #5
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	440a      	add	r2, r1
 8002d62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d66:	f043 0302 	orr.w	r3, r3, #2
 8002d6a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f002 ff89 	bl	8005c8e <USB_HC_Halt>
 8002d7c:	e044      	b.n	8002e08 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	335c      	adds	r3, #92	; 0x5c
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	202c      	movs	r0, #44	; 0x2c
 8002d96:	fb00 f303 	mul.w	r3, r0, r3
 8002d9a:	440b      	add	r3, r1
 8002d9c:	335c      	adds	r3, #92	; 0x5c
 8002d9e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	335c      	adds	r3, #92	; 0x5c
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d920      	bls.n	8002df6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	335c      	adds	r3, #92	; 0x5c
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3360      	adds	r3, #96	; 0x60
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	b2d9      	uxtb	r1, r3
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	202c      	movs	r0, #44	; 0x2c
 8002de2:	fb00 f303 	mul.w	r3, r0, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3360      	adds	r3, #96	; 0x60
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f005 f90a 	bl	8008008 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002df4:	e008      	b.n	8002e08 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	212c      	movs	r1, #44	; 0x2c
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	3360      	adds	r3, #96	; 0x60
 8002e04:	2202      	movs	r2, #2
 8002e06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	461a      	mov	r2, r3
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	6093      	str	r3, [r2, #8]
}
 8002e1a:	e19b      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e32:	d134      	bne.n	8002e9e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	0151      	lsls	r1, r2, #5
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	440a      	add	r2, r1
 8002e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e4e:	f043 0302 	orr.w	r3, r3, #2
 8002e52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f002 ff15 	bl	8005c8e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e70:	461a      	mov	r2, r3
 8002e72:	2310      	movs	r3, #16
 8002e74:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	461a      	mov	r2, r3
 8002e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	212c      	movs	r1, #44	; 0x2c
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	4413      	add	r3, r2
 8002e96:	3361      	adds	r3, #97	; 0x61
 8002e98:	2208      	movs	r2, #8
 8002e9a:	701a      	strb	r2, [r3, #0]
}
 8002e9c:	e15a      	b.n	8003154 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	f040 814f 	bne.w	8003154 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	0151      	lsls	r1, r2, #5
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	440a      	add	r2, r1
 8002ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed0:	f023 0302 	bic.w	r3, r3, #2
 8002ed4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	212c      	movs	r1, #44	; 0x2c
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3361      	adds	r3, #97	; 0x61
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d17d      	bne.n	8002fe6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	212c      	movs	r1, #44	; 0x2c
 8002ef0:	fb01 f303 	mul.w	r3, r1, r3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3360      	adds	r3, #96	; 0x60
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	333f      	adds	r3, #63	; 0x3f
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d00a      	beq.n	8002f26 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	333f      	adds	r3, #63	; 0x3f
 8002f1e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	f040 8100 	bne.w	8003126 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d113      	bne.n	8002f56 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	3355      	adds	r3, #85	; 0x55
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	f083 0301 	eor.w	r3, r3, #1
 8002f42:	b2d8      	uxtb	r0, r3
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	3355      	adds	r3, #85	; 0x55
 8002f52:	4602      	mov	r2, r0
 8002f54:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	f040 80e3 	bne.w	8003126 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	212c      	movs	r1, #44	; 0x2c
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	334c      	adds	r3, #76	; 0x4c
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80d8 	beq.w	8003126 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	334c      	adds	r3, #76	; 0x4c
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	202c      	movs	r0, #44	; 0x2c
 8002f8c:	fb00 f202 	mul.w	r2, r0, r2
 8002f90:	440a      	add	r2, r1
 8002f92:	3240      	adds	r2, #64	; 0x40
 8002f94:	8812      	ldrh	r2, [r2, #0]
 8002f96:	4413      	add	r3, r2
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	202c      	movs	r0, #44	; 0x2c
 8002fa0:	fb00 f202 	mul.w	r2, r0, r2
 8002fa4:	440a      	add	r2, r1
 8002fa6:	3240      	adds	r2, #64	; 0x40
 8002fa8:	8812      	ldrh	r2, [r2, #0]
 8002faa:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80b5 	beq.w	8003126 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	212c      	movs	r1, #44	; 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3355      	adds	r3, #85	; 0x55
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	f083 0301 	eor.w	r3, r3, #1
 8002fd0:	b2d8      	uxtb	r0, r3
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	212c      	movs	r1, #44	; 0x2c
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	3355      	adds	r3, #85	; 0x55
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	701a      	strb	r2, [r3, #0]
 8002fe4:	e09f      	b.n	8003126 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3361      	adds	r3, #97	; 0x61
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d109      	bne.n	800300e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	3360      	adds	r3, #96	; 0x60
 8003008:	2202      	movs	r2, #2
 800300a:	701a      	strb	r2, [r3, #0]
 800300c:	e08b      	b.n	8003126 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	3361      	adds	r3, #97	; 0x61
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b04      	cmp	r3, #4
 8003020:	d109      	bne.n	8003036 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	212c      	movs	r1, #44	; 0x2c
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	4413      	add	r3, r2
 800302e:	3360      	adds	r3, #96	; 0x60
 8003030:	2202      	movs	r2, #2
 8003032:	701a      	strb	r2, [r3, #0]
 8003034:	e077      	b.n	8003126 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	212c      	movs	r1, #44	; 0x2c
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	4413      	add	r3, r2
 8003042:	3361      	adds	r3, #97	; 0x61
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b05      	cmp	r3, #5
 8003048:	d109      	bne.n	800305e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	212c      	movs	r1, #44	; 0x2c
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	4413      	add	r3, r2
 8003056:	3360      	adds	r3, #96	; 0x60
 8003058:	2205      	movs	r2, #5
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	e063      	b.n	8003126 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	212c      	movs	r1, #44	; 0x2c
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	4413      	add	r3, r2
 800306a:	3361      	adds	r3, #97	; 0x61
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b06      	cmp	r3, #6
 8003070:	d009      	beq.n	8003086 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	3361      	adds	r3, #97	; 0x61
 8003080:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003082:	2b08      	cmp	r3, #8
 8003084:	d14f      	bne.n	8003126 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	335c      	adds	r3, #92	; 0x5c
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	202c      	movs	r0, #44	; 0x2c
 800309e:	fb00 f303 	mul.w	r3, r0, r3
 80030a2:	440b      	add	r3, r1
 80030a4:	335c      	adds	r3, #92	; 0x5c
 80030a6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	335c      	adds	r3, #92	; 0x5c
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d912      	bls.n	80030e2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	212c      	movs	r1, #44	; 0x2c
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	335c      	adds	r3, #92	; 0x5c
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	212c      	movs	r1, #44	; 0x2c
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	4413      	add	r3, r2
 80030da:	3360      	adds	r3, #96	; 0x60
 80030dc:	2204      	movs	r2, #4
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	e021      	b.n	8003126 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	3360      	adds	r3, #96	; 0x60
 80030f0:	2202      	movs	r2, #2
 80030f2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800310a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003112:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	4413      	add	r3, r2
 800311c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003120:	461a      	mov	r2, r3
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	4413      	add	r3, r2
 800312e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003132:	461a      	mov	r2, r3
 8003134:	2302      	movs	r3, #2
 8003136:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	b2d9      	uxtb	r1, r3
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	202c      	movs	r0, #44	; 0x2c
 8003142:	fb00 f303 	mul.w	r3, r0, r3
 8003146:	4413      	add	r3, r2
 8003148:	3360      	adds	r3, #96	; 0x60
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f004 ff5a 	bl	8008008 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003154:	bf00      	nop
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	; 0x28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	0c5b      	lsrs	r3, r3, #17
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003190:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d004      	beq.n	80031a2 <HCD_RXQLVL_IRQHandler+0x46>
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2b05      	cmp	r3, #5
 800319c:	f000 80a9 	beq.w	80032f2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80031a0:	e0aa      	b.n	80032f8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80a6 	beq.w	80032f6 <HCD_RXQLVL_IRQHandler+0x19a>
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	212c      	movs	r1, #44	; 0x2c
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	4413      	add	r3, r2
 80031b6:	3344      	adds	r3, #68	; 0x44
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 809b 	beq.w	80032f6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	3350      	adds	r3, #80	; 0x50
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	441a      	add	r2, r3
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	202c      	movs	r0, #44	; 0x2c
 80031da:	fb00 f303 	mul.w	r3, r0, r3
 80031de:	440b      	add	r3, r1
 80031e0:	334c      	adds	r3, #76	; 0x4c
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d87a      	bhi.n	80032de <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6818      	ldr	r0, [r3, #0]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	212c      	movs	r1, #44	; 0x2c
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	3344      	adds	r3, #68	; 0x44
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	b292      	uxth	r2, r2
 8003200:	4619      	mov	r1, r3
 8003202:	f002 f8bd 	bl	8005380 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	3344      	adds	r3, #68	; 0x44
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	441a      	add	r2, r3
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	202c      	movs	r0, #44	; 0x2c
 8003220:	fb00 f303 	mul.w	r3, r0, r3
 8003224:	440b      	add	r3, r1
 8003226:	3344      	adds	r3, #68	; 0x44
 8003228:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	212c      	movs	r1, #44	; 0x2c
 8003230:	fb01 f303 	mul.w	r3, r1, r3
 8003234:	4413      	add	r3, r2
 8003236:	3350      	adds	r3, #80	; 0x50
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	441a      	add	r2, r3
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	202c      	movs	r0, #44	; 0x2c
 8003244:	fb00 f303 	mul.w	r3, r0, r3
 8003248:	440b      	add	r3, r1
 800324a:	3350      	adds	r3, #80	; 0x50
 800324c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	4413      	add	r3, r2
 8003256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	0cdb      	lsrs	r3, r3, #19
 800325e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003262:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	212c      	movs	r1, #44	; 0x2c
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	4413      	add	r3, r2
 8003270:	3340      	adds	r3, #64	; 0x40
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4293      	cmp	r3, r2
 800327a:	d13c      	bne.n	80032f6 <HCD_RXQLVL_IRQHandler+0x19a>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d039      	beq.n	80032f6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	4413      	add	r3, r2
 800328a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003298:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032a0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ae:	461a      	mov	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	212c      	movs	r1, #44	; 0x2c
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	4413      	add	r3, r2
 80032c0:	3354      	adds	r3, #84	; 0x54
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	f083 0301 	eor.w	r3, r3, #1
 80032c8:	b2d8      	uxtb	r0, r3
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	3354      	adds	r3, #84	; 0x54
 80032d8:	4602      	mov	r2, r0
 80032da:	701a      	strb	r2, [r3, #0]
      break;
 80032dc:	e00b      	b.n	80032f6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	212c      	movs	r1, #44	; 0x2c
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	3360      	adds	r3, #96	; 0x60
 80032ec:	2204      	movs	r2, #4
 80032ee:	701a      	strb	r2, [r3, #0]
      break;
 80032f0:	e001      	b.n	80032f6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80032f2:	bf00      	nop
 80032f4:	e000      	b.n	80032f8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80032f6:	bf00      	nop
  }
}
 80032f8:	bf00      	nop
 80032fa:	3728      	adds	r7, #40	; 0x28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800332c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b02      	cmp	r3, #2
 8003336:	d10b      	bne.n	8003350 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b01      	cmp	r3, #1
 8003340:	d102      	bne.n	8003348 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f004 fe44 	bl	8007fd0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f043 0302 	orr.w	r3, r3, #2
 800334e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b08      	cmp	r3, #8
 8003358:	d132      	bne.n	80033c0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f043 0308 	orr.w	r3, r3, #8
 8003360:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b04      	cmp	r3, #4
 800336a:	d126      	bne.n	80033ba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	2b02      	cmp	r3, #2
 8003372:	d113      	bne.n	800339c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800337a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800337e:	d106      	bne.n	800338e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2102      	movs	r1, #2
 8003386:	4618      	mov	r0, r3
 8003388:	f002 f95a 	bl	8005640 <USB_InitFSLSPClkSel>
 800338c:	e011      	b.n	80033b2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2101      	movs	r1, #1
 8003394:	4618      	mov	r0, r3
 8003396:	f002 f953 	bl	8005640 <USB_InitFSLSPClkSel>
 800339a:	e00a      	b.n	80033b2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d106      	bne.n	80033b2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033aa:	461a      	mov	r2, r3
 80033ac:	f64e 2360 	movw	r3, #60000	; 0xea60
 80033b0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f004 fe36 	bl	8008024 <HAL_HCD_PortEnabled_Callback>
 80033b8:	e002      	b.n	80033c0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f004 fe40 	bl	8008040 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 0320 	and.w	r3, r3, #32
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d103      	bne.n	80033d2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f043 0320 	orr.w	r3, r3, #32
 80033d0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033d8:	461a      	mov	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	6013      	str	r3, [r2, #0]
}
 80033de:	bf00      	nop
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e12b      	b.n	8003652 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fd fcb4 	bl	8000d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2224      	movs	r2, #36	; 0x24
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800343a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800344a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800344c:	f001 f9fc 	bl	8004848 <HAL_RCC_GetPCLK1Freq>
 8003450:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4a81      	ldr	r2, [pc, #516]	; (800365c <HAL_I2C_Init+0x274>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d807      	bhi.n	800346c <HAL_I2C_Init+0x84>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4a80      	ldr	r2, [pc, #512]	; (8003660 <HAL_I2C_Init+0x278>)
 8003460:	4293      	cmp	r3, r2
 8003462:	bf94      	ite	ls
 8003464:	2301      	movls	r3, #1
 8003466:	2300      	movhi	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	e006      	b.n	800347a <HAL_I2C_Init+0x92>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4a7d      	ldr	r2, [pc, #500]	; (8003664 <HAL_I2C_Init+0x27c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	bf94      	ite	ls
 8003474:	2301      	movls	r3, #1
 8003476:	2300      	movhi	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e0e7      	b.n	8003652 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4a78      	ldr	r2, [pc, #480]	; (8003668 <HAL_I2C_Init+0x280>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	0c9b      	lsrs	r3, r3, #18
 800348c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	430a      	orrs	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4a6a      	ldr	r2, [pc, #424]	; (800365c <HAL_I2C_Init+0x274>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d802      	bhi.n	80034bc <HAL_I2C_Init+0xd4>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	3301      	adds	r3, #1
 80034ba:	e009      	b.n	80034d0 <HAL_I2C_Init+0xe8>
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034c2:	fb02 f303 	mul.w	r3, r2, r3
 80034c6:	4a69      	ldr	r2, [pc, #420]	; (800366c <HAL_I2C_Init+0x284>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	099b      	lsrs	r3, r3, #6
 80034ce:	3301      	adds	r3, #1
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	430b      	orrs	r3, r1
 80034d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	495c      	ldr	r1, [pc, #368]	; (800365c <HAL_I2C_Init+0x274>)
 80034ec:	428b      	cmp	r3, r1
 80034ee:	d819      	bhi.n	8003524 <HAL_I2C_Init+0x13c>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1e59      	subs	r1, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80034fe:	1c59      	adds	r1, r3, #1
 8003500:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003504:	400b      	ands	r3, r1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_I2C_Init+0x138>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1e59      	subs	r1, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	fbb1 f3f3 	udiv	r3, r1, r3
 8003518:	3301      	adds	r3, #1
 800351a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351e:	e051      	b.n	80035c4 <HAL_I2C_Init+0x1dc>
 8003520:	2304      	movs	r3, #4
 8003522:	e04f      	b.n	80035c4 <HAL_I2C_Init+0x1dc>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d111      	bne.n	8003550 <HAL_I2C_Init+0x168>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1e58      	subs	r0, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	440b      	add	r3, r1
 800353a:	fbb0 f3f3 	udiv	r3, r0, r3
 800353e:	3301      	adds	r3, #1
 8003540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	e012      	b.n	8003576 <HAL_I2C_Init+0x18e>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1e58      	subs	r0, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	0099      	lsls	r1, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	fbb0 f3f3 	udiv	r3, r0, r3
 8003566:	3301      	adds	r3, #1
 8003568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_I2C_Init+0x196>
 800357a:	2301      	movs	r3, #1
 800357c:	e022      	b.n	80035c4 <HAL_I2C_Init+0x1dc>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10e      	bne.n	80035a4 <HAL_I2C_Init+0x1bc>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1e58      	subs	r0, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	460b      	mov	r3, r1
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	440b      	add	r3, r1
 8003594:	fbb0 f3f3 	udiv	r3, r0, r3
 8003598:	3301      	adds	r3, #1
 800359a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800359e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a2:	e00f      	b.n	80035c4 <HAL_I2C_Init+0x1dc>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1e58      	subs	r0, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6859      	ldr	r1, [r3, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	0099      	lsls	r1, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	6809      	ldr	r1, [r1, #0]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69da      	ldr	r2, [r3, #28]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6911      	ldr	r1, [r2, #16]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68d2      	ldr	r2, [r2, #12]
 80035fe:	4311      	orrs	r1, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	430b      	orrs	r3, r1
 8003606:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	000186a0 	.word	0x000186a0
 8003660:	001e847f 	.word	0x001e847f
 8003664:	003d08ff 	.word	0x003d08ff
 8003668:	431bde83 	.word	0x431bde83
 800366c:	10624dd3 	.word	0x10624dd3

08003670 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b088      	sub	sp, #32
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e128      	b.n	80038d4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a90      	ldr	r2, [pc, #576]	; (80038dc <HAL_I2S_Init+0x26c>)
 800369a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7fd fbb5 	bl	8000e0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2202      	movs	r2, #2
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036b8:	f023 030f 	bic.w	r3, r3, #15
 80036bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2202      	movs	r2, #2
 80036c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d060      	beq.n	8003790 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80036d6:	2310      	movs	r3, #16
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	e001      	b.n	80036e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80036dc:	2320      	movs	r3, #32
 80036de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	d802      	bhi.n	80036ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80036ee:	2001      	movs	r0, #1
 80036f0:	f001 f9a0 	bl	8004a34 <HAL_RCCEx_GetPeriphCLKFreq>
 80036f4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fe:	d125      	bne.n	800374c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d010      	beq.n	800372a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	461a      	mov	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	fbb2 f3f3 	udiv	r3, r2, r3
 8003724:	3305      	adds	r3, #5
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	e01f      	b.n	800376a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	fbb2 f2f3 	udiv	r2, r2, r3
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	461a      	mov	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	fbb2 f3f3 	udiv	r3, r2, r3
 8003746:	3305      	adds	r3, #5
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	e00e      	b.n	800376a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	fbb2 f2f3 	udiv	r2, r2, r3
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	461a      	mov	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	fbb2 f3f3 	udiv	r3, r2, r3
 8003766:	3305      	adds	r3, #5
 8003768:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4a5c      	ldr	r2, [pc, #368]	; (80038e0 <HAL_I2S_Init+0x270>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	08db      	lsrs	r3, r3, #3
 8003774:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	085b      	lsrs	r3, r3, #1
 8003786:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	e003      	b.n	8003798 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003790:	2302      	movs	r3, #2
 8003792:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d902      	bls.n	80037a4 <HAL_I2S_Init+0x134>
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2bff      	cmp	r3, #255	; 0xff
 80037a2:	d907      	bls.n	80037b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a8:	f043 0210 	orr.w	r2, r3, #16
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e08f      	b.n	80038d4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	ea42 0103 	orr.w	r1, r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037d2:	f023 030f 	bic.w	r3, r3, #15
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6851      	ldr	r1, [r2, #4]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6892      	ldr	r2, [r2, #8]
 80037de:	4311      	orrs	r1, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	68d2      	ldr	r2, [r2, #12]
 80037e4:	4311      	orrs	r1, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6992      	ldr	r2, [r2, #24]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d161      	bne.n	80038c4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a38      	ldr	r2, [pc, #224]	; (80038e4 <HAL_I2S_Init+0x274>)
 8003804:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a37      	ldr	r2, [pc, #220]	; (80038e8 <HAL_I2S_Init+0x278>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d101      	bne.n	8003814 <HAL_I2S_Init+0x1a4>
 8003810:	4b36      	ldr	r3, [pc, #216]	; (80038ec <HAL_I2S_Init+0x27c>)
 8003812:	e001      	b.n	8003818 <HAL_I2S_Init+0x1a8>
 8003814:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	4932      	ldr	r1, [pc, #200]	; (80038e8 <HAL_I2S_Init+0x278>)
 8003820:	428a      	cmp	r2, r1
 8003822:	d101      	bne.n	8003828 <HAL_I2S_Init+0x1b8>
 8003824:	4a31      	ldr	r2, [pc, #196]	; (80038ec <HAL_I2S_Init+0x27c>)
 8003826:	e001      	b.n	800382c <HAL_I2S_Init+0x1bc>
 8003828:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800382c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003830:	f023 030f 	bic.w	r3, r3, #15
 8003834:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a2b      	ldr	r2, [pc, #172]	; (80038e8 <HAL_I2S_Init+0x278>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d101      	bne.n	8003844 <HAL_I2S_Init+0x1d4>
 8003840:	4b2a      	ldr	r3, [pc, #168]	; (80038ec <HAL_I2S_Init+0x27c>)
 8003842:	e001      	b.n	8003848 <HAL_I2S_Init+0x1d8>
 8003844:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003848:	2202      	movs	r2, #2
 800384a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a25      	ldr	r2, [pc, #148]	; (80038e8 <HAL_I2S_Init+0x278>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <HAL_I2S_Init+0x1ea>
 8003856:	4b25      	ldr	r3, [pc, #148]	; (80038ec <HAL_I2S_Init+0x27c>)
 8003858:	e001      	b.n	800385e <HAL_I2S_Init+0x1ee>
 800385a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800386a:	d003      	beq.n	8003874 <HAL_I2S_Init+0x204>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d103      	bne.n	800387c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	e001      	b.n	8003880 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800388a:	4313      	orrs	r3, r2
 800388c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003894:	4313      	orrs	r3, r2
 8003896:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800389e:	4313      	orrs	r3, r2
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	897b      	ldrh	r3, [r7, #10]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038ac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <HAL_I2S_Init+0x278>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d101      	bne.n	80038bc <HAL_I2S_Init+0x24c>
 80038b8:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <HAL_I2S_Init+0x27c>)
 80038ba:	e001      	b.n	80038c0 <HAL_I2S_Init+0x250>
 80038bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c0:	897a      	ldrh	r2, [r7, #10]
 80038c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3720      	adds	r7, #32
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	080039e7 	.word	0x080039e7
 80038e0:	cccccccd 	.word	0xcccccccd
 80038e4:	08003afd 	.word	0x08003afd
 80038e8:	40003800 	.word	0x40003800
 80038ec:	40003400 	.word	0x40003400

080038f0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	881a      	ldrh	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	1c9a      	adds	r2, r3, #2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10e      	bne.n	8003980 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003970:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ffb8 	bl	80038f0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	b292      	uxth	r2, r2
 800399c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	1c9a      	adds	r2, r3, #2
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10e      	bne.n	80039de <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ff93 	bl	8003904 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b086      	sub	sp, #24
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d13a      	bne.n	8003a78 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d109      	bne.n	8003a20 <I2S_IRQHandler+0x3a>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a16:	2b40      	cmp	r3, #64	; 0x40
 8003a18:	d102      	bne.n	8003a20 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff ffb4 	bl	8003988 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b40      	cmp	r3, #64	; 0x40
 8003a28:	d126      	bne.n	8003a78 <I2S_IRQHandler+0x92>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d11f      	bne.n	8003a78 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	f043 0202 	orr.w	r2, r3, #2
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff ff50 	bl	8003918 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d136      	bne.n	8003af2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d109      	bne.n	8003aa2 <I2S_IRQHandler+0xbc>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	2b80      	cmp	r3, #128	; 0x80
 8003a9a:	d102      	bne.n	8003aa2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ff45 	bl	800392c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d122      	bne.n	8003af2 <I2S_IRQHandler+0x10c>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d11b      	bne.n	8003af2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ac8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	f043 0204 	orr.w	r2, r3, #4
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ff13 	bl	8003918 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003af2:	bf00      	nop
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4aa2      	ldr	r2, [pc, #648]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d101      	bne.n	8003b1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b16:	4ba2      	ldr	r3, [pc, #648]	; (8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b18:	e001      	b.n	8003b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a9b      	ldr	r2, [pc, #620]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d101      	bne.n	8003b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003b34:	4b9a      	ldr	r3, [pc, #616]	; (8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b36:	e001      	b.n	8003b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003b38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b48:	d004      	beq.n	8003b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f040 8099 	bne.w	8003c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d107      	bne.n	8003b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f925 	bl	8003db8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d107      	bne.n	8003b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f9c8 	bl	8003f18 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d13a      	bne.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d035      	beq.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a7e      	ldr	r2, [pc, #504]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d101      	bne.n	8003baa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ba6:	4b7e      	ldr	r3, [pc, #504]	; (8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ba8:	e001      	b.n	8003bae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003baa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4979      	ldr	r1, [pc, #484]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bb6:	428b      	cmp	r3, r1
 8003bb8:	d101      	bne.n	8003bbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003bba:	4b79      	ldr	r3, [pc, #484]	; (8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bbc:	e001      	b.n	8003bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003bbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bc6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bd6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	f043 0202 	orr.w	r2, r3, #2
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff fe88 	bl	8003918 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	f040 80be 	bne.w	8003d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80b8 	beq.w	8003d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c2e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a59      	ldr	r2, [pc, #356]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d101      	bne.n	8003c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003c3a:	4b59      	ldr	r3, [pc, #356]	; (8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c3c:	e001      	b.n	8003c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003c3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4954      	ldr	r1, [pc, #336]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c4a:	428b      	cmp	r3, r1
 8003c4c:	d101      	bne.n	8003c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003c4e:	4b54      	ldr	r3, [pc, #336]	; (8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c50:	e001      	b.n	8003c56 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003c52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c5a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60bb      	str	r3, [r7, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	f043 0204 	orr.w	r2, r3, #4
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff fe4a 	bl	8003918 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c84:	e084      	b.n	8003d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d107      	bne.n	8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f8be 	bl	8003e1c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d107      	bne.n	8003cba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f8fd 	bl	8003eb4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc0:	2b40      	cmp	r3, #64	; 0x40
 8003cc2:	d12f      	bne.n	8003d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d02a      	beq.n	8003d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cdc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a2e      	ldr	r2, [pc, #184]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d101      	bne.n	8003cec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ce8:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cea:	e001      	b.n	8003cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003cec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4929      	ldr	r1, [pc, #164]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cf8:	428b      	cmp	r3, r1
 8003cfa:	d101      	bne.n	8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003cfc:	4b28      	ldr	r3, [pc, #160]	; (8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cfe:	e001      	b.n	8003d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d08:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f043 0202 	orr.w	r2, r3, #2
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff fdfa 	bl	8003918 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d131      	bne.n	8003d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d02c      	beq.n	8003d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a17      	ldr	r2, [pc, #92]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d101      	bne.n	8003d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003d42:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d44:	e001      	b.n	8003d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003d46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4912      	ldr	r1, [pc, #72]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d52:	428b      	cmp	r3, r1
 8003d54:	d101      	bne.n	8003d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003d56:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d58:	e001      	b.n	8003d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d72:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	f043 0204 	orr.w	r2, r3, #4
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff fdc5 	bl	8003918 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d8e:	e000      	b.n	8003d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d90:	bf00      	nop
}
 8003d92:	bf00      	nop
 8003d94:	3720      	adds	r7, #32
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40003800 	.word	0x40003800
 8003da0:	40003400 	.word	0x40003400

08003da4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	1c99      	adds	r1, r3, #2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6251      	str	r1, [r2, #36]	; 0x24
 8003dca:	881a      	ldrh	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d113      	bne.n	8003e12 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003df8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d106      	bne.n	8003e12 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ffc9 	bl	8003da4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	1c99      	adds	r1, r3, #2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6251      	str	r1, [r2, #36]	; 0x24
 8003e2e:	8819      	ldrh	r1, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <I2SEx_TxISR_I2SExt+0x90>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d101      	bne.n	8003e3e <I2SEx_TxISR_I2SExt+0x22>
 8003e3a:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <I2SEx_TxISR_I2SExt+0x94>)
 8003e3c:	e001      	b.n	8003e42 <I2SEx_TxISR_I2SExt+0x26>
 8003e3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e42:	460a      	mov	r2, r1
 8003e44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d121      	bne.n	8003ea2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a12      	ldr	r2, [pc, #72]	; (8003eac <I2SEx_TxISR_I2SExt+0x90>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d101      	bne.n	8003e6c <I2SEx_TxISR_I2SExt+0x50>
 8003e68:	4b11      	ldr	r3, [pc, #68]	; (8003eb0 <I2SEx_TxISR_I2SExt+0x94>)
 8003e6a:	e001      	b.n	8003e70 <I2SEx_TxISR_I2SExt+0x54>
 8003e6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	490d      	ldr	r1, [pc, #52]	; (8003eac <I2SEx_TxISR_I2SExt+0x90>)
 8003e78:	428b      	cmp	r3, r1
 8003e7a:	d101      	bne.n	8003e80 <I2SEx_TxISR_I2SExt+0x64>
 8003e7c:	4b0c      	ldr	r3, [pc, #48]	; (8003eb0 <I2SEx_TxISR_I2SExt+0x94>)
 8003e7e:	e001      	b.n	8003e84 <I2SEx_TxISR_I2SExt+0x68>
 8003e80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d106      	bne.n	8003ea2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff ff81 	bl	8003da4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40003800 	.word	0x40003800
 8003eb0:	40003400 	.word	0x40003400

08003eb4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68d8      	ldr	r0, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	1c99      	adds	r1, r3, #2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ecc:	b282      	uxth	r2, r0
 8003ece:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d113      	bne.n	8003f10 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ef6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff ff4a 	bl	8003da4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a20      	ldr	r2, [pc, #128]	; (8003fa8 <I2SEx_RxISR_I2SExt+0x90>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d101      	bne.n	8003f2e <I2SEx_RxISR_I2SExt+0x16>
 8003f2a:	4b20      	ldr	r3, [pc, #128]	; (8003fac <I2SEx_RxISR_I2SExt+0x94>)
 8003f2c:	e001      	b.n	8003f32 <I2SEx_RxISR_I2SExt+0x1a>
 8003f2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f32:	68d8      	ldr	r0, [r3, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	1c99      	adds	r1, r3, #2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f3e:	b282      	uxth	r2, r0
 8003f40:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d121      	bne.n	8003f9e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a12      	ldr	r2, [pc, #72]	; (8003fa8 <I2SEx_RxISR_I2SExt+0x90>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d101      	bne.n	8003f68 <I2SEx_RxISR_I2SExt+0x50>
 8003f64:	4b11      	ldr	r3, [pc, #68]	; (8003fac <I2SEx_RxISR_I2SExt+0x94>)
 8003f66:	e001      	b.n	8003f6c <I2SEx_RxISR_I2SExt+0x54>
 8003f68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	490d      	ldr	r1, [pc, #52]	; (8003fa8 <I2SEx_RxISR_I2SExt+0x90>)
 8003f74:	428b      	cmp	r3, r1
 8003f76:	d101      	bne.n	8003f7c <I2SEx_RxISR_I2SExt+0x64>
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <I2SEx_RxISR_I2SExt+0x94>)
 8003f7a:	e001      	b.n	8003f80 <I2SEx_RxISR_I2SExt+0x68>
 8003f7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f84:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d106      	bne.n	8003f9e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff ff03 	bl	8003da4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40003800 	.word	0x40003800
 8003fac:	40003400 	.word	0x40003400

08003fb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e264      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d075      	beq.n	80040ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fce:	4ba3      	ldr	r3, [pc, #652]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d00c      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fda:	4ba0      	ldr	r3, [pc, #640]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d112      	bne.n	800400c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fe6:	4b9d      	ldr	r3, [pc, #628]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ff2:	d10b      	bne.n	800400c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff4:	4b99      	ldr	r3, [pc, #612]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d05b      	beq.n	80040b8 <HAL_RCC_OscConfig+0x108>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d157      	bne.n	80040b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e23f      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004014:	d106      	bne.n	8004024 <HAL_RCC_OscConfig+0x74>
 8004016:	4b91      	ldr	r3, [pc, #580]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a90      	ldr	r2, [pc, #576]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 800401c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	e01d      	b.n	8004060 <HAL_RCC_OscConfig+0xb0>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0x98>
 800402e:	4b8b      	ldr	r3, [pc, #556]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a8a      	ldr	r2, [pc, #552]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8004034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b88      	ldr	r3, [pc, #544]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a87      	ldr	r2, [pc, #540]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e00b      	b.n	8004060 <HAL_RCC_OscConfig+0xb0>
 8004048:	4b84      	ldr	r3, [pc, #528]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a83      	ldr	r2, [pc, #524]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 800404e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b81      	ldr	r3, [pc, #516]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a80      	ldr	r2, [pc, #512]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 800405a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800405e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004068:	f7fd f93e 	bl	80012e8 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004070:	f7fd f93a 	bl	80012e8 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	; 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e204      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	4b76      	ldr	r3, [pc, #472]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0xc0>
 800408e:	e014      	b.n	80040ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004090:	f7fd f92a 	bl	80012e8 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004098:	f7fd f926 	bl	80012e8 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b64      	cmp	r3, #100	; 0x64
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e1f0      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040aa:	4b6c      	ldr	r3, [pc, #432]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0xe8>
 80040b6:	e000      	b.n	80040ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d063      	beq.n	800418e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040c6:	4b65      	ldr	r3, [pc, #404]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d2:	4b62      	ldr	r3, [pc, #392]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d11c      	bne.n	8004118 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040de:	4b5f      	ldr	r3, [pc, #380]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d116      	bne.n	8004118 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ea:	4b5c      	ldr	r3, [pc, #368]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_RCC_OscConfig+0x152>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d001      	beq.n	8004102 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e1c4      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004102:	4b56      	ldr	r3, [pc, #344]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	4952      	ldr	r1, [pc, #328]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004116:	e03a      	b.n	800418e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d020      	beq.n	8004162 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004120:	4b4f      	ldr	r3, [pc, #316]	; (8004260 <HAL_RCC_OscConfig+0x2b0>)
 8004122:	2201      	movs	r2, #1
 8004124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fd f8df 	bl	80012e8 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800412e:	f7fd f8db 	bl	80012e8 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e1a5      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004140:	4b46      	ldr	r3, [pc, #280]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414c:	4b43      	ldr	r3, [pc, #268]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4940      	ldr	r1, [pc, #256]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 800415c:	4313      	orrs	r3, r2
 800415e:	600b      	str	r3, [r1, #0]
 8004160:	e015      	b.n	800418e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004162:	4b3f      	ldr	r3, [pc, #252]	; (8004260 <HAL_RCC_OscConfig+0x2b0>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004168:	f7fd f8be 	bl	80012e8 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004170:	f7fd f8ba 	bl	80012e8 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e184      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004182:	4b36      	ldr	r3, [pc, #216]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d030      	beq.n	80041fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d016      	beq.n	80041d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a2:	4b30      	ldr	r3, [pc, #192]	; (8004264 <HAL_RCC_OscConfig+0x2b4>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a8:	f7fd f89e 	bl	80012e8 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041b0:	f7fd f89a 	bl	80012e8 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e164      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c2:	4b26      	ldr	r3, [pc, #152]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0x200>
 80041ce:	e015      	b.n	80041fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041d0:	4b24      	ldr	r3, [pc, #144]	; (8004264 <HAL_RCC_OscConfig+0x2b4>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d6:	f7fd f887 	bl	80012e8 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041de:	f7fd f883 	bl	80012e8 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e14d      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f0:	4b1a      	ldr	r3, [pc, #104]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 80041f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f0      	bne.n	80041de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 80a0 	beq.w	800434a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800420a:	2300      	movs	r3, #0
 800420c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800420e:	4b13      	ldr	r3, [pc, #76]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10f      	bne.n	800423a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	4b0f      	ldr	r3, [pc, #60]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	4a0e      	ldr	r2, [pc, #56]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 8004224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004228:	6413      	str	r3, [r2, #64]	; 0x40
 800422a:	4b0c      	ldr	r3, [pc, #48]	; (800425c <HAL_RCC_OscConfig+0x2ac>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004236:	2301      	movs	r3, #1
 8004238:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423a:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_RCC_OscConfig+0x2b8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d121      	bne.n	800428a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004246:	4b08      	ldr	r3, [pc, #32]	; (8004268 <HAL_RCC_OscConfig+0x2b8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a07      	ldr	r2, [pc, #28]	; (8004268 <HAL_RCC_OscConfig+0x2b8>)
 800424c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004252:	f7fd f849 	bl	80012e8 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004258:	e011      	b.n	800427e <HAL_RCC_OscConfig+0x2ce>
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800
 8004260:	42470000 	.word	0x42470000
 8004264:	42470e80 	.word	0x42470e80
 8004268:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426c:	f7fd f83c 	bl	80012e8 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e106      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427e:	4b85      	ldr	r3, [pc, #532]	; (8004494 <HAL_RCC_OscConfig+0x4e4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d106      	bne.n	80042a0 <HAL_RCC_OscConfig+0x2f0>
 8004292:	4b81      	ldr	r3, [pc, #516]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004296:	4a80      	ldr	r2, [pc, #512]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6713      	str	r3, [r2, #112]	; 0x70
 800429e:	e01c      	b.n	80042da <HAL_RCC_OscConfig+0x32a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2b05      	cmp	r3, #5
 80042a6:	d10c      	bne.n	80042c2 <HAL_RCC_OscConfig+0x312>
 80042a8:	4b7b      	ldr	r3, [pc, #492]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	4a7a      	ldr	r2, [pc, #488]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042ae:	f043 0304 	orr.w	r3, r3, #4
 80042b2:	6713      	str	r3, [r2, #112]	; 0x70
 80042b4:	4b78      	ldr	r3, [pc, #480]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	4a77      	ldr	r2, [pc, #476]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	6713      	str	r3, [r2, #112]	; 0x70
 80042c0:	e00b      	b.n	80042da <HAL_RCC_OscConfig+0x32a>
 80042c2:	4b75      	ldr	r3, [pc, #468]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c6:	4a74      	ldr	r2, [pc, #464]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	6713      	str	r3, [r2, #112]	; 0x70
 80042ce:	4b72      	ldr	r3, [pc, #456]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	4a71      	ldr	r2, [pc, #452]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80042d4:	f023 0304 	bic.w	r3, r3, #4
 80042d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d015      	beq.n	800430e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e2:	f7fd f801 	bl	80012e8 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e8:	e00a      	b.n	8004300 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ea:	f7fc fffd 	bl	80012e8 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e0c5      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004300:	4b65      	ldr	r3, [pc, #404]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0ee      	beq.n	80042ea <HAL_RCC_OscConfig+0x33a>
 800430c:	e014      	b.n	8004338 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800430e:	f7fc ffeb 	bl	80012e8 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004314:	e00a      	b.n	800432c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004316:	f7fc ffe7 	bl	80012e8 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f241 3288 	movw	r2, #5000	; 0x1388
 8004324:	4293      	cmp	r3, r2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e0af      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432c:	4b5a      	ldr	r3, [pc, #360]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1ee      	bne.n	8004316 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004338:	7dfb      	ldrb	r3, [r7, #23]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d105      	bne.n	800434a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800433e:	4b56      	ldr	r3, [pc, #344]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	4a55      	ldr	r2, [pc, #340]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004348:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 809b 	beq.w	800448a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004354:	4b50      	ldr	r3, [pc, #320]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 030c 	and.w	r3, r3, #12
 800435c:	2b08      	cmp	r3, #8
 800435e:	d05c      	beq.n	800441a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d141      	bne.n	80043ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004368:	4b4c      	ldr	r3, [pc, #304]	; (800449c <HAL_RCC_OscConfig+0x4ec>)
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436e:	f7fc ffbb 	bl	80012e8 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004376:	f7fc ffb7 	bl	80012e8 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e081      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004388:	4b43      	ldr	r3, [pc, #268]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f0      	bne.n	8004376 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69da      	ldr	r2, [r3, #28]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	019b      	lsls	r3, r3, #6
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	3b01      	subs	r3, #1
 80043ae:	041b      	lsls	r3, r3, #16
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	061b      	lsls	r3, r3, #24
 80043b8:	4937      	ldr	r1, [pc, #220]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043be:	4b37      	ldr	r3, [pc, #220]	; (800449c <HAL_RCC_OscConfig+0x4ec>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c4:	f7fc ff90 	bl	80012e8 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043cc:	f7fc ff8c 	bl	80012e8 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e056      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043de:	4b2e      	ldr	r3, [pc, #184]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x41c>
 80043ea:	e04e      	b.n	800448a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ec:	4b2b      	ldr	r3, [pc, #172]	; (800449c <HAL_RCC_OscConfig+0x4ec>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fc ff79 	bl	80012e8 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fc ff75 	bl	80012e8 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e03f      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440c:	4b22      	ldr	r3, [pc, #136]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f0      	bne.n	80043fa <HAL_RCC_OscConfig+0x44a>
 8004418:	e037      	b.n	800448a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e032      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004426:	4b1c      	ldr	r3, [pc, #112]	; (8004498 <HAL_RCC_OscConfig+0x4e8>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d028      	beq.n	8004486 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800443e:	429a      	cmp	r2, r3
 8004440:	d121      	bne.n	8004486 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d11a      	bne.n	8004486 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004456:	4013      	ands	r3, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800445c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800445e:	4293      	cmp	r3, r2
 8004460:	d111      	bne.n	8004486 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	085b      	lsrs	r3, r3, #1
 800446e:	3b01      	subs	r3, #1
 8004470:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d107      	bne.n	8004486 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d001      	beq.n	800448a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40007000 	.word	0x40007000
 8004498:	40023800 	.word	0x40023800
 800449c:	42470060 	.word	0x42470060

080044a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0cc      	b.n	800464e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044b4:	4b68      	ldr	r3, [pc, #416]	; (8004658 <HAL_RCC_ClockConfig+0x1b8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d90c      	bls.n	80044dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c2:	4b65      	ldr	r3, [pc, #404]	; (8004658 <HAL_RCC_ClockConfig+0x1b8>)
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ca:	4b63      	ldr	r3, [pc, #396]	; (8004658 <HAL_RCC_ClockConfig+0x1b8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0b8      	b.n	800464e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d020      	beq.n	800452a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044f4:	4b59      	ldr	r3, [pc, #356]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	4a58      	ldr	r2, [pc, #352]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800450c:	4b53      	ldr	r3, [pc, #332]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4a52      	ldr	r2, [pc, #328]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004516:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004518:	4b50      	ldr	r3, [pc, #320]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	494d      	ldr	r1, [pc, #308]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	4313      	orrs	r3, r2
 8004528:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d044      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d107      	bne.n	800454e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453e:	4b47      	ldr	r3, [pc, #284]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d119      	bne.n	800457e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e07f      	b.n	800464e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d003      	beq.n	800455e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800455a:	2b03      	cmp	r3, #3
 800455c:	d107      	bne.n	800456e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455e:	4b3f      	ldr	r3, [pc, #252]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e06f      	b.n	800464e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456e:	4b3b      	ldr	r3, [pc, #236]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e067      	b.n	800464e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800457e:	4b37      	ldr	r3, [pc, #220]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f023 0203 	bic.w	r2, r3, #3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4934      	ldr	r1, [pc, #208]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	4313      	orrs	r3, r2
 800458e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004590:	f7fc feaa 	bl	80012e8 <HAL_GetTick>
 8004594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004596:	e00a      	b.n	80045ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004598:	f7fc fea6 	bl	80012e8 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e04f      	b.n	800464e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ae:	4b2b      	ldr	r3, [pc, #172]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 020c 	and.w	r2, r3, #12
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	429a      	cmp	r2, r3
 80045be:	d1eb      	bne.n	8004598 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045c0:	4b25      	ldr	r3, [pc, #148]	; (8004658 <HAL_RCC_ClockConfig+0x1b8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d20c      	bcs.n	80045e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ce:	4b22      	ldr	r3, [pc, #136]	; (8004658 <HAL_RCC_ClockConfig+0x1b8>)
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d6:	4b20      	ldr	r3, [pc, #128]	; (8004658 <HAL_RCC_ClockConfig+0x1b8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d001      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e032      	b.n	800464e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f4:	4b19      	ldr	r3, [pc, #100]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	4916      	ldr	r1, [pc, #88]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	4313      	orrs	r3, r2
 8004604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	490e      	ldr	r1, [pc, #56]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	4313      	orrs	r3, r2
 8004624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004626:	f000 f821 	bl	800466c <HAL_RCC_GetSysClockFreq>
 800462a:	4602      	mov	r2, r0
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	490a      	ldr	r1, [pc, #40]	; (8004660 <HAL_RCC_ClockConfig+0x1c0>)
 8004638:	5ccb      	ldrb	r3, [r1, r3]
 800463a:	fa22 f303 	lsr.w	r3, r2, r3
 800463e:	4a09      	ldr	r2, [pc, #36]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 8004640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004642:	4b09      	ldr	r3, [pc, #36]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7fc fe0a 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40023c00 	.word	0x40023c00
 800465c:	40023800 	.word	0x40023800
 8004660:	08008674 	.word	0x08008674
 8004664:	20000004 	.word	0x20000004
 8004668:	20000008 	.word	0x20000008

0800466c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800466c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	607b      	str	r3, [r7, #4]
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	2300      	movs	r3, #0
 800467e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004684:	4b67      	ldr	r3, [pc, #412]	; (8004824 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 030c 	and.w	r3, r3, #12
 800468c:	2b08      	cmp	r3, #8
 800468e:	d00d      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x40>
 8004690:	2b08      	cmp	r3, #8
 8004692:	f200 80bd 	bhi.w	8004810 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_RCC_GetSysClockFreq+0x34>
 800469a:	2b04      	cmp	r3, #4
 800469c:	d003      	beq.n	80046a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800469e:	e0b7      	b.n	8004810 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046a0:	4b61      	ldr	r3, [pc, #388]	; (8004828 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046a2:	60bb      	str	r3, [r7, #8]
       break;
 80046a4:	e0b7      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046a6:	4b61      	ldr	r3, [pc, #388]	; (800482c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80046a8:	60bb      	str	r3, [r7, #8]
      break;
 80046aa:	e0b4      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046ac:	4b5d      	ldr	r3, [pc, #372]	; (8004824 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046b6:	4b5b      	ldr	r3, [pc, #364]	; (8004824 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d04d      	beq.n	800475e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c2:	4b58      	ldr	r3, [pc, #352]	; (8004824 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	099b      	lsrs	r3, r3, #6
 80046c8:	461a      	mov	r2, r3
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	ea02 0800 	and.w	r8, r2, r0
 80046da:	ea03 0901 	and.w	r9, r3, r1
 80046de:	4640      	mov	r0, r8
 80046e0:	4649      	mov	r1, r9
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	014b      	lsls	r3, r1, #5
 80046ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046f0:	0142      	lsls	r2, r0, #5
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	ebb0 0008 	subs.w	r0, r0, r8
 80046fa:	eb61 0109 	sbc.w	r1, r1, r9
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	018b      	lsls	r3, r1, #6
 8004708:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800470c:	0182      	lsls	r2, r0, #6
 800470e:	1a12      	subs	r2, r2, r0
 8004710:	eb63 0301 	sbc.w	r3, r3, r1
 8004714:	f04f 0000 	mov.w	r0, #0
 8004718:	f04f 0100 	mov.w	r1, #0
 800471c:	00d9      	lsls	r1, r3, #3
 800471e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004722:	00d0      	lsls	r0, r2, #3
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	eb12 0208 	adds.w	r2, r2, r8
 800472c:	eb43 0309 	adc.w	r3, r3, r9
 8004730:	f04f 0000 	mov.w	r0, #0
 8004734:	f04f 0100 	mov.w	r1, #0
 8004738:	0259      	lsls	r1, r3, #9
 800473a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800473e:	0250      	lsls	r0, r2, #9
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4610      	mov	r0, r2
 8004746:	4619      	mov	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	461a      	mov	r2, r3
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	f7fb fd3a 	bl	80001c8 <__aeabi_uldivmod>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4613      	mov	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	e04a      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475e:	4b31      	ldr	r3, [pc, #196]	; (8004824 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	099b      	lsrs	r3, r3, #6
 8004764:	461a      	mov	r2, r3
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800476e:	f04f 0100 	mov.w	r1, #0
 8004772:	ea02 0400 	and.w	r4, r2, r0
 8004776:	ea03 0501 	and.w	r5, r3, r1
 800477a:	4620      	mov	r0, r4
 800477c:	4629      	mov	r1, r5
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	014b      	lsls	r3, r1, #5
 8004788:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800478c:	0142      	lsls	r2, r0, #5
 800478e:	4610      	mov	r0, r2
 8004790:	4619      	mov	r1, r3
 8004792:	1b00      	subs	r0, r0, r4
 8004794:	eb61 0105 	sbc.w	r1, r1, r5
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	018b      	lsls	r3, r1, #6
 80047a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047a6:	0182      	lsls	r2, r0, #6
 80047a8:	1a12      	subs	r2, r2, r0
 80047aa:	eb63 0301 	sbc.w	r3, r3, r1
 80047ae:	f04f 0000 	mov.w	r0, #0
 80047b2:	f04f 0100 	mov.w	r1, #0
 80047b6:	00d9      	lsls	r1, r3, #3
 80047b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047bc:	00d0      	lsls	r0, r2, #3
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	1912      	adds	r2, r2, r4
 80047c4:	eb45 0303 	adc.w	r3, r5, r3
 80047c8:	f04f 0000 	mov.w	r0, #0
 80047cc:	f04f 0100 	mov.w	r1, #0
 80047d0:	0299      	lsls	r1, r3, #10
 80047d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047d6:	0290      	lsls	r0, r2, #10
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4610      	mov	r0, r2
 80047de:	4619      	mov	r1, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	461a      	mov	r2, r3
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	f7fb fcee 	bl	80001c8 <__aeabi_uldivmod>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4613      	mov	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047f4:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	0c1b      	lsrs	r3, r3, #16
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	3301      	adds	r3, #1
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	fbb2 f3f3 	udiv	r3, r2, r3
 800480c:	60bb      	str	r3, [r7, #8]
      break;
 800480e:	e002      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004810:	4b05      	ldr	r3, [pc, #20]	; (8004828 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004812:	60bb      	str	r3, [r7, #8]
      break;
 8004814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004816:	68bb      	ldr	r3, [r7, #8]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004822:	bf00      	nop
 8004824:	40023800 	.word	0x40023800
 8004828:	00f42400 	.word	0x00f42400
 800482c:	007a1200 	.word	0x007a1200

08004830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004834:	4b03      	ldr	r3, [pc, #12]	; (8004844 <HAL_RCC_GetHCLKFreq+0x14>)
 8004836:	681b      	ldr	r3, [r3, #0]
}
 8004838:	4618      	mov	r0, r3
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20000004 	.word	0x20000004

08004848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800484c:	f7ff fff0 	bl	8004830 <HAL_RCC_GetHCLKFreq>
 8004850:	4602      	mov	r2, r0
 8004852:	4b05      	ldr	r3, [pc, #20]	; (8004868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	0a9b      	lsrs	r3, r3, #10
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4903      	ldr	r1, [pc, #12]	; (800486c <HAL_RCC_GetPCLK1Freq+0x24>)
 800485e:	5ccb      	ldrb	r3, [r1, r3]
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004864:	4618      	mov	r0, r3
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40023800 	.word	0x40023800
 800486c:	08008684 	.word	0x08008684

08004870 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d105      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004894:	2b00      	cmp	r3, #0
 8004896:	d035      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004898:	4b62      	ldr	r3, [pc, #392]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800489e:	f7fc fd23 	bl	80012e8 <HAL_GetTick>
 80048a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048a4:	e008      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048a6:	f7fc fd1f 	bl	80012e8 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e0b0      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048b8:	4b5b      	ldr	r3, [pc, #364]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f0      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	019a      	lsls	r2, r3, #6
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	071b      	lsls	r3, r3, #28
 80048d0:	4955      	ldr	r1, [pc, #340]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048d8:	4b52      	ldr	r3, [pc, #328]	; (8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80048da:	2201      	movs	r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048de:	f7fc fd03 	bl	80012e8 <HAL_GetTick>
 80048e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048e4:	e008      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048e6:	f7fc fcff 	bl	80012e8 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e090      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048f8:	4b4b      	ldr	r3, [pc, #300]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8083 	beq.w	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	4b44      	ldr	r3, [pc, #272]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	4a43      	ldr	r2, [pc, #268]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800491c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004920:	6413      	str	r3, [r2, #64]	; 0x40
 8004922:	4b41      	ldr	r3, [pc, #260]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800492e:	4b3f      	ldr	r3, [pc, #252]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a3e      	ldr	r2, [pc, #248]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004938:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800493a:	f7fc fcd5 	bl	80012e8 <HAL_GetTick>
 800493e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004940:	e008      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004942:	f7fc fcd1 	bl	80012e8 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e062      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004954:	4b35      	ldr	r3, [pc, #212]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0f0      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004960:	4b31      	ldr	r3, [pc, #196]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004968:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d02f      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	429a      	cmp	r2, r3
 800497c:	d028      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800497e:	4b2a      	ldr	r3, [pc, #168]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004986:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004988:	4b29      	ldr	r3, [pc, #164]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800498a:	2201      	movs	r2, #1
 800498c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800498e:	4b28      	ldr	r3, [pc, #160]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004994:	4a24      	ldr	r2, [pc, #144]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800499a:	4b23      	ldr	r3, [pc, #140]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d114      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80049a6:	f7fc fc9f 	bl	80012e8 <HAL_GetTick>
 80049aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ac:	e00a      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ae:	f7fc fc9b 	bl	80012e8 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049bc:	4293      	cmp	r3, r2
 80049be:	d901      	bls.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e02a      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c4:	4b18      	ldr	r3, [pc, #96]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0ee      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049dc:	d10d      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80049de:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f2:	490d      	ldr	r1, [pc, #52]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	608b      	str	r3, [r1, #8]
 80049f8:	e005      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	4a0a      	ldr	r2, [pc, #40]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a00:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a04:	6093      	str	r3, [r2, #8]
 8004a06:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a12:	4905      	ldr	r1, [pc, #20]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	42470068 	.word	0x42470068
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40007000 	.word	0x40007000
 8004a30:	42470e40 	.word	0x42470e40

08004a34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d13e      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004a52:	4b23      	ldr	r3, [pc, #140]	; (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d12f      	bne.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a68:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a6a:	617b      	str	r3, [r7, #20]
          break;
 8004a6c:	e02f      	b.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a6e:	4b1c      	ldr	r3, [pc, #112]	; (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a7a:	d108      	bne.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a7c:	4b18      	ldr	r3, [pc, #96]	; (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a84:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8a:	613b      	str	r3, [r7, #16]
 8004a8c:	e007      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a8e:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a96:	4a15      	ldr	r2, [pc, #84]	; (8004aec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004a9e:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa4:	099b      	lsrs	r3, r3, #6
 8004aa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	fb02 f303 	mul.w	r3, r2, r3
 8004ab0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab8:	0f1b      	lsrs	r3, r3, #28
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	617b      	str	r3, [r7, #20]
          break;
 8004ac6:	e002      	b.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
          break;
 8004acc:	bf00      	nop
        }
      }
      break;
 8004ace:	bf00      	nop
    }
  }
  return frequency;
 8004ad0:	697b      	ldr	r3, [r7, #20]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	00bb8000 	.word	0x00bb8000
 8004ae8:	007a1200 	.word	0x007a1200
 8004aec:	00f42400 	.word	0x00f42400

08004af0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e07b      	b.n	8004bfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d108      	bne.n	8004b1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b12:	d009      	beq.n	8004b28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	61da      	str	r2, [r3, #28]
 8004b1a:	e005      	b.n	8004b28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc f9e2 	bl	8000f0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bac:	ea42 0103 	orr.w	r1, r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	0c1b      	lsrs	r3, r3, #16
 8004bc6:	f003 0104 	and.w	r1, r3, #4
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f003 0210 	and.w	r2, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004be8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b08c      	sub	sp, #48	; 0x30
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
 8004c0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c10:	2301      	movs	r3, #1
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x26>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e18a      	b.n	8004f3e <HAL_SPI_TransmitReceive+0x33c>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c30:	f7fc fb5a 	bl	80012e8 <HAL_GetTick>
 8004c34:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c46:	887b      	ldrh	r3, [r7, #2]
 8004c48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d00f      	beq.n	8004c72 <HAL_SPI_TransmitReceive+0x70>
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c58:	d107      	bne.n	8004c6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <HAL_SPI_TransmitReceive+0x68>
 8004c62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d003      	beq.n	8004c72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c70:	e15b      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_SPI_TransmitReceive+0x82>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_SPI_TransmitReceive+0x82>
 8004c7e:	887b      	ldrh	r3, [r7, #2]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d103      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c8a:	e14e      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d003      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2205      	movs	r2, #5
 8004c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	887a      	ldrh	r2, [r7, #2]
 8004cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	887a      	ldrh	r2, [r7, #2]
 8004cb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	887a      	ldrh	r2, [r7, #2]
 8004cc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	887a      	ldrh	r2, [r7, #2]
 8004cc8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce0:	2b40      	cmp	r3, #64	; 0x40
 8004ce2:	d007      	beq.n	8004cf4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cfc:	d178      	bne.n	8004df0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_SPI_TransmitReceive+0x10a>
 8004d06:	8b7b      	ldrh	r3, [r7, #26]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d166      	bne.n	8004dda <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	881a      	ldrh	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	1c9a      	adds	r2, r3, #2
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d30:	e053      	b.n	8004dda <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d11b      	bne.n	8004d78 <HAL_SPI_TransmitReceive+0x176>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d016      	beq.n	8004d78 <HAL_SPI_TransmitReceive+0x176>
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d113      	bne.n	8004d78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	881a      	ldrh	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d60:	1c9a      	adds	r2, r3, #2
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d119      	bne.n	8004dba <HAL_SPI_TransmitReceive+0x1b8>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d014      	beq.n	8004dba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	b292      	uxth	r2, r2
 8004d9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	1c9a      	adds	r2, r3, #2
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004db6:	2301      	movs	r3, #1
 8004db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dba:	f7fc fa95 	bl	80012e8 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d807      	bhi.n	8004dda <HAL_SPI_TransmitReceive+0x1d8>
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d003      	beq.n	8004dda <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004dd8:	e0a7      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1a6      	bne.n	8004d32 <HAL_SPI_TransmitReceive+0x130>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1a1      	bne.n	8004d32 <HAL_SPI_TransmitReceive+0x130>
 8004dee:	e07c      	b.n	8004eea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <HAL_SPI_TransmitReceive+0x1fc>
 8004df8:	8b7b      	ldrh	r3, [r7, #26]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d16b      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	330c      	adds	r3, #12
 8004e08:	7812      	ldrb	r2, [r2, #0]
 8004e0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e24:	e057      	b.n	8004ed6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d11c      	bne.n	8004e6e <HAL_SPI_TransmitReceive+0x26c>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d017      	beq.n	8004e6e <HAL_SPI_TransmitReceive+0x26c>
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d114      	bne.n	8004e6e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	7812      	ldrb	r2, [r2, #0]
 8004e50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d119      	bne.n	8004eb0 <HAL_SPI_TransmitReceive+0x2ae>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d014      	beq.n	8004eb0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eac:	2301      	movs	r3, #1
 8004eae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eb0:	f7fc fa1a 	bl	80012e8 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d803      	bhi.n	8004ec8 <HAL_SPI_TransmitReceive+0x2c6>
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec6:	d102      	bne.n	8004ece <HAL_SPI_TransmitReceive+0x2cc>
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d103      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ed4:	e029      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1a2      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x224>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d19d      	bne.n	8004e26 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f8b2 	bl	8005058 <SPI_EndRxTxTransaction>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d006      	beq.n	8004f08 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f06:	e010      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10b      	bne.n	8004f28 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f10:	2300      	movs	r3, #0
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	e000      	b.n	8004f2a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3730      	adds	r7, #48	; 0x30
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f58:	f7fc f9c6 	bl	80012e8 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	1a9b      	subs	r3, r3, r2
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	4413      	add	r3, r2
 8004f66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f68:	f7fc f9be 	bl	80012e8 <HAL_GetTick>
 8004f6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f6e:	4b39      	ldr	r3, [pc, #228]	; (8005054 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	015b      	lsls	r3, r3, #5
 8004f74:	0d1b      	lsrs	r3, r3, #20
 8004f76:	69fa      	ldr	r2, [r7, #28]
 8004f78:	fb02 f303 	mul.w	r3, r2, r3
 8004f7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f7e:	e054      	b.n	800502a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f86:	d050      	beq.n	800502a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f88:	f7fc f9ae 	bl	80012e8 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d902      	bls.n	8004f9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d13d      	bne.n	800501a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fb6:	d111      	bne.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc0:	d004      	beq.n	8004fcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fca:	d107      	bne.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe4:	d10f      	bne.n	8005006 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e017      	b.n	800504a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	3b01      	subs	r3, #1
 8005028:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4013      	ands	r3, r2
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	429a      	cmp	r2, r3
 8005038:	bf0c      	ite	eq
 800503a:	2301      	moveq	r3, #1
 800503c:	2300      	movne	r3, #0
 800503e:	b2db      	uxtb	r3, r3
 8005040:	461a      	mov	r2, r3
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	429a      	cmp	r2, r3
 8005046:	d19b      	bne.n	8004f80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000004 	.word	0x20000004

08005058 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005064:	4b1b      	ldr	r3, [pc, #108]	; (80050d4 <SPI_EndRxTxTransaction+0x7c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1b      	ldr	r2, [pc, #108]	; (80050d8 <SPI_EndRxTxTransaction+0x80>)
 800506a:	fba2 2303 	umull	r2, r3, r2, r3
 800506e:	0d5b      	lsrs	r3, r3, #21
 8005070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005074:	fb02 f303 	mul.w	r3, r2, r3
 8005078:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005082:	d112      	bne.n	80050aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2200      	movs	r2, #0
 800508c:	2180      	movs	r1, #128	; 0x80
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7ff ff5a 	bl	8004f48 <SPI_WaitFlagStateUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	f043 0220 	orr.w	r2, r3, #32
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e00f      	b.n	80050ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c0:	2b80      	cmp	r3, #128	; 0x80
 80050c2:	d0f2      	beq.n	80050aa <SPI_EndRxTxTransaction+0x52>
 80050c4:	e000      	b.n	80050c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80050c6:	bf00      	nop
  }

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000004 	.word	0x20000004
 80050d8:	165e9f81 	.word	0x165e9f81

080050dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050dc:	b084      	sub	sp, #16
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	f107 001c 	add.w	r0, r7, #28
 80050ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d122      	bne.n	800513a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800511c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511e:	2b01      	cmp	r3, #1
 8005120:	d105      	bne.n	800512e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f9a0 	bl	8005474 <USB_CoreReset>
 8005134:	4603      	mov	r3, r0
 8005136:	73fb      	strb	r3, [r7, #15]
 8005138:	e01a      	b.n	8005170 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f994 	bl	8005474 <USB_CoreReset>
 800514c:	4603      	mov	r3, r0
 800514e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
 8005162:	e005      	b.n	8005170 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	2b01      	cmp	r3, #1
 8005174:	d10b      	bne.n	800518e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f043 0206 	orr.w	r2, r3, #6
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f043 0220 	orr.w	r2, r3, #32
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800518e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800519a:	b004      	add	sp, #16
 800519c:	4770      	bx	lr

0800519e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f043 0201 	orr.w	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f023 0201 	bic.w	r2, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	460b      	mov	r3, r1
 80051ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051fe:	78fb      	ldrb	r3, [r7, #3]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d115      	bne.n	8005230 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005210:	2001      	movs	r0, #1
 8005212:	f7fc f875 	bl	8001300 <HAL_Delay>
      ms++;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3301      	adds	r3, #1
 800521a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f91a 	bl	8005456 <USB_GetMode>
 8005222:	4603      	mov	r3, r0
 8005224:	2b01      	cmp	r3, #1
 8005226:	d01e      	beq.n	8005266 <USB_SetCurrentMode+0x84>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b31      	cmp	r3, #49	; 0x31
 800522c:	d9f0      	bls.n	8005210 <USB_SetCurrentMode+0x2e>
 800522e:	e01a      	b.n	8005266 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d115      	bne.n	8005262 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005242:	2001      	movs	r0, #1
 8005244:	f7fc f85c 	bl	8001300 <HAL_Delay>
      ms++;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	3301      	adds	r3, #1
 800524c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f901 	bl	8005456 <USB_GetMode>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <USB_SetCurrentMode+0x84>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b31      	cmp	r3, #49	; 0x31
 800525e:	d9f0      	bls.n	8005242 <USB_SetCurrentMode+0x60>
 8005260:	e001      	b.n	8005266 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e005      	b.n	8005272 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b32      	cmp	r3, #50	; 0x32
 800526a:	d101      	bne.n	8005270 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	019b      	lsls	r3, r3, #6
 800528e:	f043 0220 	orr.w	r2, r3, #32
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3301      	adds	r3, #1
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	4a08      	ldr	r2, [pc, #32]	; (80052c0 <USB_FlushTxFifo+0x44>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d901      	bls.n	80052a6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e006      	b.n	80052b4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d0f1      	beq.n	8005296 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	00030d40 	.word	0x00030d40

080052c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2210      	movs	r2, #16
 80052d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	4a08      	ldr	r2, [pc, #32]	; (8005300 <USB_FlushRxFifo+0x3c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d901      	bls.n	80052e6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e006      	b.n	80052f4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0310 	and.w	r3, r3, #16
 80052ee:	2b10      	cmp	r3, #16
 80052f0:	d0f1      	beq.n	80052d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	00030d40 	.word	0x00030d40

08005304 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005304:	b480      	push	{r7}
 8005306:	b089      	sub	sp, #36	; 0x24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	4611      	mov	r1, r2
 8005310:	461a      	mov	r2, r3
 8005312:	460b      	mov	r3, r1
 8005314:	71fb      	strb	r3, [r7, #7]
 8005316:	4613      	mov	r3, r2
 8005318:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005322:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d123      	bne.n	8005372 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800532a:	88bb      	ldrh	r3, [r7, #4]
 800532c:	3303      	adds	r3, #3
 800532e:	089b      	lsrs	r3, r3, #2
 8005330:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005332:	2300      	movs	r3, #0
 8005334:	61bb      	str	r3, [r7, #24]
 8005336:	e018      	b.n	800536a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005338:	79fb      	ldrb	r3, [r7, #7]
 800533a:	031a      	lsls	r2, r3, #12
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	4413      	add	r3, r2
 8005340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005344:	461a      	mov	r2, r3
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	3301      	adds	r3, #1
 8005350:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	3301      	adds	r3, #1
 8005356:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	3301      	adds	r3, #1
 800535c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	3301      	adds	r3, #1
 8005362:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	3301      	adds	r3, #1
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	429a      	cmp	r2, r3
 8005370:	d3e2      	bcc.n	8005338 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3724      	adds	r7, #36	; 0x24
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005380:	b480      	push	{r7}
 8005382:	b08b      	sub	sp, #44	; 0x2c
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	089b      	lsrs	r3, r3, #2
 800539a:	b29b      	uxth	r3, r3
 800539c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80053a6:	2300      	movs	r3, #0
 80053a8:	623b      	str	r3, [r7, #32]
 80053aa:	e014      	b.n	80053d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	3301      	adds	r3, #1
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	3301      	adds	r3, #1
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	3301      	adds	r3, #1
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	3301      	adds	r3, #1
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	3301      	adds	r3, #1
 80053d4:	623b      	str	r3, [r7, #32]
 80053d6:	6a3a      	ldr	r2, [r7, #32]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d3e6      	bcc.n	80053ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80053de:	8bfb      	ldrh	r3, [r7, #30]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01e      	beq.n	8005422 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ee:	461a      	mov	r2, r3
 80053f0:	f107 0310 	add.w	r3, r7, #16
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
 8005404:	b2da      	uxtb	r2, r3
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	701a      	strb	r2, [r3, #0]
      i++;
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	3301      	adds	r3, #1
 800540e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	3301      	adds	r3, #1
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005416:	8bfb      	ldrh	r3, [r7, #30]
 8005418:	3b01      	subs	r3, #1
 800541a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800541c:	8bfb      	ldrh	r3, [r7, #30]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1ea      	bne.n	80053f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005424:	4618      	mov	r0, r3
 8005426:	372c      	adds	r7, #44	; 0x2c
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4013      	ands	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005448:	68fb      	ldr	r3, [r7, #12]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0301 	and.w	r3, r3, #1
}
 8005466:	4618      	mov	r0, r3
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3301      	adds	r3, #1
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	4a13      	ldr	r2, [pc, #76]	; (80054d4 <USB_CoreReset+0x60>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d901      	bls.n	8005490 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e01a      	b.n	80054c6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	daf3      	bge.n	8005480 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f043 0201 	orr.w	r2, r3, #1
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3301      	adds	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	4a09      	ldr	r2, [pc, #36]	; (80054d4 <USB_CoreReset+0x60>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d901      	bls.n	80054b8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e006      	b.n	80054c6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d0f1      	beq.n	80054a8 <USB_CoreReset+0x34>

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	00030d40 	.word	0x00030d40

080054d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054d8:	b084      	sub	sp, #16
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	f107 001c 	add.w	r0, r7, #28
 80054e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054f4:	461a      	mov	r2, r3
 80054f6:	2300      	movs	r3, #0
 80054f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005526:	2b00      	cmp	r3, #0
 8005528:	d018      	beq.n	800555c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	2b01      	cmp	r3, #1
 800552e:	d10a      	bne.n	8005546 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800553e:	f043 0304 	orr.w	r3, r3, #4
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	e014      	b.n	8005570 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005554:	f023 0304 	bic.w	r3, r3, #4
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	e009      	b.n	8005570 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800556a:	f023 0304 	bic.w	r3, r3, #4
 800556e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005570:	2110      	movs	r1, #16
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff fe82 	bl	800527c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff fea3 	bl	80052c4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	e015      	b.n	80055b0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4413      	add	r3, r2
 800558c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005590:	461a      	mov	r2, r3
 8005592:	f04f 33ff 	mov.w	r3, #4294967295
 8005596:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a4:	461a      	mov	r2, r3
 80055a6:	2300      	movs	r3, #0
 80055a8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3301      	adds	r3, #1
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d3e5      	bcc.n	8005584 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f04f 32ff 	mov.w	r2, #4294967295
 80055c4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a13      	ldr	r2, [pc, #76]	; (800562c <USB_HostInit+0x154>)
 80055de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a13      	ldr	r2, [pc, #76]	; (8005630 <USB_HostInit+0x158>)
 80055e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80055e8:	e009      	b.n	80055fe <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2280      	movs	r2, #128	; 0x80
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a10      	ldr	r2, [pc, #64]	; (8005634 <USB_HostInit+0x15c>)
 80055f4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a0f      	ldr	r2, [pc, #60]	; (8005638 <USB_HostInit+0x160>)
 80055fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	2b00      	cmp	r3, #0
 8005602:	d105      	bne.n	8005610 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f043 0210 	orr.w	r2, r3, #16
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699a      	ldr	r2, [r3, #24]
 8005614:	4b09      	ldr	r3, [pc, #36]	; (800563c <USB_HostInit+0x164>)
 8005616:	4313      	orrs	r3, r2
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005628:	b004      	add	sp, #16
 800562a:	4770      	bx	lr
 800562c:	01000200 	.word	0x01000200
 8005630:	00e00300 	.word	0x00e00300
 8005634:	00600080 	.word	0x00600080
 8005638:	004000e0 	.word	0x004000e0
 800563c:	a3200008 	.word	0xa3200008

08005640 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800565e:	f023 0303 	bic.w	r3, r3, #3
 8005662:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	68f9      	ldr	r1, [r7, #12]
 8005674:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005678:	4313      	orrs	r3, r2
 800567a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d107      	bne.n	8005692 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005688:	461a      	mov	r2, r3
 800568a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800568e:	6053      	str	r3, [r2, #4]
 8005690:	e009      	b.n	80056a6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	2b02      	cmp	r3, #2
 8005696:	d106      	bne.n	80056a6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800569e:	461a      	mov	r2, r3
 80056a0:	f241 7370 	movw	r3, #6000	; 0x1770
 80056a4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80056d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80056e4:	2064      	movs	r0, #100	; 0x64
 80056e6:	f7fb fe0b 	bl	8001300 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80056f8:	200a      	movs	r0, #10
 80056fa:	f7fb fe01 	bl	8001300 <HAL_Delay>

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800572c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d109      	bne.n	800574c <USB_DriveVbus+0x44>
 8005738:	78fb      	ldrb	r3, [r7, #3]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d106      	bne.n	800574c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005746:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800574a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005756:	d109      	bne.n	800576c <USB_DriveVbus+0x64>
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005766:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800576a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800577a:	b480      	push	{r7}
 800577c:	b085      	sub	sp, #20
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	0c5b      	lsrs	r3, r3, #17
 8005798:	f003 0303 	and.w	r3, r3, #3
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	b29b      	uxth	r3, r3
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b088      	sub	sp, #32
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	4608      	mov	r0, r1
 80057d6:	4611      	mov	r1, r2
 80057d8:	461a      	mov	r2, r3
 80057da:	4603      	mov	r3, r0
 80057dc:	70fb      	strb	r3, [r7, #3]
 80057de:	460b      	mov	r3, r1
 80057e0:	70bb      	strb	r3, [r7, #2]
 80057e2:	4613      	mov	r3, r2
 80057e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057fa:	461a      	mov	r2, r3
 80057fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005800:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005802:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005806:	2b03      	cmp	r3, #3
 8005808:	d87e      	bhi.n	8005908 <USB_HC_Init+0x13c>
 800580a:	a201      	add	r2, pc, #4	; (adr r2, 8005810 <USB_HC_Init+0x44>)
 800580c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005810:	08005821 	.word	0x08005821
 8005814:	080058cb 	.word	0x080058cb
 8005818:	08005821 	.word	0x08005821
 800581c:	0800588d 	.word	0x0800588d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	4413      	add	r3, r2
 8005828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582c:	461a      	mov	r2, r3
 800582e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005832:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005834:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005838:	2b00      	cmp	r3, #0
 800583a:	da10      	bge.n	800585e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4413      	add	r3, r2
 8005844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	78fa      	ldrb	r2, [r7, #3]
 800584c:	0151      	lsls	r1, r2, #5
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	440a      	add	r2, r1
 8005852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800585c:	e057      	b.n	800590e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005866:	2b00      	cmp	r3, #0
 8005868:	d051      	beq.n	800590e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	4413      	add	r3, r2
 8005872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	78fa      	ldrb	r2, [r7, #3]
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	440a      	add	r2, r1
 8005880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005884:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005888:	60d3      	str	r3, [r2, #12]
      break;
 800588a:	e040      	b.n	800590e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4413      	add	r3, r2
 8005894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005898:	461a      	mov	r2, r3
 800589a:	f240 639d 	movw	r3, #1693	; 0x69d
 800589e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80058a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	da34      	bge.n	8005912 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	78fa      	ldrb	r2, [r7, #3]
 80058b8:	0151      	lsls	r1, r2, #5
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	440a      	add	r2, r1
 80058be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80058c8:	e023      	b.n	8005912 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80058ca:	78fb      	ldrb	r3, [r7, #3]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d6:	461a      	mov	r2, r3
 80058d8:	f240 2325 	movw	r3, #549	; 0x225
 80058dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80058de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	da17      	bge.n	8005916 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	78fa      	ldrb	r2, [r7, #3]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005900:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005904:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005906:	e006      	b.n	8005916 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	77fb      	strb	r3, [r7, #31]
      break;
 800590c:	e004      	b.n	8005918 <USB_HC_Init+0x14c>
      break;
 800590e:	bf00      	nop
 8005910:	e002      	b.n	8005918 <USB_HC_Init+0x14c>
      break;
 8005912:	bf00      	nop
 8005914:	e000      	b.n	8005918 <USB_HC_Init+0x14c>
      break;
 8005916:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800591e:	699a      	ldr	r2, [r3, #24]
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	2101      	movs	r1, #1
 8005928:	fa01 f303 	lsl.w	r3, r1, r3
 800592c:	6939      	ldr	r1, [r7, #16]
 800592e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005932:	4313      	orrs	r3, r2
 8005934:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005942:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005946:	2b00      	cmp	r3, #0
 8005948:	da03      	bge.n	8005952 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800594a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800594e:	61bb      	str	r3, [r7, #24]
 8005950:	e001      	b.n	8005956 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7ff ff0f 	bl	800577a <USB_GetHostSpeed>
 800595c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800595e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005962:	2b02      	cmp	r3, #2
 8005964:	d106      	bne.n	8005974 <USB_HC_Init+0x1a8>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d003      	beq.n	8005974 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800596c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	e001      	b.n	8005978 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005978:	787b      	ldrb	r3, [r7, #1]
 800597a:	059b      	lsls	r3, r3, #22
 800597c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005980:	78bb      	ldrb	r3, [r7, #2]
 8005982:	02db      	lsls	r3, r3, #11
 8005984:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005988:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800598a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800598e:	049b      	lsls	r3, r3, #18
 8005990:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005994:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005996:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005998:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800599c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	0159      	lsls	r1, r3, #5
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	440b      	add	r3, r1
 80059aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ae:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059b4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80059b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d10f      	bne.n	80059de <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	78fa      	ldrb	r2, [r7, #3]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059dc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80059de:	7ffb      	ldrb	r3, [r7, #31]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3720      	adds	r7, #32
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08c      	sub	sp, #48	; 0x30
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	4613      	mov	r3, r2
 80059f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	785b      	ldrb	r3, [r3, #1]
 80059fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a04:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d02d      	beq.n	8005a6e <USB_HC_StartXfer+0x86>
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	791b      	ldrb	r3, [r3, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d129      	bne.n	8005a6e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005a1a:	79fb      	ldrb	r3, [r7, #7]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d117      	bne.n	8005a50 <USB_HC_StartXfer+0x68>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	79db      	ldrb	r3, [r3, #7]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <USB_HC_StartXfer+0x48>
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	79db      	ldrb	r3, [r3, #7]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d10f      	bne.n	8005a50 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	6a3a      	ldr	r2, [r7, #32]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005a50:	79fb      	ldrb	r3, [r7, #7]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <USB_HC_StartXfer+0x86>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	795b      	ldrb	r3, [r3, #5]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d107      	bne.n	8005a6e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	785b      	ldrb	r3, [r3, #1]
 8005a62:	4619      	mov	r1, r3
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 fa2f 	bl	8005ec8 <USB_DoPing>
      return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	e0f8      	b.n	8005c60 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d018      	beq.n	8005aa8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	8912      	ldrh	r2, [r2, #8]
 8005a7e:	4413      	add	r3, r2
 8005a80:	3b01      	subs	r3, #1
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	8912      	ldrh	r2, [r2, #8]
 8005a86:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a8a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005a8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a8e:	8b7b      	ldrh	r3, [r7, #26]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d90b      	bls.n	8005aac <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005a94:	8b7b      	ldrh	r3, [r7, #26]
 8005a96:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	8912      	ldrh	r2, [r2, #8]
 8005a9e:	fb02 f203 	mul.w	r2, r2, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	611a      	str	r2, [r3, #16]
 8005aa6:	e001      	b.n	8005aac <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	78db      	ldrb	r3, [r3, #3]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d007      	beq.n	8005ac4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ab4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	8912      	ldrh	r2, [r2, #8]
 8005aba:	fb02 f203 	mul.w	r2, r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	611a      	str	r2, [r3, #16]
 8005ac2:	e003      	b.n	8005acc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	695a      	ldr	r2, [r3, #20]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ad4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ad6:	04d9      	lsls	r1, r3, #19
 8005ad8:	4b63      	ldr	r3, [pc, #396]	; (8005c68 <USB_HC_StartXfer+0x280>)
 8005ada:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005adc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	7a9b      	ldrb	r3, [r3, #10]
 8005ae2:	075b      	lsls	r3, r3, #29
 8005ae4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ae8:	69f9      	ldr	r1, [r7, #28]
 8005aea:	0148      	lsls	r0, r1, #5
 8005aec:	6a39      	ldr	r1, [r7, #32]
 8005aee:	4401      	add	r1, r0
 8005af0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005af4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005af6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	68d9      	ldr	r1, [r3, #12]
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0e:	460a      	mov	r2, r1
 8005b10:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bf0c      	ite	eq
 8005b22:	2301      	moveq	r3, #1
 8005b24:	2300      	movne	r3, #0
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69fa      	ldr	r2, [r7, #28]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	6a3a      	ldr	r2, [r7, #32]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b44:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b48:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	7e7b      	ldrb	r3, [r7, #25]
 8005b5a:	075b      	lsls	r3, r3, #29
 8005b5c:	69f9      	ldr	r1, [r7, #28]
 8005b5e:	0148      	lsls	r0, r1, #5
 8005b60:	6a39      	ldr	r1, [r7, #32]
 8005b62:	4401      	add	r1, r0
 8005b64:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b82:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	78db      	ldrb	r3, [r3, #3]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d004      	beq.n	8005b96 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	e003      	b.n	8005b9e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b9c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ba4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005bb8:	79fb      	ldrb	r3, [r7, #7]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e04e      	b.n	8005c60 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	78db      	ldrb	r3, [r3, #3]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d149      	bne.n	8005c5e <USB_HC_StartXfer+0x276>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d045      	beq.n	8005c5e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	79db      	ldrb	r3, [r3, #7]
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d830      	bhi.n	8005c3c <USB_HC_StartXfer+0x254>
 8005bda:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <USB_HC_StartXfer+0x1f8>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005bf1 	.word	0x08005bf1
 8005be4:	08005c15 	.word	0x08005c15
 8005be8:	08005bf1 	.word	0x08005bf1
 8005bec:	08005c15 	.word	0x08005c15
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	3303      	adds	r3, #3
 8005bf6:	089b      	lsrs	r3, r3, #2
 8005bf8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005bfa:	8afa      	ldrh	r2, [r7, #22]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d91c      	bls.n	8005c40 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f043 0220 	orr.w	r2, r3, #32
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c12:	e015      	b.n	8005c40 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	3303      	adds	r3, #3
 8005c1a:	089b      	lsrs	r3, r3, #2
 8005c1c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005c1e:	8afa      	ldrh	r2, [r7, #22]
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d90a      	bls.n	8005c44 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c3a:	e003      	b.n	8005c44 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005c3c:	bf00      	nop
 8005c3e:	e002      	b.n	8005c46 <USB_HC_StartXfer+0x25e>
        break;
 8005c40:	bf00      	nop
 8005c42:	e000      	b.n	8005c46 <USB_HC_StartXfer+0x25e>
        break;
 8005c44:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	68d9      	ldr	r1, [r3, #12]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	785a      	ldrb	r2, [r3, #1]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2000      	movs	r0, #0
 8005c56:	9000      	str	r0, [sp, #0]
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f7ff fb53 	bl	8005304 <USB_WritePacket>
  }

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3728      	adds	r7, #40	; 0x28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	1ff80000 	.word	0x1ff80000

08005c6c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	b29b      	uxth	r3, r3
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b089      	sub	sp, #36	; 0x24
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	460b      	mov	r3, r1
 8005c98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	0c9b      	lsrs	r3, r3, #18
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	0fdb      	lsrs	r3, r3, #31
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	d104      	bne.n	8005ce8 <USB_HC_Halt+0x5a>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e0e8      	b.n	8005eba <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d002      	beq.n	8005cf4 <USB_HC_Halt+0x66>
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d173      	bne.n	8005ddc <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d12:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f040 80cb 	bne.w	8005eb8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d143      	bne.n	8005db6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	0151      	lsls	r1, r2, #5
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	440a      	add	r2, r1
 8005d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d4c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d6c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d8c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	3301      	adds	r3, #1
 8005d92:	61fb      	str	r3, [r7, #28]
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d9a:	d81d      	bhi.n	8005dd8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005db2:	d0ec      	beq.n	8005d8e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005db4:	e080      	b.n	8005eb8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dd4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dd6:	e06f      	b.n	8005eb8 <USB_HC_Halt+0x22a>
            break;
 8005dd8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dda:	e06d      	b.n	8005eb8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dfa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d143      	bne.n	8005e94 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e4a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	0151      	lsls	r1, r2, #5
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	440a      	add	r2, r1
 8005e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e6a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	61fb      	str	r3, [r7, #28]
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e78:	d81d      	bhi.n	8005eb6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e90:	d0ec      	beq.n	8005e6c <USB_HC_Halt+0x1de>
 8005e92:	e011      	b.n	8005eb8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	0151      	lsls	r1, r2, #5
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	440a      	add	r2, r1
 8005eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	e000      	b.n	8005eb8 <USB_HC_Halt+0x22a>
          break;
 8005eb6:	bf00      	nop
    }
  }

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3724      	adds	r7, #36	; 0x24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
	...

08005ec8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005ed8:	78fb      	ldrb	r3, [r7, #3]
 8005eda:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005edc:	2301      	movs	r3, #1
 8005ede:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	04da      	lsls	r2, r3, #19
 8005ee4:	4b15      	ldr	r3, [pc, #84]	; (8005f3c <USB_DoPing+0x74>)
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	0151      	lsls	r1, r2, #5
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	440a      	add	r2, r1
 8005ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ef8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f10:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f18:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f26:	461a      	mov	r2, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	1ff80000 	.word	0x1ff80000

08005f40 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff f935 	bl	80051c0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005f56:	2110      	movs	r1, #16
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff f98f 	bl	800527c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff f9b0 	bl	80052c4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005f64:	2300      	movs	r3, #0
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	e01f      	b.n	8005faa <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f80:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f88:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f90:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	613b      	str	r3, [r7, #16]
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2b0f      	cmp	r3, #15
 8005fae:	d9dc      	bls.n	8005f6a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	e034      	b.n	8006020 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fcc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fd4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fdc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fea:	461a      	mov	r2, r3
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ffc:	d80c      	bhi.n	8006018 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006014:	d0ec      	beq.n	8005ff0 <USB_StopHost+0xb0>
 8006016:	e000      	b.n	800601a <USB_StopHost+0xda>
        break;
 8006018:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	3301      	adds	r3, #1
 800601e:	613b      	str	r3, [r7, #16]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	2b0f      	cmp	r3, #15
 8006024:	d9c7      	bls.n	8005fb6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800602c:	461a      	mov	r2, r3
 800602e:	f04f 33ff 	mov.w	r3, #4294967295
 8006032:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f04f 32ff 	mov.w	r2, #4294967295
 800603a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7ff f8ae 	bl	800519e <USB_EnableGlobalInt>

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800604c:	b590      	push	{r4, r7, lr}
 800604e:	b089      	sub	sp, #36	; 0x24
 8006050:	af04      	add	r7, sp, #16
 8006052:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006054:	2301      	movs	r3, #1
 8006056:	2202      	movs	r2, #2
 8006058:	2102      	movs	r1, #2
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fc66 	bl	800692c <USBH_FindInterface>
 8006060:	4603      	mov	r3, r0
 8006062:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	2bff      	cmp	r3, #255	; 0xff
 8006068:	d002      	beq.n	8006070 <USBH_CDC_InterfaceInit+0x24>
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d901      	bls.n	8006074 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006070:	2302      	movs	r3, #2
 8006072:	e13d      	b.n	80062f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006074:	7bfb      	ldrb	r3, [r7, #15]
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fc3b 	bl	80068f4 <USBH_SelectInterface>
 800607e:	4603      	mov	r3, r0
 8006080:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006082:	7bbb      	ldrb	r3, [r7, #14]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006088:	2302      	movs	r3, #2
 800608a:	e131      	b.n	80062f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006092:	2050      	movs	r0, #80	; 0x50
 8006094:	f002 fa00 	bl	8008498 <malloc>
 8006098:	4603      	mov	r3, r0
 800609a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80060ac:	2302      	movs	r3, #2
 80060ae:	e11f      	b.n	80062f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80060b0:	2250      	movs	r2, #80	; 0x50
 80060b2:	2100      	movs	r1, #0
 80060b4:	68b8      	ldr	r0, [r7, #8]
 80060b6:	f002 f9ff 	bl	80084b8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	211a      	movs	r1, #26
 80060c0:	fb01 f303 	mul.w	r3, r1, r3
 80060c4:	4413      	add	r3, r2
 80060c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	b25b      	sxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	da15      	bge.n	80060fe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	211a      	movs	r1, #26
 80060d8:	fb01 f303 	mul.w	r3, r1, r3
 80060dc:	4413      	add	r3, r2
 80060de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060e2:	781a      	ldrb	r2, [r3, #0]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	211a      	movs	r1, #26
 80060ee:	fb01 f303 	mul.w	r3, r1, r3
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060f8:	881a      	ldrh	r2, [r3, #0]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	785b      	ldrb	r3, [r3, #1]
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 fe32 	bl	8007d6e <USBH_AllocPipe>
 800610a:	4603      	mov	r3, r0
 800610c:	461a      	mov	r2, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	7819      	ldrb	r1, [r3, #0]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	7858      	ldrb	r0, [r3, #1]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	8952      	ldrh	r2, [r2, #10]
 800612a:	9202      	str	r2, [sp, #8]
 800612c:	2203      	movs	r2, #3
 800612e:	9201      	str	r2, [sp, #4]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	4623      	mov	r3, r4
 8006134:	4602      	mov	r2, r0
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f001 fdea 	bl	8007d10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2200      	movs	r2, #0
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f002 f8f9 	bl	800833c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800614a:	2300      	movs	r3, #0
 800614c:	2200      	movs	r2, #0
 800614e:	210a      	movs	r1, #10
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fbeb 	bl	800692c <USBH_FindInterface>
 8006156:	4603      	mov	r3, r0
 8006158:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	2bff      	cmp	r3, #255	; 0xff
 800615e:	d002      	beq.n	8006166 <USBH_CDC_InterfaceInit+0x11a>
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d901      	bls.n	800616a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006166:	2302      	movs	r3, #2
 8006168:	e0c2      	b.n	80062f0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800616a:	7bfb      	ldrb	r3, [r7, #15]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	211a      	movs	r1, #26
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	4413      	add	r3, r2
 8006176:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	b25b      	sxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	da16      	bge.n	80061b0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	211a      	movs	r1, #26
 8006188:	fb01 f303 	mul.w	r3, r1, r3
 800618c:	4413      	add	r3, r2
 800618e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006192:	781a      	ldrb	r2, [r3, #0]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	211a      	movs	r1, #26
 800619e:	fb01 f303 	mul.w	r3, r1, r3
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80061a8:	881a      	ldrh	r2, [r3, #0]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	835a      	strh	r2, [r3, #26]
 80061ae:	e015      	b.n	80061dc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	211a      	movs	r1, #26
 80061b6:	fb01 f303 	mul.w	r3, r1, r3
 80061ba:	4413      	add	r3, r2
 80061bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80061c0:	781a      	ldrb	r2, [r3, #0]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	211a      	movs	r1, #26
 80061cc:	fb01 f303 	mul.w	r3, r1, r3
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80061d6:	881a      	ldrh	r2, [r3, #0]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	211a      	movs	r1, #26
 80061e2:	fb01 f303 	mul.w	r3, r1, r3
 80061e6:	4413      	add	r3, r2
 80061e8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	b25b      	sxtb	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	da16      	bge.n	8006222 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	211a      	movs	r1, #26
 80061fa:	fb01 f303 	mul.w	r3, r1, r3
 80061fe:	4413      	add	r3, r2
 8006200:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006204:	781a      	ldrb	r2, [r3, #0]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	211a      	movs	r1, #26
 8006210:	fb01 f303 	mul.w	r3, r1, r3
 8006214:	4413      	add	r3, r2
 8006216:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800621a:	881a      	ldrh	r2, [r3, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	835a      	strh	r2, [r3, #26]
 8006220:	e015      	b.n	800624e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	211a      	movs	r1, #26
 8006228:	fb01 f303 	mul.w	r3, r1, r3
 800622c:	4413      	add	r3, r2
 800622e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006232:	781a      	ldrb	r2, [r3, #0]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	211a      	movs	r1, #26
 800623e:	fb01 f303 	mul.w	r3, r1, r3
 8006242:	4413      	add	r3, r2
 8006244:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006248:	881a      	ldrh	r2, [r3, #0]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	7b9b      	ldrb	r3, [r3, #14]
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 fd8a 	bl	8007d6e <USBH_AllocPipe>
 800625a:	4603      	mov	r3, r0
 800625c:	461a      	mov	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	7bdb      	ldrb	r3, [r3, #15]
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f001 fd80 	bl	8007d6e <USBH_AllocPipe>
 800626e:	4603      	mov	r3, r0
 8006270:	461a      	mov	r2, r3
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	7b59      	ldrb	r1, [r3, #13]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	7b98      	ldrb	r0, [r3, #14]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	8b12      	ldrh	r2, [r2, #24]
 800628e:	9202      	str	r2, [sp, #8]
 8006290:	2202      	movs	r2, #2
 8006292:	9201      	str	r2, [sp, #4]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	4623      	mov	r3, r4
 8006298:	4602      	mov	r2, r0
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 fd38 	bl	8007d10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	7b19      	ldrb	r1, [r3, #12]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	7bd8      	ldrb	r0, [r3, #15]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	8b52      	ldrh	r2, [r2, #26]
 80062b8:	9202      	str	r2, [sp, #8]
 80062ba:	2202      	movs	r2, #2
 80062bc:	9201      	str	r2, [sp, #4]
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	4623      	mov	r3, r4
 80062c2:	4602      	mov	r2, r0
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f001 fd23 	bl	8007d10 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	7b5b      	ldrb	r3, [r3, #13]
 80062d6:	2200      	movs	r2, #0
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f002 f82e 	bl	800833c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	7b1b      	ldrb	r3, [r3, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	4619      	mov	r1, r3
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f002 f827 	bl	800833c <USBH_LL_SetToggle>

  return USBH_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd90      	pop	{r4, r7, pc}

080062f8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00e      	beq.n	8006330 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f001 fd18 	bl	8007d4e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 fd43 	bl	8007db0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	7b1b      	ldrb	r3, [r3, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00e      	beq.n	8006356 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	7b1b      	ldrb	r3, [r3, #12]
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fd05 	bl	8007d4e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	7b1b      	ldrb	r3, [r3, #12]
 8006348:	4619      	mov	r1, r3
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f001 fd30 	bl	8007db0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	7b5b      	ldrb	r3, [r3, #13]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00e      	beq.n	800637c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	7b5b      	ldrb	r3, [r3, #13]
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 fcf2 	bl	8007d4e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	7b5b      	ldrb	r3, [r3, #13]
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f001 fd1d 	bl	8007db0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00b      	beq.n	80063a0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	4618      	mov	r0, r3
 8006392:	f002 f889 	bl	80084a8 <free>
    phost->pActiveClass->pData = 0U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800639c:	2200      	movs	r2, #0
 800639e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80063aa:	b580      	push	{r7, lr}
 80063ac:	b084      	sub	sp, #16
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3340      	adds	r3, #64	; 0x40
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f8b1 	bl	800652a <GetLineCoding>
 80063c8:	4603      	mov	r3, r0
 80063ca:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80063cc:	7afb      	ldrb	r3, [r7, #11]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d105      	bne.n	80063de <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063d8:	2102      	movs	r1, #2
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80063de:	7afb      	ldrb	r3, [r7, #11]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80063f0:	2301      	movs	r3, #1
 80063f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006408:	2b04      	cmp	r3, #4
 800640a:	d877      	bhi.n	80064fc <USBH_CDC_Process+0x114>
 800640c:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <USBH_CDC_Process+0x2c>)
 800640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006412:	bf00      	nop
 8006414:	08006429 	.word	0x08006429
 8006418:	0800642f 	.word	0x0800642f
 800641c:	0800645f 	.word	0x0800645f
 8006420:	080064d3 	.word	0x080064d3
 8006424:	080064e1 	.word	0x080064e1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	73fb      	strb	r3, [r7, #15]
      break;
 800642c:	e06d      	b.n	800650a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f897 	bl	8006568 <SetLineCoding>
 800643a:	4603      	mov	r3, r0
 800643c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800643e:	7bbb      	ldrb	r3, [r7, #14]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d104      	bne.n	800644e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800644c:	e058      	b.n	8006500 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d055      	beq.n	8006500 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2204      	movs	r2, #4
 8006458:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800645c:	e050      	b.n	8006500 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	3340      	adds	r3, #64	; 0x40
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f860 	bl	800652a <GetLineCoding>
 800646a:	4603      	mov	r3, r0
 800646c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800646e:	7bbb      	ldrb	r3, [r7, #14]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d126      	bne.n	80064c2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006486:	791b      	ldrb	r3, [r3, #4]
 8006488:	429a      	cmp	r2, r3
 800648a:	d13b      	bne.n	8006504 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006496:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006498:	429a      	cmp	r2, r3
 800649a:	d133      	bne.n	8006504 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d12b      	bne.n	8006504 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d124      	bne.n	8006504 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f958 	bl	8006770 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80064c0:	e020      	b.n	8006504 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80064c2:	7bbb      	ldrb	r3, [r7, #14]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d01d      	beq.n	8006504 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2204      	movs	r2, #4
 80064cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80064d0:	e018      	b.n	8006504 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f867 	bl	80065a6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f8da 	bl	8006692 <CDC_ProcessReception>
      break;
 80064de:	e014      	b.n	800650a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80064e0:	2100      	movs	r1, #0
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 ffe3 	bl	80074ae <USBH_ClrFeature>
 80064e8:	4603      	mov	r3, r0
 80064ea:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80064fa:	e005      	b.n	8006508 <USBH_CDC_Process+0x120>

    default:
      break;
 80064fc:	bf00      	nop
 80064fe:	e004      	b.n	800650a <USBH_CDC_Process+0x122>
      break;
 8006500:	bf00      	nop
 8006502:	e002      	b.n	800650a <USBH_CDC_Process+0x122>
      break;
 8006504:	bf00      	nop
 8006506:	e000      	b.n	800650a <USBH_CDC_Process+0x122>
      break;
 8006508:	bf00      	nop

  }

  return status;
 800650a:	7bfb      	ldrb	r3, [r7, #15]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	22a1      	movs	r2, #161	; 0xa1
 8006538:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2221      	movs	r2, #33	; 0x21
 800653e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2207      	movs	r2, #7
 8006550:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2207      	movs	r2, #7
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 f988 	bl	800786e <USBH_CtlReq>
 800655e:	4603      	mov	r3, r0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2221      	movs	r2, #33	; 0x21
 8006576:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2220      	movs	r2, #32
 800657c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2207      	movs	r2, #7
 800658e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2207      	movs	r2, #7
 8006594:	4619      	mov	r1, r3
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f001 f969 	bl	800786e <USBH_CtlReq>
 800659c:	4603      	mov	r3, r0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b086      	sub	sp, #24
 80065aa:	af02      	add	r7, sp, #8
 80065ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d002      	beq.n	80065cc <CDC_ProcessTransmission+0x26>
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d023      	beq.n	8006612 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80065ca:	e05e      	b.n	800668a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	8b12      	ldrh	r2, [r2, #24]
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d90b      	bls.n	80065f0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	69d9      	ldr	r1, [r3, #28]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8b1a      	ldrh	r2, [r3, #24]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	7b5b      	ldrb	r3, [r3, #13]
 80065e4:	2001      	movs	r0, #1
 80065e6:	9000      	str	r0, [sp, #0]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 fb4e 	bl	8007c8a <USBH_BulkSendData>
 80065ee:	e00b      	b.n	8006608 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	7b5b      	ldrb	r3, [r3, #13]
 80065fe:	2001      	movs	r0, #1
 8006600:	9000      	str	r0, [sp, #0]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f001 fb41 	bl	8007c8a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006610:	e03b      	b.n	800668a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	7b5b      	ldrb	r3, [r3, #13]
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 fe65 	bl	80082e8 <USBH_LL_GetURBState>
 800661e:	4603      	mov	r3, r0
 8006620:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006622:	7afb      	ldrb	r3, [r7, #11]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d128      	bne.n	800667a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	8b12      	ldrh	r2, [r2, #24]
 8006630:	4293      	cmp	r3, r2
 8006632:	d90e      	bls.n	8006652 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	8b12      	ldrh	r2, [r2, #24]
 800663c:	1a9a      	subs	r2, r3, r2
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	8b12      	ldrh	r2, [r2, #24]
 800664a:	441a      	add	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	61da      	str	r2, [r3, #28]
 8006650:	e002      	b.n	8006658 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	2b00      	cmp	r3, #0
 800665e:	d004      	beq.n	800666a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006668:	e00e      	b.n	8006688 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f868 	bl	8006748 <USBH_CDC_TransmitCallback>
      break;
 8006678:	e006      	b.n	8006688 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800667a:	7afb      	ldrb	r3, [r7, #11]
 800667c:	2b02      	cmp	r3, #2
 800667e:	d103      	bne.n	8006688 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006688:	bf00      	nop
  }
}
 800668a:	bf00      	nop
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b086      	sub	sp, #24
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80066a4:	2300      	movs	r3, #0
 80066a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d002      	beq.n	80066b8 <CDC_ProcessReception+0x26>
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d00e      	beq.n	80066d4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80066b6:	e043      	b.n	8006740 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	6a19      	ldr	r1, [r3, #32]
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	8b5a      	ldrh	r2, [r3, #26]
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	7b1b      	ldrb	r3, [r3, #12]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 fb05 	bl	8007cd4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2204      	movs	r2, #4
 80066ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80066d2:	e035      	b.n	8006740 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	7b1b      	ldrb	r3, [r3, #12]
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f001 fe04 	bl	80082e8 <USBH_LL_GetURBState>
 80066e0:	4603      	mov	r3, r0
 80066e2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80066e4:	7cfb      	ldrb	r3, [r7, #19]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d129      	bne.n	800673e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	7b1b      	ldrb	r3, [r3, #12]
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 fd67 	bl	80081c4 <USBH_LL_GetLastXferSize>
 80066f6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d016      	beq.n	8006730 <CDC_ProcessReception+0x9e>
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	8b5b      	ldrh	r3, [r3, #26]
 8006706:	461a      	mov	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4293      	cmp	r3, r2
 800670c:	d910      	bls.n	8006730 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	1ad2      	subs	r2, r2, r3
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	6a1a      	ldr	r2, [r3, #32]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	441a      	add	r2, r3
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2203      	movs	r2, #3
 800672a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800672e:	e006      	b.n	800673e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f80f 	bl	800675c <USBH_CDC_ReceiveCallback>
      break;
 800673e:	bf00      	nop
  }
}
 8006740:	bf00      	nop
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	4613      	mov	r3, r2
 8006790:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006798:	2302      	movs	r3, #2
 800679a:	e029      	b.n	80067f0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	79fa      	ldrb	r2, [r7, #7]
 80067a0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f81f 	bl	80067f8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f001 fc37 	bl	800805c <USBH_LL_Init>

  return USBH_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	e009      	b.n	800681e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	33e0      	adds	r3, #224	; 0xe0
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	2200      	movs	r2, #0
 8006816:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b0e      	cmp	r3, #14
 8006822:	d9f2      	bls.n	800680a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006824:	2300      	movs	r3, #0
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	e009      	b.n	800683e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3301      	adds	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006844:	d3f1      	bcc.n	800682a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2240      	movs	r2, #64	; 0x40
 800686a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d016      	beq.n	80068e2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10e      	bne.n	80068dc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80068c4:	1c59      	adds	r1, r3, #1
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	33de      	adds	r3, #222	; 0xde
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	73fb      	strb	r3, [r7, #15]
 80068da:	e004      	b.n	80068e6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80068dc:	2302      	movs	r3, #2
 80068de:	73fb      	strb	r3, [r7, #15]
 80068e0:	e001      	b.n	80068e6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80068e2:	2302      	movs	r3, #2
 80068e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800690a:	78fa      	ldrb	r2, [r7, #3]
 800690c:	429a      	cmp	r2, r3
 800690e:	d204      	bcs.n	800691a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	78fa      	ldrb	r2, [r7, #3]
 8006914:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006918:	e001      	b.n	800691e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800691a:	2302      	movs	r3, #2
 800691c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	4608      	mov	r0, r1
 8006936:	4611      	mov	r1, r2
 8006938:	461a      	mov	r2, r3
 800693a:	4603      	mov	r3, r0
 800693c:	70fb      	strb	r3, [r7, #3]
 800693e:	460b      	mov	r3, r1
 8006940:	70bb      	strb	r3, [r7, #2]
 8006942:	4613      	mov	r3, r2
 8006944:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800694a:	2300      	movs	r3, #0
 800694c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006954:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006956:	e025      	b.n	80069a4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006958:	7dfb      	ldrb	r3, [r7, #23]
 800695a:	221a      	movs	r2, #26
 800695c:	fb02 f303 	mul.w	r3, r2, r3
 8006960:	3308      	adds	r3, #8
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4413      	add	r3, r2
 8006966:	3302      	adds	r3, #2
 8006968:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	795b      	ldrb	r3, [r3, #5]
 800696e:	78fa      	ldrb	r2, [r7, #3]
 8006970:	429a      	cmp	r2, r3
 8006972:	d002      	beq.n	800697a <USBH_FindInterface+0x4e>
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	2bff      	cmp	r3, #255	; 0xff
 8006978:	d111      	bne.n	800699e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800697e:	78ba      	ldrb	r2, [r7, #2]
 8006980:	429a      	cmp	r2, r3
 8006982:	d002      	beq.n	800698a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006984:	78bb      	ldrb	r3, [r7, #2]
 8006986:	2bff      	cmp	r3, #255	; 0xff
 8006988:	d109      	bne.n	800699e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800698e:	787a      	ldrb	r2, [r7, #1]
 8006990:	429a      	cmp	r2, r3
 8006992:	d002      	beq.n	800699a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006994:	787b      	ldrb	r3, [r7, #1]
 8006996:	2bff      	cmp	r3, #255	; 0xff
 8006998:	d101      	bne.n	800699e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800699a:	7dfb      	ldrb	r3, [r7, #23]
 800699c:	e006      	b.n	80069ac <USBH_FindInterface+0x80>
    }
    if_ix++;
 800699e:	7dfb      	ldrb	r3, [r7, #23]
 80069a0:	3301      	adds	r3, #1
 80069a2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80069a4:	7dfb      	ldrb	r3, [r7, #23]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d9d6      	bls.n	8006958 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80069aa:	23ff      	movs	r3, #255	; 0xff
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 fb87 	bl	80080d4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80069c6:	2101      	movs	r1, #1
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 fca0 	bl	800830e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af04      	add	r7, sp, #16
 80069de:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80069e0:	2302      	movs	r3, #2
 80069e2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d102      	bne.n	80069fa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2203      	movs	r2, #3
 80069f8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b0b      	cmp	r3, #11
 8006a02:	f200 81b3 	bhi.w	8006d6c <USBH_Process+0x394>
 8006a06:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <USBH_Process+0x34>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006a3d 	.word	0x08006a3d
 8006a10:	08006a6f 	.word	0x08006a6f
 8006a14:	08006ad7 	.word	0x08006ad7
 8006a18:	08006d07 	.word	0x08006d07
 8006a1c:	08006d6d 	.word	0x08006d6d
 8006a20:	08006b7b 	.word	0x08006b7b
 8006a24:	08006cad 	.word	0x08006cad
 8006a28:	08006bb1 	.word	0x08006bb1
 8006a2c:	08006bd1 	.word	0x08006bd1
 8006a30:	08006bf1 	.word	0x08006bf1
 8006a34:	08006c1f 	.word	0x08006c1f
 8006a38:	08006cef 	.word	0x08006cef
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 8193 	beq.w	8006d70 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006a50:	20c8      	movs	r0, #200	; 0xc8
 8006a52:	f001 fca3 	bl	800839c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f001 fb99 	bl	800818e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006a6c:	e180      	b.n	8006d70 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d107      	bne.n	8006a88 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a86:	e182      	b.n	8006d8e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a92:	d914      	bls.n	8006abe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d903      	bls.n	8006ab6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	220d      	movs	r2, #13
 8006ab2:	701a      	strb	r2, [r3, #0]
      break;
 8006ab4:	e16b      	b.n	8006d8e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]
      break;
 8006abc:	e167      	b.n	8006d8e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ac4:	f103 020a 	add.w	r2, r3, #10
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006ace:	200a      	movs	r0, #10
 8006ad0:	f001 fc64 	bl	800839c <USBH_Delay>
      break;
 8006ad4:	e15b      	b.n	8006d8e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ae6:	2104      	movs	r1, #4
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006aec:	2064      	movs	r0, #100	; 0x64
 8006aee:	f001 fc55 	bl	800839c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fb24 	bl	8008140 <USBH_LL_GetSpeed>
 8006af8:	4603      	mov	r3, r0
 8006afa:	461a      	mov	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2205      	movs	r2, #5
 8006b06:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006b08:	2100      	movs	r1, #0
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 f92f 	bl	8007d6e <USBH_AllocPipe>
 8006b10:	4603      	mov	r3, r0
 8006b12:	461a      	mov	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006b18:	2180      	movs	r1, #128	; 0x80
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 f927 	bl	8007d6e <USBH_AllocPipe>
 8006b20:	4603      	mov	r3, r0
 8006b22:	461a      	mov	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	7919      	ldrb	r1, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b3c:	b292      	uxth	r2, r2
 8006b3e:	9202      	str	r2, [sp, #8]
 8006b40:	2200      	movs	r2, #0
 8006b42:	9201      	str	r2, [sp, #4]
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	4603      	mov	r3, r0
 8006b48:	2280      	movs	r2, #128	; 0x80
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 f8e0 	bl	8007d10 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	7959      	ldrb	r1, [r3, #5]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b64:	b292      	uxth	r2, r2
 8006b66:	9202      	str	r2, [sp, #8]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	9201      	str	r2, [sp, #4]
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2200      	movs	r2, #0
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 f8cc 	bl	8007d10 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b78:	e109      	b.n	8006d8e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f90c 	bl	8006d98 <USBH_HandleEnum>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006b84:	7bbb      	ldrb	r3, [r7, #14]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f040 80f3 	bne.w	8006d74 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d103      	bne.n	8006ba8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2208      	movs	r2, #8
 8006ba4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006ba6:	e0e5      	b.n	8006d74 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2207      	movs	r2, #7
 8006bac:	701a      	strb	r2, [r3, #0]
      break;
 8006bae:	e0e1      	b.n	8006d74 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 80de 	beq.w	8006d78 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2208      	movs	r2, #8
 8006bcc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006bce:	e0d3      	b.n	8006d78 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fc20 	bl	8007420 <USBH_SetCfg>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f040 80ca 	bne.w	8006d7c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2209      	movs	r2, #9
 8006bec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006bee:	e0c5      	b.n	8006d7c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00b      	beq.n	8006c16 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006bfe:	2101      	movs	r1, #1
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fc30 	bl	8007466 <USBH_SetFeature>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f040 80b9 	bne.w	8006d80 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	220a      	movs	r2, #10
 8006c12:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c14:	e0b4      	b.n	8006d80 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	220a      	movs	r2, #10
 8006c1a:	701a      	strb	r2, [r3, #0]
      break;
 8006c1c:	e0b0      	b.n	8006d80 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 80ad 	beq.w	8006d84 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]
 8006c36:	e016      	b.n	8006c66 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006c38:	7bfa      	ldrb	r2, [r7, #15]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	32de      	adds	r2, #222	; 0xde
 8006c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c42:	791a      	ldrb	r2, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d108      	bne.n	8006c60 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006c4e:	7bfa      	ldrb	r2, [r7, #15]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	32de      	adds	r2, #222	; 0xde
 8006c54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006c5e:	e005      	b.n	8006c6c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	3301      	adds	r3, #1
 8006c64:	73fb      	strb	r3, [r7, #15]
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0e5      	beq.n	8006c38 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d016      	beq.n	8006ca4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	4798      	blx	r3
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d109      	bne.n	8006c9c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2206      	movs	r2, #6
 8006c8c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c94:	2103      	movs	r1, #3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c9a:	e073      	b.n	8006d84 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	220d      	movs	r2, #13
 8006ca0:	701a      	strb	r2, [r3, #0]
      break;
 8006ca2:	e06f      	b.n	8006d84 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	220d      	movs	r2, #13
 8006ca8:	701a      	strb	r2, [r3, #0]
      break;
 8006caa:	e06b      	b.n	8006d84 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d017      	beq.n	8006ce6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	4798      	blx	r3
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006cc6:	7bbb      	ldrb	r3, [r7, #14]
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d103      	bne.n	8006cd6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	220b      	movs	r2, #11
 8006cd2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006cd4:	e058      	b.n	8006d88 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d154      	bne.n	8006d88 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	220d      	movs	r2, #13
 8006ce2:	701a      	strb	r2, [r3, #0]
      break;
 8006ce4:	e050      	b.n	8006d88 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	220d      	movs	r2, #13
 8006cea:	701a      	strb	r2, [r3, #0]
      break;
 8006cec:	e04c      	b.n	8006d88 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d049      	beq.n	8006d8c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	4798      	blx	r3
      }
      break;
 8006d04:	e042      	b.n	8006d8c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff fd72 	bl	80067f8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d42:	2105      	movs	r1, #5
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d107      	bne.n	8006d64 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff fe2b 	bl	80069b8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d62:	e014      	b.n	8006d8e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f001 f9b5 	bl	80080d4 <USBH_LL_Start>
      break;
 8006d6a:	e010      	b.n	8006d8e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006d6c:	bf00      	nop
 8006d6e:	e00e      	b.n	8006d8e <USBH_Process+0x3b6>
      break;
 8006d70:	bf00      	nop
 8006d72:	e00c      	b.n	8006d8e <USBH_Process+0x3b6>
      break;
 8006d74:	bf00      	nop
 8006d76:	e00a      	b.n	8006d8e <USBH_Process+0x3b6>
    break;
 8006d78:	bf00      	nop
 8006d7a:	e008      	b.n	8006d8e <USBH_Process+0x3b6>
      break;
 8006d7c:	bf00      	nop
 8006d7e:	e006      	b.n	8006d8e <USBH_Process+0x3b6>
      break;
 8006d80:	bf00      	nop
 8006d82:	e004      	b.n	8006d8e <USBH_Process+0x3b6>
      break;
 8006d84:	bf00      	nop
 8006d86:	e002      	b.n	8006d8e <USBH_Process+0x3b6>
      break;
 8006d88:	bf00      	nop
 8006d8a:	e000      	b.n	8006d8e <USBH_Process+0x3b6>
      break;
 8006d8c:	bf00      	nop
  }
  return USBH_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	af04      	add	r7, sp, #16
 8006d9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006da0:	2301      	movs	r3, #1
 8006da2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006da4:	2301      	movs	r3, #1
 8006da6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	785b      	ldrb	r3, [r3, #1]
 8006dac:	2b07      	cmp	r3, #7
 8006dae:	f200 81c1 	bhi.w	8007134 <USBH_HandleEnum+0x39c>
 8006db2:	a201      	add	r2, pc, #4	; (adr r2, 8006db8 <USBH_HandleEnum+0x20>)
 8006db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db8:	08006dd9 	.word	0x08006dd9
 8006dbc:	08006e97 	.word	0x08006e97
 8006dc0:	08006f01 	.word	0x08006f01
 8006dc4:	08006f8f 	.word	0x08006f8f
 8006dc8:	08006ff9 	.word	0x08006ff9
 8006dcc:	08007069 	.word	0x08007069
 8006dd0:	080070af 	.word	0x080070af
 8006dd4:	080070f5 	.word	0x080070f5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006dd8:	2108      	movs	r1, #8
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fa50 	bl	8007280 <USBH_Get_DevDesc>
 8006de0:	4603      	mov	r3, r0
 8006de2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d130      	bne.n	8006e4c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	7919      	ldrb	r1, [r3, #4]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006e0e:	b292      	uxth	r2, r2
 8006e10:	9202      	str	r2, [sp, #8]
 8006e12:	2200      	movs	r2, #0
 8006e14:	9201      	str	r2, [sp, #4]
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2280      	movs	r2, #128	; 0x80
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 ff77 	bl	8007d10 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	7959      	ldrb	r1, [r3, #5]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e36:	b292      	uxth	r2, r2
 8006e38:	9202      	str	r2, [sp, #8]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	9201      	str	r2, [sp, #4]
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	4603      	mov	r3, r0
 8006e42:	2200      	movs	r2, #0
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 ff63 	bl	8007d10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006e4a:	e175      	b.n	8007138 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	f040 8172 	bne.w	8007138 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d903      	bls.n	8006e76 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	220d      	movs	r2, #13
 8006e72:	701a      	strb	r2, [r3, #0]
      break;
 8006e74:	e160      	b.n	8007138 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	795b      	ldrb	r3, [r3, #5]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 ff97 	bl	8007db0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	791b      	ldrb	r3, [r3, #4]
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 ff91 	bl	8007db0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	701a      	strb	r2, [r3, #0]
      break;
 8006e94:	e150      	b.n	8007138 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006e96:	2112      	movs	r1, #18
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f9f1 	bl	8007280 <USBH_Get_DevDesc>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ea2:	7bbb      	ldrb	r3, [r7, #14]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d103      	bne.n	8006eb0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006eae:	e145      	b.n	800713c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eb0:	7bbb      	ldrb	r3, [r7, #14]
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	f040 8142 	bne.w	800713c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d903      	bls.n	8006eda <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	220d      	movs	r2, #13
 8006ed6:	701a      	strb	r2, [r3, #0]
      break;
 8006ed8:	e130      	b.n	800713c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	795b      	ldrb	r3, [r3, #5]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 ff65 	bl	8007db0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	791b      	ldrb	r3, [r3, #4]
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 ff5f 	bl	8007db0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	701a      	strb	r2, [r3, #0]
      break;
 8006efe:	e11d      	b.n	800713c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006f00:	2101      	movs	r1, #1
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fa68 	bl	80073d8 <USBH_SetAddress>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d132      	bne.n	8006f78 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006f12:	2002      	movs	r0, #2
 8006f14:	f001 fa42 	bl	800839c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2203      	movs	r2, #3
 8006f24:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	7919      	ldrb	r1, [r3, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006f3a:	b292      	uxth	r2, r2
 8006f3c:	9202      	str	r2, [sp, #8]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	9201      	str	r2, [sp, #4]
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	4603      	mov	r3, r0
 8006f46:	2280      	movs	r2, #128	; 0x80
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fee1 	bl	8007d10 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	7959      	ldrb	r1, [r3, #5]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f62:	b292      	uxth	r2, r2
 8006f64:	9202      	str	r2, [sp, #8]
 8006f66:	2200      	movs	r2, #0
 8006f68:	9201      	str	r2, [sp, #4]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2200      	movs	r2, #0
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fecd 	bl	8007d10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f76:	e0e3      	b.n	8007140 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	f040 80e0 	bne.w	8007140 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	220d      	movs	r2, #13
 8006f84:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	705a      	strb	r2, [r3, #1]
      break;
 8006f8c:	e0d8      	b.n	8007140 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006f8e:	2109      	movs	r1, #9
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f99d 	bl	80072d0 <USBH_Get_CfgDesc>
 8006f96:	4603      	mov	r3, r0
 8006f98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f9a:	7bbb      	ldrb	r3, [r7, #14]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d103      	bne.n	8006fa8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2204      	movs	r2, #4
 8006fa4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006fa6:	e0cd      	b.n	8007144 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	f040 80ca 	bne.w	8007144 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d903      	bls.n	8006fd2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	220d      	movs	r2, #13
 8006fce:	701a      	strb	r2, [r3, #0]
      break;
 8006fd0:	e0b8      	b.n	8007144 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	795b      	ldrb	r3, [r3, #5]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fee9 	bl	8007db0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	791b      	ldrb	r3, [r3, #4]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fee3 	bl	8007db0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	701a      	strb	r2, [r3, #0]
      break;
 8006ff6:	e0a5      	b.n	8007144 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f965 	bl	80072d0 <USBH_Get_CfgDesc>
 8007006:	4603      	mov	r3, r0
 8007008:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d103      	bne.n	8007018 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2205      	movs	r2, #5
 8007014:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007016:	e097      	b.n	8007148 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007018:	7bbb      	ldrb	r3, [r7, #14]
 800701a:	2b03      	cmp	r3, #3
 800701c:	f040 8094 	bne.w	8007148 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007026:	3301      	adds	r3, #1
 8007028:	b2da      	uxtb	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007036:	2b03      	cmp	r3, #3
 8007038:	d903      	bls.n	8007042 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	220d      	movs	r2, #13
 800703e:	701a      	strb	r2, [r3, #0]
      break;
 8007040:	e082      	b.n	8007148 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	795b      	ldrb	r3, [r3, #5]
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 feb1 	bl	8007db0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	791b      	ldrb	r3, [r3, #4]
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 feab 	bl	8007db0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	701a      	strb	r2, [r3, #0]
      break;
 8007066:	e06f      	b.n	8007148 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800706e:	2b00      	cmp	r3, #0
 8007070:	d019      	beq.n	80070a6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800707e:	23ff      	movs	r3, #255	; 0xff
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f949 	bl	8007318 <USBH_Get_StringDesc>
 8007086:	4603      	mov	r3, r0
 8007088:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800708a:	7bbb      	ldrb	r3, [r7, #14]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d103      	bne.n	8007098 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2206      	movs	r2, #6
 8007094:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007096:	e059      	b.n	800714c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007098:	7bbb      	ldrb	r3, [r7, #14]
 800709a:	2b03      	cmp	r3, #3
 800709c:	d156      	bne.n	800714c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2206      	movs	r2, #6
 80070a2:	705a      	strb	r2, [r3, #1]
      break;
 80070a4:	e052      	b.n	800714c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2206      	movs	r2, #6
 80070aa:	705a      	strb	r2, [r3, #1]
      break;
 80070ac:	e04e      	b.n	800714c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d019      	beq.n	80070ec <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80070c4:	23ff      	movs	r3, #255	; 0xff
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f926 	bl	8007318 <USBH_Get_StringDesc>
 80070cc:	4603      	mov	r3, r0
 80070ce:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d103      	bne.n	80070de <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2207      	movs	r2, #7
 80070da:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80070dc:	e038      	b.n	8007150 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d135      	bne.n	8007150 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2207      	movs	r2, #7
 80070e8:	705a      	strb	r2, [r3, #1]
      break;
 80070ea:	e031      	b.n	8007150 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2207      	movs	r2, #7
 80070f0:	705a      	strb	r2, [r3, #1]
      break;
 80070f2:	e02d      	b.n	8007150 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d017      	beq.n	800712e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800710a:	23ff      	movs	r3, #255	; 0xff
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f903 	bl	8007318 <USBH_Get_StringDesc>
 8007112:	4603      	mov	r3, r0
 8007114:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d102      	bne.n	8007122 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007120:	e018      	b.n	8007154 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007122:	7bbb      	ldrb	r3, [r7, #14]
 8007124:	2b03      	cmp	r3, #3
 8007126:	d115      	bne.n	8007154 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	73fb      	strb	r3, [r7, #15]
      break;
 800712c:	e012      	b.n	8007154 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	73fb      	strb	r3, [r7, #15]
      break;
 8007132:	e00f      	b.n	8007154 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007134:	bf00      	nop
 8007136:	e00e      	b.n	8007156 <USBH_HandleEnum+0x3be>
      break;
 8007138:	bf00      	nop
 800713a:	e00c      	b.n	8007156 <USBH_HandleEnum+0x3be>
      break;
 800713c:	bf00      	nop
 800713e:	e00a      	b.n	8007156 <USBH_HandleEnum+0x3be>
      break;
 8007140:	bf00      	nop
 8007142:	e008      	b.n	8007156 <USBH_HandleEnum+0x3be>
      break;
 8007144:	bf00      	nop
 8007146:	e006      	b.n	8007156 <USBH_HandleEnum+0x3be>
      break;
 8007148:	bf00      	nop
 800714a:	e004      	b.n	8007156 <USBH_HandleEnum+0x3be>
      break;
 800714c:	bf00      	nop
 800714e:	e002      	b.n	8007156 <USBH_HandleEnum+0x3be>
      break;
 8007150:	bf00      	nop
 8007152:	e000      	b.n	8007156 <USBH_HandleEnum+0x3be>
      break;
 8007154:	bf00      	nop
  }
  return Status;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f804 	bl	80071a2 <USBH_HandleSof>
}
 800719a:	bf00      	nop
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b082      	sub	sp, #8
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b0b      	cmp	r3, #11
 80071b2:	d10a      	bne.n	80071ca <USBH_HandleSof+0x28>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d005      	beq.n	80071ca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
  }
}
 80071ca:	bf00      	nop
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80071e2:	bf00      	nop
}
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80071fe:	bf00      	nop
}
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 ff56 	bl	800810a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	791b      	ldrb	r3, [r3, #4]
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fda3 	bl	8007db0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	795b      	ldrb	r3, [r3, #5]
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fd9d 	bl	8007db0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af02      	add	r7, sp, #8
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	b29b      	uxth	r3, r3
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	4613      	mov	r3, r2
 800729a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800729e:	2100      	movs	r1, #0
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f864 	bl	800736e <USBH_GetDescriptor>
 80072a6:	4603      	mov	r3, r0
 80072a8:	73fb      	strb	r3, [r7, #15]
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10a      	bne.n	80072c6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072bc:	78fa      	ldrb	r2, [r7, #3]
 80072be:	b292      	uxth	r2, r2
 80072c0:	4619      	mov	r1, r3
 80072c2:	f000 f918 	bl	80074f6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	331c      	adds	r3, #28
 80072e0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80072e2:	887b      	ldrh	r3, [r7, #2]
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072ec:	2100      	movs	r1, #0
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f83d 	bl	800736e <USBH_GetDescriptor>
 80072f4:	4603      	mov	r3, r0
 80072f6:	72fb      	strb	r3, [r7, #11]
 80072f8:	7afb      	ldrb	r3, [r7, #11]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d107      	bne.n	800730e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007304:	887a      	ldrh	r2, [r7, #2]
 8007306:	68f9      	ldr	r1, [r7, #12]
 8007308:	4618      	mov	r0, r3
 800730a:	f000 f964 	bl	80075d6 <USBH_ParseCfgDesc>
  }

  return status;
 800730e:	7afb      	ldrb	r3, [r7, #11]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b088      	sub	sp, #32
 800731c:	af02      	add	r7, sp, #8
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	607a      	str	r2, [r7, #4]
 8007322:	461a      	mov	r2, r3
 8007324:	460b      	mov	r3, r1
 8007326:	72fb      	strb	r3, [r7, #11]
 8007328:	4613      	mov	r3, r2
 800732a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800732c:	7afb      	ldrb	r3, [r7, #11]
 800732e:	b29b      	uxth	r3, r3
 8007330:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007334:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800733c:	893b      	ldrh	r3, [r7, #8]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	460b      	mov	r3, r1
 8007342:	2100      	movs	r1, #0
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 f812 	bl	800736e <USBH_GetDescriptor>
 800734a:	4603      	mov	r3, r0
 800734c:	75fb      	strb	r3, [r7, #23]
 800734e:	7dfb      	ldrb	r3, [r7, #23]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d107      	bne.n	8007364 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800735a:	893a      	ldrh	r2, [r7, #8]
 800735c:	6879      	ldr	r1, [r7, #4]
 800735e:	4618      	mov	r0, r3
 8007360:	f000 fa37 	bl	80077d2 <USBH_ParseStringDesc>
  }

  return status;
 8007364:	7dfb      	ldrb	r3, [r7, #23]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	607b      	str	r3, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	72fb      	strb	r3, [r7, #11]
 800737c:	4613      	mov	r3, r2
 800737e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	789b      	ldrb	r3, [r3, #2]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d11c      	bne.n	80073c2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007388:	7afb      	ldrb	r3, [r7, #11]
 800738a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800738e:	b2da      	uxtb	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2206      	movs	r2, #6
 8007398:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	893a      	ldrh	r2, [r7, #8]
 800739e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80073a0:	893b      	ldrh	r3, [r7, #8]
 80073a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80073a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073aa:	d104      	bne.n	80073b6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f240 4209 	movw	r2, #1033	; 0x409
 80073b2:	829a      	strh	r2, [r3, #20]
 80073b4:	e002      	b.n	80073bc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8b3a      	ldrh	r2, [r7, #24]
 80073c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80073c2:	8b3b      	ldrh	r3, [r7, #24]
 80073c4:	461a      	mov	r2, r3
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 fa50 	bl	800786e <USBH_CtlReq>
 80073ce:	4603      	mov	r3, r0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	789b      	ldrb	r3, [r3, #2]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d10f      	bne.n	800740c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2205      	movs	r2, #5
 80073f6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800740c:	2200      	movs	r2, #0
 800740e:	2100      	movs	r1, #0
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fa2c 	bl	800786e <USBH_CtlReq>
 8007416:	4603      	mov	r3, r0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	789b      	ldrb	r3, [r3, #2]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d10e      	bne.n	8007452 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2209      	movs	r2, #9
 800743e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	887a      	ldrh	r2, [r7, #2]
 8007444:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007452:	2200      	movs	r2, #0
 8007454:	2100      	movs	r1, #0
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fa09 	bl	800786e <USBH_CtlReq>
 800745c:	4603      	mov	r3, r0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	789b      	ldrb	r3, [r3, #2]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d10f      	bne.n	800749a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2203      	movs	r2, #3
 8007484:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	b29a      	uxth	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800749a:	2200      	movs	r2, #0
 800749c:	2100      	movs	r1, #0
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f9e5 	bl	800786e <USBH_CtlReq>
 80074a4:	4603      	mov	r3, r0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b082      	sub	sp, #8
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	460b      	mov	r3, r1
 80074b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	789b      	ldrb	r3, [r3, #2]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d10f      	bne.n	80074e2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2202      	movs	r2, #2
 80074c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80074e2:	2200      	movs	r2, #0
 80074e4:	2100      	movs	r1, #0
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f9c1 	bl	800786e <USBH_CtlReq>
 80074ec:	4603      	mov	r3, r0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b085      	sub	sp, #20
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	60f8      	str	r0, [r7, #12]
 80074fe:	60b9      	str	r1, [r7, #8]
 8007500:	4613      	mov	r3, r2
 8007502:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	781a      	ldrb	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	785a      	ldrb	r2, [r3, #1]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	3302      	adds	r3, #2
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	b29a      	uxth	r2, r3
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	3303      	adds	r3, #3
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	021b      	lsls	r3, r3, #8
 8007526:	b29b      	uxth	r3, r3
 8007528:	4313      	orrs	r3, r2
 800752a:	b29a      	uxth	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	791a      	ldrb	r2, [r3, #4]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	795a      	ldrb	r2, [r3, #5]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	799a      	ldrb	r2, [r3, #6]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	79da      	ldrb	r2, [r3, #7]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007550:	88fb      	ldrh	r3, [r7, #6]
 8007552:	2b08      	cmp	r3, #8
 8007554:	d939      	bls.n	80075ca <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	3308      	adds	r3, #8
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b29a      	uxth	r2, r3
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	3309      	adds	r3, #9
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	b29b      	uxth	r3, r3
 8007566:	021b      	lsls	r3, r3, #8
 8007568:	b29b      	uxth	r3, r3
 800756a:	4313      	orrs	r3, r2
 800756c:	b29a      	uxth	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	330a      	adds	r3, #10
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	b29a      	uxth	r2, r3
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	330b      	adds	r3, #11
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	b29b      	uxth	r3, r3
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	b29b      	uxth	r3, r3
 8007586:	4313      	orrs	r3, r2
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	330c      	adds	r3, #12
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	b29a      	uxth	r2, r3
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	330d      	adds	r3, #13
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	b29b      	uxth	r3, r3
 800759e:	021b      	lsls	r3, r3, #8
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	4313      	orrs	r3, r2
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	7b9a      	ldrb	r2, [r3, #14]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	7bda      	ldrb	r2, [r3, #15]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	7c1a      	ldrb	r2, [r3, #16]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	7c5a      	ldrb	r2, [r3, #17]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	745a      	strb	r2, [r3, #17]
  }
}
 80075ca:	bf00      	nop
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b08a      	sub	sp, #40	; 0x28
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	4613      	mov	r3, r2
 80075e2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	781a      	ldrb	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	785a      	ldrb	r2, [r3, #1]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	3302      	adds	r3, #2
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	b29a      	uxth	r2, r3
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	3303      	adds	r3, #3
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	021b      	lsls	r3, r3, #8
 800761a:	b29b      	uxth	r3, r3
 800761c:	4313      	orrs	r3, r2
 800761e:	b29a      	uxth	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	791a      	ldrb	r2, [r3, #4]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	795a      	ldrb	r2, [r3, #5]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	799a      	ldrb	r2, [r3, #6]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	79da      	ldrb	r2, [r3, #7]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	7a1a      	ldrb	r2, [r3, #8]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800764c:	88fb      	ldrh	r3, [r7, #6]
 800764e:	2b09      	cmp	r3, #9
 8007650:	d95f      	bls.n	8007712 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007652:	2309      	movs	r3, #9
 8007654:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007656:	2300      	movs	r3, #0
 8007658:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800765a:	e051      	b.n	8007700 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800765c:	f107 0316 	add.w	r3, r7, #22
 8007660:	4619      	mov	r1, r3
 8007662:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007664:	f000 f8e8 	bl	8007838 <USBH_GetNextDesc>
 8007668:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	785b      	ldrb	r3, [r3, #1]
 800766e:	2b04      	cmp	r3, #4
 8007670:	d146      	bne.n	8007700 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007672:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007676:	221a      	movs	r2, #26
 8007678:	fb02 f303 	mul.w	r3, r2, r3
 800767c:	3308      	adds	r3, #8
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4413      	add	r3, r2
 8007682:	3302      	adds	r3, #2
 8007684:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007688:	69f8      	ldr	r0, [r7, #28]
 800768a:	f000 f846 	bl	800771a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007694:	2300      	movs	r3, #0
 8007696:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007698:	e022      	b.n	80076e0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800769a:	f107 0316 	add.w	r3, r7, #22
 800769e:	4619      	mov	r1, r3
 80076a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076a2:	f000 f8c9 	bl	8007838 <USBH_GetNextDesc>
 80076a6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	785b      	ldrb	r3, [r3, #1]
 80076ac:	2b05      	cmp	r3, #5
 80076ae:	d117      	bne.n	80076e0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80076b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076b4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80076b8:	3201      	adds	r2, #1
 80076ba:	00d2      	lsls	r2, r2, #3
 80076bc:	211a      	movs	r1, #26
 80076be:	fb01 f303 	mul.w	r3, r1, r3
 80076c2:	4413      	add	r3, r2
 80076c4:	3308      	adds	r3, #8
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	4413      	add	r3, r2
 80076ca:	3304      	adds	r3, #4
 80076cc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80076ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076d0:	69b8      	ldr	r0, [r7, #24]
 80076d2:	f000 f851 	bl	8007778 <USBH_ParseEPDesc>
            ep_ix++;
 80076d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80076da:	3301      	adds	r3, #1
 80076dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	791b      	ldrb	r3, [r3, #4]
 80076e4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d204      	bcs.n	80076f6 <USBH_ParseCfgDesc+0x120>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	885a      	ldrh	r2, [r3, #2]
 80076f0:	8afb      	ldrh	r3, [r7, #22]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d8d1      	bhi.n	800769a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80076f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076fa:	3301      	adds	r3, #1
 80076fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007700:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007704:	2b01      	cmp	r3, #1
 8007706:	d804      	bhi.n	8007712 <USBH_ParseCfgDesc+0x13c>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	885a      	ldrh	r2, [r3, #2]
 800770c:	8afb      	ldrh	r3, [r7, #22]
 800770e:	429a      	cmp	r2, r3
 8007710:	d8a4      	bhi.n	800765c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007712:	bf00      	nop
 8007714:	3728      	adds	r7, #40	; 0x28
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781a      	ldrb	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	785a      	ldrb	r2, [r3, #1]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	789a      	ldrb	r2, [r3, #2]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	78da      	ldrb	r2, [r3, #3]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	791a      	ldrb	r2, [r3, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	795a      	ldrb	r2, [r3, #5]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	799a      	ldrb	r2, [r3, #6]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	79da      	ldrb	r2, [r3, #7]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	7a1a      	ldrb	r2, [r3, #8]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	721a      	strb	r2, [r3, #8]
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781a      	ldrb	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	785a      	ldrb	r2, [r3, #1]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	789a      	ldrb	r2, [r3, #2]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	78da      	ldrb	r2, [r3, #3]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	3304      	adds	r3, #4
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	3305      	adds	r3, #5
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	021b      	lsls	r3, r3, #8
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	4313      	orrs	r3, r2
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	799a      	ldrb	r2, [r3, #6]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	719a      	strb	r2, [r3, #6]
}
 80077c6:	bf00      	nop
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b087      	sub	sp, #28
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	60b9      	str	r1, [r7, #8]
 80077dc:	4613      	mov	r3, r2
 80077de:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3301      	adds	r3, #1
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d120      	bne.n	800782c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	1e9a      	subs	r2, r3, #2
 80077f0:	88fb      	ldrh	r3, [r7, #6]
 80077f2:	4293      	cmp	r3, r2
 80077f4:	bf28      	it	cs
 80077f6:	4613      	movcs	r3, r2
 80077f8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	3302      	adds	r3, #2
 80077fe:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007800:	2300      	movs	r3, #0
 8007802:	82fb      	strh	r3, [r7, #22]
 8007804:	e00b      	b.n	800781e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007806:	8afb      	ldrh	r3, [r7, #22]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	4413      	add	r3, r2
 800780c:	781a      	ldrb	r2, [r3, #0]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	3301      	adds	r3, #1
 8007816:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007818:	8afb      	ldrh	r3, [r7, #22]
 800781a:	3302      	adds	r3, #2
 800781c:	82fb      	strh	r3, [r7, #22]
 800781e:	8afa      	ldrh	r2, [r7, #22]
 8007820:	8abb      	ldrh	r3, [r7, #20]
 8007822:	429a      	cmp	r2, r3
 8007824:	d3ef      	bcc.n	8007806 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2200      	movs	r2, #0
 800782a:	701a      	strb	r2, [r3, #0]
  }
}
 800782c:	bf00      	nop
 800782e:	371c      	adds	r7, #28
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	881a      	ldrh	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	b29b      	uxth	r3, r3
 800784c:	4413      	add	r3, r2
 800784e:	b29a      	uxth	r2, r3
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4413      	add	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007860:	68fb      	ldr	r3, [r7, #12]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b086      	sub	sp, #24
 8007872:	af00      	add	r7, sp, #0
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	60b9      	str	r1, [r7, #8]
 8007878:	4613      	mov	r3, r2
 800787a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800787c:	2301      	movs	r3, #1
 800787e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	789b      	ldrb	r3, [r3, #2]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d002      	beq.n	800788e <USBH_CtlReq+0x20>
 8007888:	2b02      	cmp	r3, #2
 800788a:	d00f      	beq.n	80078ac <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800788c:	e027      	b.n	80078de <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	88fa      	ldrh	r2, [r7, #6]
 8007898:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2201      	movs	r2, #1
 800789e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2202      	movs	r2, #2
 80078a4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80078a6:	2301      	movs	r3, #1
 80078a8:	75fb      	strb	r3, [r7, #23]
      break;
 80078aa:	e018      	b.n	80078de <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 f81b 	bl	80078e8 <USBH_HandleControl>
 80078b2:	4603      	mov	r3, r0
 80078b4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <USBH_CtlReq+0x54>
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d106      	bne.n	80078d0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2201      	movs	r2, #1
 80078c6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	761a      	strb	r2, [r3, #24]
      break;
 80078ce:	e005      	b.n	80078dc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d102      	bne.n	80078dc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2201      	movs	r2, #1
 80078da:	709a      	strb	r2, [r3, #2]
      break;
 80078dc:	bf00      	nop
  }
  return status;
 80078de:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80078f0:	2301      	movs	r3, #1
 80078f2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078f4:	2300      	movs	r3, #0
 80078f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	7e1b      	ldrb	r3, [r3, #24]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	2b0a      	cmp	r3, #10
 8007900:	f200 8156 	bhi.w	8007bb0 <USBH_HandleControl+0x2c8>
 8007904:	a201      	add	r2, pc, #4	; (adr r2, 800790c <USBH_HandleControl+0x24>)
 8007906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790a:	bf00      	nop
 800790c:	08007939 	.word	0x08007939
 8007910:	08007953 	.word	0x08007953
 8007914:	080079bd 	.word	0x080079bd
 8007918:	080079e3 	.word	0x080079e3
 800791c:	08007a1b 	.word	0x08007a1b
 8007920:	08007a45 	.word	0x08007a45
 8007924:	08007a97 	.word	0x08007a97
 8007928:	08007ab9 	.word	0x08007ab9
 800792c:	08007af5 	.word	0x08007af5
 8007930:	08007b1b 	.word	0x08007b1b
 8007934:	08007b59 	.word	0x08007b59
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f103 0110 	add.w	r1, r3, #16
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	795b      	ldrb	r3, [r3, #5]
 8007942:	461a      	mov	r2, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f943 	bl	8007bd0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2202      	movs	r2, #2
 800794e:	761a      	strb	r2, [r3, #24]
      break;
 8007950:	e139      	b.n	8007bc6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	795b      	ldrb	r3, [r3, #5]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fcc5 	bl	80082e8 <USBH_LL_GetURBState>
 800795e:	4603      	mov	r3, r0
 8007960:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d11e      	bne.n	80079a6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	7c1b      	ldrb	r3, [r3, #16]
 800796c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007970:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	8adb      	ldrh	r3, [r3, #22]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800797a:	7b7b      	ldrb	r3, [r7, #13]
 800797c:	2b80      	cmp	r3, #128	; 0x80
 800797e:	d103      	bne.n	8007988 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2203      	movs	r2, #3
 8007984:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007986:	e115      	b.n	8007bb4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2205      	movs	r2, #5
 800798c:	761a      	strb	r2, [r3, #24]
      break;
 800798e:	e111      	b.n	8007bb4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007990:	7b7b      	ldrb	r3, [r7, #13]
 8007992:	2b80      	cmp	r3, #128	; 0x80
 8007994:	d103      	bne.n	800799e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2209      	movs	r2, #9
 800799a:	761a      	strb	r2, [r3, #24]
      break;
 800799c:	e10a      	b.n	8007bb4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2207      	movs	r2, #7
 80079a2:	761a      	strb	r2, [r3, #24]
      break;
 80079a4:	e106      	b.n	8007bb4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d003      	beq.n	80079b4 <USBH_HandleControl+0xcc>
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	f040 8100 	bne.w	8007bb4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	220b      	movs	r2, #11
 80079b8:	761a      	strb	r2, [r3, #24]
      break;
 80079ba:	e0fb      	b.n	8007bb4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6899      	ldr	r1, [r3, #8]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	899a      	ldrh	r2, [r3, #12]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	791b      	ldrb	r3, [r3, #4]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f93a 	bl	8007c4e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2204      	movs	r2, #4
 80079de:	761a      	strb	r2, [r3, #24]
      break;
 80079e0:	e0f1      	b.n	8007bc6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	791b      	ldrb	r3, [r3, #4]
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fc7d 	bl	80082e8 <USBH_LL_GetURBState>
 80079ee:	4603      	mov	r3, r0
 80079f0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d102      	bne.n	80079fe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2209      	movs	r2, #9
 80079fc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	2b05      	cmp	r3, #5
 8007a02:	d102      	bne.n	8007a0a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007a04:	2303      	movs	r3, #3
 8007a06:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a08:	e0d6      	b.n	8007bb8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007a0a:	7bbb      	ldrb	r3, [r7, #14]
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	f040 80d3 	bne.w	8007bb8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	220b      	movs	r2, #11
 8007a16:	761a      	strb	r2, [r3, #24]
      break;
 8007a18:	e0ce      	b.n	8007bb8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6899      	ldr	r1, [r3, #8]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	899a      	ldrh	r2, [r3, #12]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	795b      	ldrb	r3, [r3, #5]
 8007a26:	2001      	movs	r0, #1
 8007a28:	9000      	str	r0, [sp, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f8ea 	bl	8007c04 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2206      	movs	r2, #6
 8007a40:	761a      	strb	r2, [r3, #24]
      break;
 8007a42:	e0c0      	b.n	8007bc6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	795b      	ldrb	r3, [r3, #5]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fc4c 	bl	80082e8 <USBH_LL_GetURBState>
 8007a50:	4603      	mov	r3, r0
 8007a52:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d103      	bne.n	8007a62 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2207      	movs	r2, #7
 8007a5e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a60:	e0ac      	b.n	8007bbc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007a62:	7bbb      	ldrb	r3, [r7, #14]
 8007a64:	2b05      	cmp	r3, #5
 8007a66:	d105      	bne.n	8007a74 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	220c      	movs	r2, #12
 8007a6c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	73fb      	strb	r3, [r7, #15]
      break;
 8007a72:	e0a3      	b.n	8007bbc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d103      	bne.n	8007a82 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2205      	movs	r2, #5
 8007a7e:	761a      	strb	r2, [r3, #24]
      break;
 8007a80:	e09c      	b.n	8007bbc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	2b04      	cmp	r3, #4
 8007a86:	f040 8099 	bne.w	8007bbc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	220b      	movs	r2, #11
 8007a8e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a90:	2302      	movs	r3, #2
 8007a92:	73fb      	strb	r3, [r7, #15]
      break;
 8007a94:	e092      	b.n	8007bbc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	791b      	ldrb	r3, [r3, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f8d5 	bl	8007c4e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2208      	movs	r2, #8
 8007ab4:	761a      	strb	r2, [r3, #24]

      break;
 8007ab6:	e086      	b.n	8007bc6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	791b      	ldrb	r3, [r3, #4]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fc12 	bl	80082e8 <USBH_LL_GetURBState>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d105      	bne.n	8007ada <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	220d      	movs	r2, #13
 8007ad2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ad8:	e072      	b.n	8007bc0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
 8007adc:	2b04      	cmp	r3, #4
 8007ade:	d103      	bne.n	8007ae8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	220b      	movs	r2, #11
 8007ae4:	761a      	strb	r2, [r3, #24]
      break;
 8007ae6:	e06b      	b.n	8007bc0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	2b05      	cmp	r3, #5
 8007aec:	d168      	bne.n	8007bc0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007aee:	2303      	movs	r3, #3
 8007af0:	73fb      	strb	r3, [r7, #15]
      break;
 8007af2:	e065      	b.n	8007bc0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	795b      	ldrb	r3, [r3, #5]
 8007af8:	2201      	movs	r2, #1
 8007afa:	9200      	str	r2, [sp, #0]
 8007afc:	2200      	movs	r2, #0
 8007afe:	2100      	movs	r1, #0
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f87f 	bl	8007c04 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	220a      	movs	r2, #10
 8007b16:	761a      	strb	r2, [r3, #24]
      break;
 8007b18:	e055      	b.n	8007bc6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	795b      	ldrb	r3, [r3, #5]
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fbe1 	bl	80082e8 <USBH_LL_GetURBState>
 8007b26:	4603      	mov	r3, r0
 8007b28:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d105      	bne.n	8007b3c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	220d      	movs	r2, #13
 8007b38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b3a:	e043      	b.n	8007bc4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d103      	bne.n	8007b4a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2209      	movs	r2, #9
 8007b46:	761a      	strb	r2, [r3, #24]
      break;
 8007b48:	e03c      	b.n	8007bc4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d139      	bne.n	8007bc4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	220b      	movs	r2, #11
 8007b54:	761a      	strb	r2, [r3, #24]
      break;
 8007b56:	e035      	b.n	8007bc4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	7e5b      	ldrb	r3, [r3, #25]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	b2da      	uxtb	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	765a      	strb	r2, [r3, #25]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	7e5b      	ldrb	r3, [r3, #25]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d806      	bhi.n	8007b7a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007b78:	e025      	b.n	8007bc6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b80:	2106      	movs	r1, #6
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	795b      	ldrb	r3, [r3, #5]
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f90c 	bl	8007db0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	791b      	ldrb	r3, [r3, #4]
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f906 	bl	8007db0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007baa:	2302      	movs	r3, #2
 8007bac:	73fb      	strb	r3, [r7, #15]
      break;
 8007bae:	e00a      	b.n	8007bc6 <USBH_HandleControl+0x2de>

    default:
      break;
 8007bb0:	bf00      	nop
 8007bb2:	e008      	b.n	8007bc6 <USBH_HandleControl+0x2de>
      break;
 8007bb4:	bf00      	nop
 8007bb6:	e006      	b.n	8007bc6 <USBH_HandleControl+0x2de>
      break;
 8007bb8:	bf00      	nop
 8007bba:	e004      	b.n	8007bc6 <USBH_HandleControl+0x2de>
      break;
 8007bbc:	bf00      	nop
 8007bbe:	e002      	b.n	8007bc6 <USBH_HandleControl+0x2de>
      break;
 8007bc0:	bf00      	nop
 8007bc2:	e000      	b.n	8007bc6 <USBH_HandleControl+0x2de>
      break;
 8007bc4:	bf00      	nop
  }

  return status;
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b088      	sub	sp, #32
 8007bd4:	af04      	add	r7, sp, #16
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007bde:	79f9      	ldrb	r1, [r7, #7]
 8007be0:	2300      	movs	r3, #0
 8007be2:	9303      	str	r3, [sp, #12]
 8007be4:	2308      	movs	r3, #8
 8007be6:	9302      	str	r3, [sp, #8]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	9301      	str	r3, [sp, #4]
 8007bec:	2300      	movs	r3, #0
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 fb46 	bl	8008286 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af04      	add	r7, sp, #16
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	4611      	mov	r1, r2
 8007c10:	461a      	mov	r2, r3
 8007c12:	460b      	mov	r3, r1
 8007c14:	80fb      	strh	r3, [r7, #6]
 8007c16:	4613      	mov	r3, r2
 8007c18:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c28:	7979      	ldrb	r1, [r7, #5]
 8007c2a:	7e3b      	ldrb	r3, [r7, #24]
 8007c2c:	9303      	str	r3, [sp, #12]
 8007c2e:	88fb      	ldrh	r3, [r7, #6]
 8007c30:	9302      	str	r3, [sp, #8]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	9301      	str	r3, [sp, #4]
 8007c36:	2301      	movs	r3, #1
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 fb21 	bl	8008286 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b088      	sub	sp, #32
 8007c52:	af04      	add	r7, sp, #16
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	4611      	mov	r1, r2
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	80fb      	strh	r3, [r7, #6]
 8007c60:	4613      	mov	r3, r2
 8007c62:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c64:	7979      	ldrb	r1, [r7, #5]
 8007c66:	2300      	movs	r3, #0
 8007c68:	9303      	str	r3, [sp, #12]
 8007c6a:	88fb      	ldrh	r3, [r7, #6]
 8007c6c:	9302      	str	r3, [sp, #8]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	2301      	movs	r3, #1
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	2300      	movs	r3, #0
 8007c78:	2201      	movs	r2, #1
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 fb03 	bl	8008286 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007c80:	2300      	movs	r3, #0

}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b088      	sub	sp, #32
 8007c8e:	af04      	add	r7, sp, #16
 8007c90:	60f8      	str	r0, [r7, #12]
 8007c92:	60b9      	str	r1, [r7, #8]
 8007c94:	4611      	mov	r1, r2
 8007c96:	461a      	mov	r2, r3
 8007c98:	460b      	mov	r3, r1
 8007c9a:	80fb      	strh	r3, [r7, #6]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007cae:	7979      	ldrb	r1, [r7, #5]
 8007cb0:	7e3b      	ldrb	r3, [r7, #24]
 8007cb2:	9303      	str	r3, [sp, #12]
 8007cb4:	88fb      	ldrh	r3, [r7, #6]
 8007cb6:	9302      	str	r3, [sp, #8]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	9301      	str	r3, [sp, #4]
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 fade 	bl	8008286 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af04      	add	r7, sp, #16
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4611      	mov	r1, r2
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	80fb      	strh	r3, [r7, #6]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007cea:	7979      	ldrb	r1, [r7, #5]
 8007cec:	2300      	movs	r3, #0
 8007cee:	9303      	str	r3, [sp, #12]
 8007cf0:	88fb      	ldrh	r3, [r7, #6]
 8007cf2:	9302      	str	r3, [sp, #8]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	2201      	movs	r2, #1
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 fac0 	bl	8008286 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af04      	add	r7, sp, #16
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	4608      	mov	r0, r1
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	4603      	mov	r3, r0
 8007d20:	70fb      	strb	r3, [r7, #3]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70bb      	strb	r3, [r7, #2]
 8007d26:	4613      	mov	r3, r2
 8007d28:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007d2a:	7878      	ldrb	r0, [r7, #1]
 8007d2c:	78ba      	ldrb	r2, [r7, #2]
 8007d2e:	78f9      	ldrb	r1, [r7, #3]
 8007d30:	8b3b      	ldrh	r3, [r7, #24]
 8007d32:	9302      	str	r3, [sp, #8]
 8007d34:	7d3b      	ldrb	r3, [r7, #20]
 8007d36:	9301      	str	r3, [sp, #4]
 8007d38:	7c3b      	ldrb	r3, [r7, #16]
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fa53 	bl	80081ea <USBH_LL_OpenPipe>

  return USBH_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b082      	sub	sp, #8
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	460b      	mov	r3, r1
 8007d58:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007d5a:	78fb      	ldrb	r3, [r7, #3]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fa72 	bl	8008248 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	460b      	mov	r3, r1
 8007d78:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f836 	bl	8007dec <USBH_GetFreePipe>
 8007d80:	4603      	mov	r3, r0
 8007d82:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d84:	89fb      	ldrh	r3, [r7, #14]
 8007d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d00a      	beq.n	8007da4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007d8e:	78fa      	ldrb	r2, [r7, #3]
 8007d90:	89fb      	ldrh	r3, [r7, #14]
 8007d92:	f003 030f 	and.w	r3, r3, #15
 8007d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d9a:	6879      	ldr	r1, [r7, #4]
 8007d9c:	33e0      	adds	r3, #224	; 0xe0
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	440b      	add	r3, r1
 8007da2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007da4:	89fb      	ldrh	r3, [r7, #14]
 8007da6:	b2db      	uxtb	r3, r3
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007dbc:	78fb      	ldrb	r3, [r7, #3]
 8007dbe:	2b0a      	cmp	r3, #10
 8007dc0:	d80d      	bhi.n	8007dde <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	33e0      	adds	r3, #224	; 0xe0
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	33e0      	adds	r3, #224	; 0xe0
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	440b      	add	r3, r1
 8007ddc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
 8007dfc:	e00f      	b.n	8007e1e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	33e0      	adds	r3, #224	; 0xe0
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d102      	bne.n	8007e18 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	e007      	b.n	8007e28 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	73fb      	strb	r3, [r7, #15]
 8007e1e:	7bfb      	ldrb	r3, [r7, #15]
 8007e20:	2b0a      	cmp	r3, #10
 8007e22:	d9ec      	bls.n	8007dfe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007e38:	2201      	movs	r2, #1
 8007e3a:	490e      	ldr	r1, [pc, #56]	; (8007e74 <MX_USB_HOST_Init+0x40>)
 8007e3c:	480e      	ldr	r0, [pc, #56]	; (8007e78 <MX_USB_HOST_Init+0x44>)
 8007e3e:	f7fe fca1 	bl	8006784 <USBH_Init>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007e48:	f7f8 ff6a 	bl	8000d20 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007e4c:	490b      	ldr	r1, [pc, #44]	; (8007e7c <MX_USB_HOST_Init+0x48>)
 8007e4e:	480a      	ldr	r0, [pc, #40]	; (8007e78 <MX_USB_HOST_Init+0x44>)
 8007e50:	f7fe fd26 	bl	80068a0 <USBH_RegisterClass>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007e5a:	f7f8 ff61 	bl	8000d20 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e5e:	4806      	ldr	r0, [pc, #24]	; (8007e78 <MX_USB_HOST_Init+0x44>)
 8007e60:	f7fe fdaa 	bl	80069b8 <USBH_Start>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e6a:	f7f8 ff59 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e6e:	bf00      	nop
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	08007e95 	.word	0x08007e95
 8007e78:	200001d0 	.word	0x200001d0
 8007e7c:	20000010 	.word	0x20000010

08007e80 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007e84:	4802      	ldr	r0, [pc, #8]	; (8007e90 <MX_USB_HOST_Process+0x10>)
 8007e86:	f7fe fda7 	bl	80069d8 <USBH_Process>
}
 8007e8a:	bf00      	nop
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	200001d0 	.word	0x200001d0

08007e94 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007ea0:	78fb      	ldrb	r3, [r7, #3]
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	d819      	bhi.n	8007edc <USBH_UserProcess+0x48>
 8007ea8:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <USBH_UserProcess+0x1c>)
 8007eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eae:	bf00      	nop
 8007eb0:	08007edd 	.word	0x08007edd
 8007eb4:	08007ecd 	.word	0x08007ecd
 8007eb8:	08007edd 	.word	0x08007edd
 8007ebc:	08007ed5 	.word	0x08007ed5
 8007ec0:	08007ec5 	.word	0x08007ec5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007ec4:	4b09      	ldr	r3, [pc, #36]	; (8007eec <USBH_UserProcess+0x58>)
 8007ec6:	2203      	movs	r2, #3
 8007ec8:	701a      	strb	r2, [r3, #0]
  break;
 8007eca:	e008      	b.n	8007ede <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007ecc:	4b07      	ldr	r3, [pc, #28]	; (8007eec <USBH_UserProcess+0x58>)
 8007ece:	2202      	movs	r2, #2
 8007ed0:	701a      	strb	r2, [r3, #0]
  break;
 8007ed2:	e004      	b.n	8007ede <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007ed4:	4b05      	ldr	r3, [pc, #20]	; (8007eec <USBH_UserProcess+0x58>)
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	701a      	strb	r2, [r3, #0]
  break;
 8007eda:	e000      	b.n	8007ede <USBH_UserProcess+0x4a>

  default:
  break;
 8007edc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007ede:	bf00      	nop
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	200000c0 	.word	0x200000c0

08007ef0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b08a      	sub	sp, #40	; 0x28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ef8:	f107 0314 	add.w	r3, r7, #20
 8007efc:	2200      	movs	r2, #0
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	605a      	str	r2, [r3, #4]
 8007f02:	609a      	str	r2, [r3, #8]
 8007f04:	60da      	str	r2, [r3, #12]
 8007f06:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f10:	d147      	bne.n	8007fa2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f12:	2300      	movs	r3, #0
 8007f14:	613b      	str	r3, [r7, #16]
 8007f16:	4b25      	ldr	r3, [pc, #148]	; (8007fac <HAL_HCD_MspInit+0xbc>)
 8007f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1a:	4a24      	ldr	r2, [pc, #144]	; (8007fac <HAL_HCD_MspInit+0xbc>)
 8007f1c:	f043 0301 	orr.w	r3, r3, #1
 8007f20:	6313      	str	r3, [r2, #48]	; 0x30
 8007f22:	4b22      	ldr	r3, [pc, #136]	; (8007fac <HAL_HCD_MspInit+0xbc>)
 8007f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	613b      	str	r3, [r7, #16]
 8007f2c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f34:	2300      	movs	r3, #0
 8007f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007f3c:	f107 0314 	add.w	r3, r7, #20
 8007f40:	4619      	mov	r1, r3
 8007f42:	481b      	ldr	r0, [pc, #108]	; (8007fb0 <HAL_HCD_MspInit+0xc0>)
 8007f44:	f7f9 fb12 	bl	800156c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007f48:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f4e:	2302      	movs	r3, #2
 8007f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f56:	2300      	movs	r3, #0
 8007f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f5a:	230a      	movs	r3, #10
 8007f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f5e:	f107 0314 	add.w	r3, r7, #20
 8007f62:	4619      	mov	r1, r3
 8007f64:	4812      	ldr	r0, [pc, #72]	; (8007fb0 <HAL_HCD_MspInit+0xc0>)
 8007f66:	f7f9 fb01 	bl	800156c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f6a:	4b10      	ldr	r3, [pc, #64]	; (8007fac <HAL_HCD_MspInit+0xbc>)
 8007f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6e:	4a0f      	ldr	r2, [pc, #60]	; (8007fac <HAL_HCD_MspInit+0xbc>)
 8007f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f74:	6353      	str	r3, [r2, #52]	; 0x34
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
 8007f7a:	4b0c      	ldr	r3, [pc, #48]	; (8007fac <HAL_HCD_MspInit+0xbc>)
 8007f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f7e:	4a0b      	ldr	r2, [pc, #44]	; (8007fac <HAL_HCD_MspInit+0xbc>)
 8007f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f84:	6453      	str	r3, [r2, #68]	; 0x44
 8007f86:	4b09      	ldr	r3, [pc, #36]	; (8007fac <HAL_HCD_MspInit+0xbc>)
 8007f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f8e:	60fb      	str	r3, [r7, #12]
 8007f90:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f92:	2200      	movs	r2, #0
 8007f94:	2100      	movs	r1, #0
 8007f96:	2043      	movs	r0, #67	; 0x43
 8007f98:	f7f9 fab1 	bl	80014fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f9c:	2043      	movs	r0, #67	; 0x43
 8007f9e:	f7f9 faca 	bl	8001536 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007fa2:	bf00      	nop
 8007fa4:	3728      	adds	r7, #40	; 0x28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	40023800 	.word	0x40023800
 8007fb0:	40020000 	.word	0x40020000

08007fb4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7ff f8db 	bl	800717e <USBH_LL_IncTimer>
}
 8007fc8:	bf00      	nop
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff f913 	bl	800720a <USBH_LL_Connect>
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7ff f91c 	bl	8007238 <USBH_LL_Disconnect>
}
 8008000:	bf00      	nop
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	70fb      	strb	r3, [r7, #3]
 8008014:	4613      	mov	r3, r2
 8008016:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008032:	4618      	mov	r0, r3
 8008034:	f7ff f8cd 	bl	80071d2 <USBH_LL_PortEnabled>
}
 8008038:	bf00      	nop
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800804e:	4618      	mov	r0, r3
 8008050:	f7ff f8cd 	bl	80071ee <USBH_LL_PortDisabled>
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800806a:	2b01      	cmp	r3, #1
 800806c:	d12a      	bne.n	80080c4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800806e:	4a18      	ldr	r2, [pc, #96]	; (80080d0 <USBH_LL_Init+0x74>)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a15      	ldr	r2, [pc, #84]	; (80080d0 <USBH_LL_Init+0x74>)
 800807a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800807e:	4b14      	ldr	r3, [pc, #80]	; (80080d0 <USBH_LL_Init+0x74>)
 8008080:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008084:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008086:	4b12      	ldr	r3, [pc, #72]	; (80080d0 <USBH_LL_Init+0x74>)
 8008088:	2208      	movs	r2, #8
 800808a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800808c:	4b10      	ldr	r3, [pc, #64]	; (80080d0 <USBH_LL_Init+0x74>)
 800808e:	2201      	movs	r2, #1
 8008090:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008092:	4b0f      	ldr	r3, [pc, #60]	; (80080d0 <USBH_LL_Init+0x74>)
 8008094:	2200      	movs	r2, #0
 8008096:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008098:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <USBH_LL_Init+0x74>)
 800809a:	2202      	movs	r2, #2
 800809c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800809e:	4b0c      	ldr	r3, [pc, #48]	; (80080d0 <USBH_LL_Init+0x74>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80080a4:	480a      	ldr	r0, [pc, #40]	; (80080d0 <USBH_LL_Init+0x74>)
 80080a6:	f7f9 fc2e 	bl	8001906 <HAL_HCD_Init>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80080b0:	f7f8 fe36 	bl	8000d20 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80080b4:	4806      	ldr	r0, [pc, #24]	; (80080d0 <USBH_LL_Init+0x74>)
 80080b6:	f7fa f812 	bl	80020de <HAL_HCD_GetCurrentFrame>
 80080ba:	4603      	mov	r3, r0
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7ff f84e 	bl	8007160 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	200005a8 	.word	0x200005a8

080080d4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7f9 ff81 	bl	8001ff2 <HAL_HCD_Start>
 80080f0:	4603      	mov	r3, r0
 80080f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 f95c 	bl	80083b4 <USBH_Get_USB_Status>
 80080fc:	4603      	mov	r3, r0
 80080fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008100:	7bbb      	ldrb	r3, [r7, #14]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008120:	4618      	mov	r0, r3
 8008122:	f7f9 ff89 	bl	8002038 <HAL_HCD_Stop>
 8008126:	4603      	mov	r3, r0
 8008128:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800812a:	7bfb      	ldrb	r3, [r7, #15]
 800812c:	4618      	mov	r0, r3
 800812e:	f000 f941 	bl	80083b4 <USBH_Get_USB_Status>
 8008132:	4603      	mov	r3, r0
 8008134:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008136:	7bbb      	ldrb	r3, [r7, #14]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008148:	2301      	movs	r3, #1
 800814a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008152:	4618      	mov	r0, r3
 8008154:	f7f9 ffd1 	bl	80020fa <HAL_HCD_GetCurrentSpeed>
 8008158:	4603      	mov	r3, r0
 800815a:	2b02      	cmp	r3, #2
 800815c:	d00c      	beq.n	8008178 <USBH_LL_GetSpeed+0x38>
 800815e:	2b02      	cmp	r3, #2
 8008160:	d80d      	bhi.n	800817e <USBH_LL_GetSpeed+0x3e>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d002      	beq.n	800816c <USBH_LL_GetSpeed+0x2c>
 8008166:	2b01      	cmp	r3, #1
 8008168:	d003      	beq.n	8008172 <USBH_LL_GetSpeed+0x32>
 800816a:	e008      	b.n	800817e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
    break;
 8008170:	e008      	b.n	8008184 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008172:	2301      	movs	r3, #1
 8008174:	73fb      	strb	r3, [r7, #15]
    break;
 8008176:	e005      	b.n	8008184 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008178:	2302      	movs	r3, #2
 800817a:	73fb      	strb	r3, [r7, #15]
    break;
 800817c:	e002      	b.n	8008184 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800817e:	2301      	movs	r3, #1
 8008180:	73fb      	strb	r3, [r7, #15]
    break;
 8008182:	bf00      	nop
  }
  return  speed;
 8008184:	7bfb      	ldrb	r3, [r7, #15]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7f9 ff64 	bl	8002072 <HAL_HCD_ResetPort>
 80081aa:	4603      	mov	r3, r0
 80081ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 f8ff 	bl	80083b4 <USBH_Get_USB_Status>
 80081b6:	4603      	mov	r3, r0
 80081b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081d6:	78fa      	ldrb	r2, [r7, #3]
 80081d8:	4611      	mov	r1, r2
 80081da:	4618      	mov	r0, r3
 80081dc:	f7f9 ff6b 	bl	80020b6 <HAL_HCD_HC_GetXferCount>
 80081e0:	4603      	mov	r3, r0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081ea:	b590      	push	{r4, r7, lr}
 80081ec:	b089      	sub	sp, #36	; 0x24
 80081ee:	af04      	add	r7, sp, #16
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	4608      	mov	r0, r1
 80081f4:	4611      	mov	r1, r2
 80081f6:	461a      	mov	r2, r3
 80081f8:	4603      	mov	r3, r0
 80081fa:	70fb      	strb	r3, [r7, #3]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70bb      	strb	r3, [r7, #2]
 8008200:	4613      	mov	r3, r2
 8008202:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008212:	787c      	ldrb	r4, [r7, #1]
 8008214:	78ba      	ldrb	r2, [r7, #2]
 8008216:	78f9      	ldrb	r1, [r7, #3]
 8008218:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800821a:	9302      	str	r3, [sp, #8]
 800821c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008220:	9301      	str	r3, [sp, #4]
 8008222:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	4623      	mov	r3, r4
 800822a:	f7f9 fbce 	bl	80019ca <HAL_HCD_HC_Init>
 800822e:	4603      	mov	r3, r0
 8008230:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008232:	7bfb      	ldrb	r3, [r7, #15]
 8008234:	4618      	mov	r0, r3
 8008236:	f000 f8bd 	bl	80083b4 <USBH_Get_USB_Status>
 800823a:	4603      	mov	r3, r0
 800823c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800823e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	bd90      	pop	{r4, r7, pc}

08008248 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008262:	78fa      	ldrb	r2, [r7, #3]
 8008264:	4611      	mov	r1, r2
 8008266:	4618      	mov	r0, r3
 8008268:	f7f9 fc3e 	bl	8001ae8 <HAL_HCD_HC_Halt>
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	4618      	mov	r0, r3
 8008274:	f000 f89e 	bl	80083b4 <USBH_Get_USB_Status>
 8008278:	4603      	mov	r3, r0
 800827a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800827c:	7bbb      	ldrb	r3, [r7, #14]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008286:	b590      	push	{r4, r7, lr}
 8008288:	b089      	sub	sp, #36	; 0x24
 800828a:	af04      	add	r7, sp, #16
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	4608      	mov	r0, r1
 8008290:	4611      	mov	r1, r2
 8008292:	461a      	mov	r2, r3
 8008294:	4603      	mov	r3, r0
 8008296:	70fb      	strb	r3, [r7, #3]
 8008298:	460b      	mov	r3, r1
 800829a:	70bb      	strb	r3, [r7, #2]
 800829c:	4613      	mov	r3, r2
 800829e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082a0:	2300      	movs	r3, #0
 80082a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80082ae:	787c      	ldrb	r4, [r7, #1]
 80082b0:	78ba      	ldrb	r2, [r7, #2]
 80082b2:	78f9      	ldrb	r1, [r7, #3]
 80082b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80082b8:	9303      	str	r3, [sp, #12]
 80082ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082bc:	9302      	str	r3, [sp, #8]
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	4623      	mov	r3, r4
 80082ca:	f7f9 fc31 	bl	8001b30 <HAL_HCD_HC_SubmitRequest>
 80082ce:	4603      	mov	r3, r0
 80082d0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 f86d 	bl	80083b4 <USBH_Get_USB_Status>
 80082da:	4603      	mov	r3, r0
 80082dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082de:	7bbb      	ldrb	r3, [r7, #14]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd90      	pop	{r4, r7, pc}

080082e8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082fa:	78fa      	ldrb	r2, [r7, #3]
 80082fc:	4611      	mov	r1, r2
 80082fe:	4618      	mov	r0, r3
 8008300:	f7f9 fec5 	bl	800208e <HAL_HCD_HC_GetURBState>
 8008304:	4603      	mov	r3, r0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b082      	sub	sp, #8
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	460b      	mov	r3, r1
 8008318:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008320:	2b01      	cmp	r3, #1
 8008322:	d103      	bne.n	800832c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	4618      	mov	r0, r3
 8008328:	f000 f870 	bl	800840c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800832c:	20c8      	movs	r0, #200	; 0xc8
 800832e:	f7f8 ffe7 	bl	8001300 <HAL_Delay>
  return USBH_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
 8008348:	4613      	mov	r3, r2
 800834a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008352:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	212c      	movs	r1, #44	; 0x2c
 800835a:	fb01 f303 	mul.w	r3, r1, r3
 800835e:	4413      	add	r3, r2
 8008360:	333b      	adds	r3, #59	; 0x3b
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d009      	beq.n	800837c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	212c      	movs	r1, #44	; 0x2c
 800836e:	fb01 f303 	mul.w	r3, r1, r3
 8008372:	4413      	add	r3, r2
 8008374:	3354      	adds	r3, #84	; 0x54
 8008376:	78ba      	ldrb	r2, [r7, #2]
 8008378:	701a      	strb	r2, [r3, #0]
 800837a:	e008      	b.n	800838e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	212c      	movs	r1, #44	; 0x2c
 8008382:	fb01 f303 	mul.w	r3, r1, r3
 8008386:	4413      	add	r3, r2
 8008388:	3355      	adds	r3, #85	; 0x55
 800838a:	78ba      	ldrb	r2, [r7, #2]
 800838c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7f8 ffab 	bl	8001300 <HAL_Delay>
}
 80083aa:	bf00      	nop
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
	...

080083b4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d817      	bhi.n	80083f8 <USBH_Get_USB_Status+0x44>
 80083c8:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <USBH_Get_USB_Status+0x1c>)
 80083ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ce:	bf00      	nop
 80083d0:	080083e1 	.word	0x080083e1
 80083d4:	080083e7 	.word	0x080083e7
 80083d8:	080083ed 	.word	0x080083ed
 80083dc:	080083f3 	.word	0x080083f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]
    break;
 80083e4:	e00b      	b.n	80083fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80083e6:	2302      	movs	r3, #2
 80083e8:	73fb      	strb	r3, [r7, #15]
    break;
 80083ea:	e008      	b.n	80083fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80083ec:	2301      	movs	r3, #1
 80083ee:	73fb      	strb	r3, [r7, #15]
    break;
 80083f0:	e005      	b.n	80083fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80083f2:	2302      	movs	r3, #2
 80083f4:	73fb      	strb	r3, [r7, #15]
    break;
 80083f6:	e002      	b.n	80083fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80083f8:	2302      	movs	r3, #2
 80083fa:	73fb      	strb	r3, [r7, #15]
    break;
 80083fc:	bf00      	nop
  }
  return usb_status;
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008416:	79fb      	ldrb	r3, [r7, #7]
 8008418:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800841a:	79fb      	ldrb	r3, [r7, #7]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d102      	bne.n	8008426 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008420:	2301      	movs	r3, #1
 8008422:	73fb      	strb	r3, [r7, #15]
 8008424:	e001      	b.n	800842a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008426:	2300      	movs	r3, #0
 8008428:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800842a:	7bfb      	ldrb	r3, [r7, #15]
 800842c:	461a      	mov	r2, r3
 800842e:	2101      	movs	r1, #1
 8008430:	4803      	ldr	r0, [pc, #12]	; (8008440 <MX_DriverVbusFS+0x34>)
 8008432:	f7f9 fa4f 	bl	80018d4 <HAL_GPIO_WritePin>
}
 8008436:	bf00      	nop
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	40020800 	.word	0x40020800

08008444 <__errno>:
 8008444:	4b01      	ldr	r3, [pc, #4]	; (800844c <__errno+0x8>)
 8008446:	6818      	ldr	r0, [r3, #0]
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	20000030 	.word	0x20000030

08008450 <__libc_init_array>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	4d0d      	ldr	r5, [pc, #52]	; (8008488 <__libc_init_array+0x38>)
 8008454:	4c0d      	ldr	r4, [pc, #52]	; (800848c <__libc_init_array+0x3c>)
 8008456:	1b64      	subs	r4, r4, r5
 8008458:	10a4      	asrs	r4, r4, #2
 800845a:	2600      	movs	r6, #0
 800845c:	42a6      	cmp	r6, r4
 800845e:	d109      	bne.n	8008474 <__libc_init_array+0x24>
 8008460:	4d0b      	ldr	r5, [pc, #44]	; (8008490 <__libc_init_array+0x40>)
 8008462:	4c0c      	ldr	r4, [pc, #48]	; (8008494 <__libc_init_array+0x44>)
 8008464:	f000 f8f8 	bl	8008658 <_init>
 8008468:	1b64      	subs	r4, r4, r5
 800846a:	10a4      	asrs	r4, r4, #2
 800846c:	2600      	movs	r6, #0
 800846e:	42a6      	cmp	r6, r4
 8008470:	d105      	bne.n	800847e <__libc_init_array+0x2e>
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	f855 3b04 	ldr.w	r3, [r5], #4
 8008478:	4798      	blx	r3
 800847a:	3601      	adds	r6, #1
 800847c:	e7ee      	b.n	800845c <__libc_init_array+0xc>
 800847e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008482:	4798      	blx	r3
 8008484:	3601      	adds	r6, #1
 8008486:	e7f2      	b.n	800846e <__libc_init_array+0x1e>
 8008488:	08008694 	.word	0x08008694
 800848c:	08008694 	.word	0x08008694
 8008490:	08008694 	.word	0x08008694
 8008494:	08008698 	.word	0x08008698

08008498 <malloc>:
 8008498:	4b02      	ldr	r3, [pc, #8]	; (80084a4 <malloc+0xc>)
 800849a:	4601      	mov	r1, r0
 800849c:	6818      	ldr	r0, [r3, #0]
 800849e:	f000 b863 	b.w	8008568 <_malloc_r>
 80084a2:	bf00      	nop
 80084a4:	20000030 	.word	0x20000030

080084a8 <free>:
 80084a8:	4b02      	ldr	r3, [pc, #8]	; (80084b4 <free+0xc>)
 80084aa:	4601      	mov	r1, r0
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	f000 b80b 	b.w	80084c8 <_free_r>
 80084b2:	bf00      	nop
 80084b4:	20000030 	.word	0x20000030

080084b8 <memset>:
 80084b8:	4402      	add	r2, r0
 80084ba:	4603      	mov	r3, r0
 80084bc:	4293      	cmp	r3, r2
 80084be:	d100      	bne.n	80084c2 <memset+0xa>
 80084c0:	4770      	bx	lr
 80084c2:	f803 1b01 	strb.w	r1, [r3], #1
 80084c6:	e7f9      	b.n	80084bc <memset+0x4>

080084c8 <_free_r>:
 80084c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084ca:	2900      	cmp	r1, #0
 80084cc:	d048      	beq.n	8008560 <_free_r+0x98>
 80084ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084d2:	9001      	str	r0, [sp, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f1a1 0404 	sub.w	r4, r1, #4
 80084da:	bfb8      	it	lt
 80084dc:	18e4      	addlt	r4, r4, r3
 80084de:	f000 f8ad 	bl	800863c <__malloc_lock>
 80084e2:	4a20      	ldr	r2, [pc, #128]	; (8008564 <_free_r+0x9c>)
 80084e4:	9801      	ldr	r0, [sp, #4]
 80084e6:	6813      	ldr	r3, [r2, #0]
 80084e8:	4615      	mov	r5, r2
 80084ea:	b933      	cbnz	r3, 80084fa <_free_r+0x32>
 80084ec:	6063      	str	r3, [r4, #4]
 80084ee:	6014      	str	r4, [r2, #0]
 80084f0:	b003      	add	sp, #12
 80084f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084f6:	f000 b8a7 	b.w	8008648 <__malloc_unlock>
 80084fa:	42a3      	cmp	r3, r4
 80084fc:	d90b      	bls.n	8008516 <_free_r+0x4e>
 80084fe:	6821      	ldr	r1, [r4, #0]
 8008500:	1862      	adds	r2, r4, r1
 8008502:	4293      	cmp	r3, r2
 8008504:	bf04      	itt	eq
 8008506:	681a      	ldreq	r2, [r3, #0]
 8008508:	685b      	ldreq	r3, [r3, #4]
 800850a:	6063      	str	r3, [r4, #4]
 800850c:	bf04      	itt	eq
 800850e:	1852      	addeq	r2, r2, r1
 8008510:	6022      	streq	r2, [r4, #0]
 8008512:	602c      	str	r4, [r5, #0]
 8008514:	e7ec      	b.n	80084f0 <_free_r+0x28>
 8008516:	461a      	mov	r2, r3
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	b10b      	cbz	r3, 8008520 <_free_r+0x58>
 800851c:	42a3      	cmp	r3, r4
 800851e:	d9fa      	bls.n	8008516 <_free_r+0x4e>
 8008520:	6811      	ldr	r1, [r2, #0]
 8008522:	1855      	adds	r5, r2, r1
 8008524:	42a5      	cmp	r5, r4
 8008526:	d10b      	bne.n	8008540 <_free_r+0x78>
 8008528:	6824      	ldr	r4, [r4, #0]
 800852a:	4421      	add	r1, r4
 800852c:	1854      	adds	r4, r2, r1
 800852e:	42a3      	cmp	r3, r4
 8008530:	6011      	str	r1, [r2, #0]
 8008532:	d1dd      	bne.n	80084f0 <_free_r+0x28>
 8008534:	681c      	ldr	r4, [r3, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	6053      	str	r3, [r2, #4]
 800853a:	4421      	add	r1, r4
 800853c:	6011      	str	r1, [r2, #0]
 800853e:	e7d7      	b.n	80084f0 <_free_r+0x28>
 8008540:	d902      	bls.n	8008548 <_free_r+0x80>
 8008542:	230c      	movs	r3, #12
 8008544:	6003      	str	r3, [r0, #0]
 8008546:	e7d3      	b.n	80084f0 <_free_r+0x28>
 8008548:	6825      	ldr	r5, [r4, #0]
 800854a:	1961      	adds	r1, r4, r5
 800854c:	428b      	cmp	r3, r1
 800854e:	bf04      	itt	eq
 8008550:	6819      	ldreq	r1, [r3, #0]
 8008552:	685b      	ldreq	r3, [r3, #4]
 8008554:	6063      	str	r3, [r4, #4]
 8008556:	bf04      	itt	eq
 8008558:	1949      	addeq	r1, r1, r5
 800855a:	6021      	streq	r1, [r4, #0]
 800855c:	6054      	str	r4, [r2, #4]
 800855e:	e7c7      	b.n	80084f0 <_free_r+0x28>
 8008560:	b003      	add	sp, #12
 8008562:	bd30      	pop	{r4, r5, pc}
 8008564:	200000c4 	.word	0x200000c4

08008568 <_malloc_r>:
 8008568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856a:	1ccd      	adds	r5, r1, #3
 800856c:	f025 0503 	bic.w	r5, r5, #3
 8008570:	3508      	adds	r5, #8
 8008572:	2d0c      	cmp	r5, #12
 8008574:	bf38      	it	cc
 8008576:	250c      	movcc	r5, #12
 8008578:	2d00      	cmp	r5, #0
 800857a:	4606      	mov	r6, r0
 800857c:	db01      	blt.n	8008582 <_malloc_r+0x1a>
 800857e:	42a9      	cmp	r1, r5
 8008580:	d903      	bls.n	800858a <_malloc_r+0x22>
 8008582:	230c      	movs	r3, #12
 8008584:	6033      	str	r3, [r6, #0]
 8008586:	2000      	movs	r0, #0
 8008588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800858a:	f000 f857 	bl	800863c <__malloc_lock>
 800858e:	4921      	ldr	r1, [pc, #132]	; (8008614 <_malloc_r+0xac>)
 8008590:	680a      	ldr	r2, [r1, #0]
 8008592:	4614      	mov	r4, r2
 8008594:	b99c      	cbnz	r4, 80085be <_malloc_r+0x56>
 8008596:	4f20      	ldr	r7, [pc, #128]	; (8008618 <_malloc_r+0xb0>)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	b923      	cbnz	r3, 80085a6 <_malloc_r+0x3e>
 800859c:	4621      	mov	r1, r4
 800859e:	4630      	mov	r0, r6
 80085a0:	f000 f83c 	bl	800861c <_sbrk_r>
 80085a4:	6038      	str	r0, [r7, #0]
 80085a6:	4629      	mov	r1, r5
 80085a8:	4630      	mov	r0, r6
 80085aa:	f000 f837 	bl	800861c <_sbrk_r>
 80085ae:	1c43      	adds	r3, r0, #1
 80085b0:	d123      	bne.n	80085fa <_malloc_r+0x92>
 80085b2:	230c      	movs	r3, #12
 80085b4:	6033      	str	r3, [r6, #0]
 80085b6:	4630      	mov	r0, r6
 80085b8:	f000 f846 	bl	8008648 <__malloc_unlock>
 80085bc:	e7e3      	b.n	8008586 <_malloc_r+0x1e>
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	1b5b      	subs	r3, r3, r5
 80085c2:	d417      	bmi.n	80085f4 <_malloc_r+0x8c>
 80085c4:	2b0b      	cmp	r3, #11
 80085c6:	d903      	bls.n	80085d0 <_malloc_r+0x68>
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	441c      	add	r4, r3
 80085cc:	6025      	str	r5, [r4, #0]
 80085ce:	e004      	b.n	80085da <_malloc_r+0x72>
 80085d0:	6863      	ldr	r3, [r4, #4]
 80085d2:	42a2      	cmp	r2, r4
 80085d4:	bf0c      	ite	eq
 80085d6:	600b      	streq	r3, [r1, #0]
 80085d8:	6053      	strne	r3, [r2, #4]
 80085da:	4630      	mov	r0, r6
 80085dc:	f000 f834 	bl	8008648 <__malloc_unlock>
 80085e0:	f104 000b 	add.w	r0, r4, #11
 80085e4:	1d23      	adds	r3, r4, #4
 80085e6:	f020 0007 	bic.w	r0, r0, #7
 80085ea:	1ac2      	subs	r2, r0, r3
 80085ec:	d0cc      	beq.n	8008588 <_malloc_r+0x20>
 80085ee:	1a1b      	subs	r3, r3, r0
 80085f0:	50a3      	str	r3, [r4, r2]
 80085f2:	e7c9      	b.n	8008588 <_malloc_r+0x20>
 80085f4:	4622      	mov	r2, r4
 80085f6:	6864      	ldr	r4, [r4, #4]
 80085f8:	e7cc      	b.n	8008594 <_malloc_r+0x2c>
 80085fa:	1cc4      	adds	r4, r0, #3
 80085fc:	f024 0403 	bic.w	r4, r4, #3
 8008600:	42a0      	cmp	r0, r4
 8008602:	d0e3      	beq.n	80085cc <_malloc_r+0x64>
 8008604:	1a21      	subs	r1, r4, r0
 8008606:	4630      	mov	r0, r6
 8008608:	f000 f808 	bl	800861c <_sbrk_r>
 800860c:	3001      	adds	r0, #1
 800860e:	d1dd      	bne.n	80085cc <_malloc_r+0x64>
 8008610:	e7cf      	b.n	80085b2 <_malloc_r+0x4a>
 8008612:	bf00      	nop
 8008614:	200000c4 	.word	0x200000c4
 8008618:	200000c8 	.word	0x200000c8

0800861c <_sbrk_r>:
 800861c:	b538      	push	{r3, r4, r5, lr}
 800861e:	4d06      	ldr	r5, [pc, #24]	; (8008638 <_sbrk_r+0x1c>)
 8008620:	2300      	movs	r3, #0
 8008622:	4604      	mov	r4, r0
 8008624:	4608      	mov	r0, r1
 8008626:	602b      	str	r3, [r5, #0]
 8008628:	f7f8 fd86 	bl	8001138 <_sbrk>
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	d102      	bne.n	8008636 <_sbrk_r+0x1a>
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	b103      	cbz	r3, 8008636 <_sbrk_r+0x1a>
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	bd38      	pop	{r3, r4, r5, pc}
 8008638:	200008ac 	.word	0x200008ac

0800863c <__malloc_lock>:
 800863c:	4801      	ldr	r0, [pc, #4]	; (8008644 <__malloc_lock+0x8>)
 800863e:	f000 b809 	b.w	8008654 <__retarget_lock_acquire_recursive>
 8008642:	bf00      	nop
 8008644:	200008b4 	.word	0x200008b4

08008648 <__malloc_unlock>:
 8008648:	4801      	ldr	r0, [pc, #4]	; (8008650 <__malloc_unlock+0x8>)
 800864a:	f000 b804 	b.w	8008656 <__retarget_lock_release_recursive>
 800864e:	bf00      	nop
 8008650:	200008b4 	.word	0x200008b4

08008654 <__retarget_lock_acquire_recursive>:
 8008654:	4770      	bx	lr

08008656 <__retarget_lock_release_recursive>:
 8008656:	4770      	bx	lr

08008658 <_init>:
 8008658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865a:	bf00      	nop
 800865c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865e:	bc08      	pop	{r3}
 8008660:	469e      	mov	lr, r3
 8008662:	4770      	bx	lr

08008664 <_fini>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	bf00      	nop
 8008668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866a:	bc08      	pop	{r3}
 800866c:	469e      	mov	lr, r3
 800866e:	4770      	bx	lr
